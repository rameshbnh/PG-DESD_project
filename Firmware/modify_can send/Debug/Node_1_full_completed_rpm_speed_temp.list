
Node_1_full_completed_rpm_speed_temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071f4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08007384  08007384  00008384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007498  08007498  00009010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007498  08007498  00008498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074a0  080074a0  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074a0  080074a0  000084a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080074a4  080074a4  000084a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080074a8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009010  2**0
                  CONTENTS
 10 .bss          00008a6c  20000010  20000010  00009010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008a7c  20008a7c  00009010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014b65  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003343  00000000  00000000  0001dba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001358  00000000  00000000  00020ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eec  00000000  00000000  00022240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024400  00000000  00000000  0002312c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000143dd  00000000  00000000  0004752c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e189e  00000000  00000000  0005b909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013d1a7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005134  00000000  00000000  0013d1ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  00142320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800736c 	.word	0x0800736c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800736c 	.word	0x0800736c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	4a07      	ldr	r2, [pc, #28]	@ (8000528 <vApplicationGetIdleTaskMemory+0x2c>)
 800050c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	4a06      	ldr	r2, [pc, #24]	@ (800052c <vApplicationGetIdleTaskMemory+0x30>)
 8000512:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2280      	movs	r2, #128	@ 0x80
 8000518:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800051a:	bf00      	nop
 800051c:	3714      	adds	r7, #20
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	2000002c 	.word	0x2000002c
 800052c:	20000080 	.word	0x20000080

08000530 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	4a07      	ldr	r2, [pc, #28]	@ (800055c <vApplicationGetTimerTaskMemory+0x2c>)
 8000540:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	4a06      	ldr	r2, [pc, #24]	@ (8000560 <vApplicationGetTimerTaskMemory+0x30>)
 8000546:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800054e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000550:	bf00      	nop
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	20000280 	.word	0x20000280
 8000560:	200002d4 	.word	0x200002d4

08000564 <HAL_GPIO_EXTI_Callback>:
void sendCANData(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0) { // Hall sensor connected to PA0
 800056e:	88fb      	ldrh	r3, [r7, #6]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d104      	bne.n	800057e <HAL_GPIO_EXTI_Callback+0x1a>
        pulseCount++;
 8000574:	4b05      	ldr	r3, [pc, #20]	@ (800058c <HAL_GPIO_EXTI_Callback+0x28>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	3301      	adds	r3, #1
 800057a:	4a04      	ldr	r2, [pc, #16]	@ (800058c <HAL_GPIO_EXTI_Callback+0x28>)
 800057c:	6013      	str	r3, [r2, #0]
    }
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	200007c4 	.word	0x200007c4

08000590 <calculateRPM>:

void calculateRPM() {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
    uint32_t currentTime = HAL_GetTick();
 8000596:	f000 fe13 	bl	80011c0 <HAL_GetTick>
 800059a:	6078      	str	r0, [r7, #4]
    uint32_t elapsedTime = currentTime - lastTime;
 800059c:	4b20      	ldr	r3, [pc, #128]	@ (8000620 <calculateRPM+0x90>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	1ad3      	subs	r3, r2, r3
 80005a4:	603b      	str	r3, [r7, #0]

    if (elapsedTime >= 1000) { // Calculate RPM every second
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80005ac:	d334      	bcc.n	8000618 <calculateRPM+0x88>
        rpm = (pulseCount * 60) / PULSES_PER_REVOLUTION;
 80005ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000624 <calculateRPM+0x94>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	4613      	mov	r3, r2
 80005b4:	011b      	lsls	r3, r3, #4
 80005b6:	1a9b      	subs	r3, r3, r2
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	461a      	mov	r2, r3
 80005bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000628 <calculateRPM+0x98>)
 80005be:	601a      	str	r2, [r3, #0]
        speed = ((float)rpm / 60.0f) * WHEEL_CIRCUMFERENCE;
 80005c0:	4b19      	ldr	r3, [pc, #100]	@ (8000628 <calculateRPM+0x98>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	ee07 3a90 	vmov	s15, r3
 80005c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80005cc:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800062c <calculateRPM+0x9c>
 80005d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005d4:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8000630 <calculateRPM+0xa0>
 80005d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005e0:	ee17 2a90 	vmov	r2, s15
 80005e4:	4b13      	ldr	r3, [pc, #76]	@ (8000634 <calculateRPM+0xa4>)
 80005e6:	601a      	str	r2, [r3, #0]
        newSpeed = speed * 3.6f; // Convert m/s to km/h
 80005e8:	4b12      	ldr	r3, [pc, #72]	@ (8000634 <calculateRPM+0xa4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	ee07 3a90 	vmov	s15, r3
 80005f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005f4:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000638 <calculateRPM+0xa8>
 80005f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000600:	ee17 2a90 	vmov	r2, s15
 8000604:	4b0d      	ldr	r3, [pc, #52]	@ (800063c <calculateRPM+0xac>)
 8000606:	601a      	str	r2, [r3, #0]
        pulseCount = 0;
 8000608:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <calculateRPM+0x94>)
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
        lastTime = currentTime;
 800060e:	4a04      	ldr	r2, [pc, #16]	@ (8000620 <calculateRPM+0x90>)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	6013      	str	r3, [r2, #0]

        // Send data via CAN
        sendCANData();
 8000614:	f000 f814 	bl	8000640 <sendCANData>
    }
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	200007c8 	.word	0x200007c8
 8000624:	200007c4 	.word	0x200007c4
 8000628:	200007cc 	.word	0x200007cc
 800062c:	42700000 	.word	0x42700000
 8000630:	3ea0c49c 	.word	0x3ea0c49c
 8000634:	200007d0 	.word	0x200007d0
 8000638:	40666666 	.word	0x40666666
 800063c:	200007d4 	.word	0x200007d4

08000640 <sendCANData>:

void sendCANData(void) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	@ 0x28
 8000644:	af00      	add	r7, sp, #0
    CAN_TxHeaderTypeDef TxHeader;
    uint8_t TxData[8];
    uint32_t TxMailbox;

    // Prepare RPM data (4 bytes)
    TxData[0] = (rpm >> 24) & 0xFF;
 8000646:	4b22      	ldr	r3, [pc, #136]	@ (80006d0 <sendCANData+0x90>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0e1b      	lsrs	r3, r3, #24
 800064c:	b2db      	uxtb	r3, r3
 800064e:	723b      	strb	r3, [r7, #8]
    TxData[1] = (rpm >> 16) & 0xFF;
 8000650:	4b1f      	ldr	r3, [pc, #124]	@ (80006d0 <sendCANData+0x90>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	0c1b      	lsrs	r3, r3, #16
 8000656:	b2db      	uxtb	r3, r3
 8000658:	727b      	strb	r3, [r7, #9]
    TxData[2] = (rpm >> 8) & 0xFF;
 800065a:	4b1d      	ldr	r3, [pc, #116]	@ (80006d0 <sendCANData+0x90>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	0a1b      	lsrs	r3, r3, #8
 8000660:	b2db      	uxtb	r3, r3
 8000662:	72bb      	strb	r3, [r7, #10]
    TxData[3] = rpm & 0xFF;
 8000664:	4b1a      	ldr	r3, [pc, #104]	@ (80006d0 <sendCANData+0x90>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	72fb      	strb	r3, [r7, #11]

    // Prepare speed data (4 bytes)
    TxData[4] = (newSpeed >> 24) & 0xFF;
 800066c:	4b19      	ldr	r3, [pc, #100]	@ (80006d4 <sendCANData+0x94>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	0e1b      	lsrs	r3, r3, #24
 8000672:	b2db      	uxtb	r3, r3
 8000674:	733b      	strb	r3, [r7, #12]
    TxData[5] = (newSpeed >> 16) & 0xFF;
 8000676:	4b17      	ldr	r3, [pc, #92]	@ (80006d4 <sendCANData+0x94>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	0c1b      	lsrs	r3, r3, #16
 800067c:	b2db      	uxtb	r3, r3
 800067e:	737b      	strb	r3, [r7, #13]
    TxData[6] = (newSpeed >> 8) & 0xFF;
 8000680:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <sendCANData+0x94>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	0a1b      	lsrs	r3, r3, #8
 8000686:	b2db      	uxtb	r3, r3
 8000688:	73bb      	strb	r3, [r7, #14]
    TxData[7] = newSpeed & 0xFF;
 800068a:	4b12      	ldr	r3, [pc, #72]	@ (80006d4 <sendCANData+0x94>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	b2db      	uxtb	r3, r3
 8000690:	73fb      	strb	r3, [r7, #15]

    TxHeader.StdId = 0x123;       // Standard identifier
 8000692:	f240 1323 	movw	r3, #291	@ 0x123
 8000696:	613b      	str	r3, [r7, #16]
    TxHeader.ExtId = 0x00;        // No extended identifier
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
    TxHeader.RTR = CAN_RTR_DATA;  // Data frame
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
    TxHeader.IDE = CAN_ID_STD;    // Standard ID
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]
    TxHeader.DLC = 8;             // Data length code (8 bytes)
 80006a4:	2308      	movs	r3, #8
 80006a6:	623b      	str	r3, [r7, #32]
    TxHeader.TransmitGlobalTime = DISABLE;
 80006a8:	2300      	movs	r3, #0
 80006aa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	f107 0208 	add.w	r2, r7, #8
 80006b4:	f107 0110 	add.w	r1, r7, #16
 80006b8:	4807      	ldr	r0, [pc, #28]	@ (80006d8 <sendCANData+0x98>)
 80006ba:	f001 fbcd 	bl	8001e58 <HAL_CAN_AddTxMessage>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <sendCANData+0x88>
        Error_Handler();
 80006c4:	f000 fb6c 	bl	8000da0 <Error_Handler>
    }
}
 80006c8:	bf00      	nop
 80006ca:	3728      	adds	r7, #40	@ 0x28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	200007cc 	.word	0x200007cc
 80006d4:	200007d4 	.word	0x200007d4
 80006d8:	20000738 	.word	0x20000738

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b5b0      	push	{r4, r5, r7, lr}
 80006de:	b0ac      	sub	sp, #176	@ 0xb0
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e2:	f000 fd07 	bl	80010f4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e6:	f000 f8a3 	bl	8000830 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ea:	f000 f9e5 	bl	8000ab8 <MX_GPIO_Init>
  MX_CAN1_Init();
 80006ee:	f000 f95b 	bl	80009a8 <MX_CAN1_Init>
  MX_ADC1_Init();
 80006f2:	f000 f907 	bl	8000904 <MX_ADC1_Init>
  MX_TIM2_Init();
 80006f6:	f000 f98d 	bl	8000a14 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Initialize CAN filter (accept all messages)
  CAN_FilterTypeDef can_filter = {
 80006fa:	4b40      	ldr	r3, [pc, #256]	@ (80007fc <main+0x120>)
 80006fc:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8000700:	461d      	mov	r5, r3
 8000702:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000704:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000706:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800070e:	e884 0003 	stmia.w	r4, {r0, r1}
      .FilterMaskIdLow = 0x0000,
      .FilterFIFOAssignment = CAN_RX_FIFO0,
      .FilterActivation = ENABLE,
      .SlaveStartFilterBank = 14
  };
  HAL_CAN_ConfigFilter(&hcan1, &can_filter);
 8000712:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000716:	4619      	mov	r1, r3
 8000718:	4839      	ldr	r0, [pc, #228]	@ (8000800 <main+0x124>)
 800071a:	f001 fa79 	bl	8001c10 <HAL_CAN_ConfigFilter>

  // Start CAN
  HAL_CAN_Start(&hcan1);
 800071e:	4838      	ldr	r0, [pc, #224]	@ (8000800 <main+0x124>)
 8000720:	f001 fb56 	bl	8001dd0 <HAL_CAN_Start>
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  osMutexDef(rpmMutex);
 8000724:	2300      	movs	r3, #0
 8000726:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800072a:	2300      	movs	r3, #0
 800072c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  rpmMutexHandle = osMutexCreate(osMutex(rpmMutex));
 8000730:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000734:	4618      	mov	r0, r3
 8000736:	f003 fc26 	bl	8003f86 <osMutexCreate>
 800073a:	4603      	mov	r3, r0
 800073c:	4a31      	ldr	r2, [pc, #196]	@ (8000804 <main+0x128>)
 800073e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  osMessageQDef(tempQueue, TEMP_QUEUE_SIZE, TempData_t);
 8000740:	4b31      	ldr	r3, [pc, #196]	@ (8000808 <main+0x12c>)
 8000742:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8000746:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000748:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  tempQueueHandle = osMessageCreate(osMessageQ(tempQueue), NULL);
 800074c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f003 fcb4 	bl	80040c0 <osMessageCreate>
 8000758:	4603      	mov	r3, r0
 800075a:	4a2c      	ldr	r2, [pc, #176]	@ (800080c <main+0x130>)
 800075c:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of DefaultTask */
  osThreadDef(DefaultTask, StartTask, osPriorityIdle, 0, 128);
 800075e:	4b2c      	ldr	r3, [pc, #176]	@ (8000810 <main+0x134>)
 8000760:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000764:	461d      	mov	r5, r3
 8000766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800076a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800076e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DefaultTaskHandle = osThreadCreate(osThread(DefaultTask), NULL);
 8000772:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f003 fba4 	bl	8003ec6 <osThreadCreate>
 800077e:	4603      	mov	r3, r0
 8000780:	4a24      	ldr	r2, [pc, #144]	@ (8000814 <main+0x138>)
 8000782:	6013      	str	r3, [r2, #0]

  /* definition and creation of adcTask */
  osThreadDef(adcTask, StartADCTask, osPriorityAboveNormal, 0, 256);
 8000784:	4b24      	ldr	r3, [pc, #144]	@ (8000818 <main+0x13c>)
 8000786:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800078a:	461d      	mov	r5, r3
 800078c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800078e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000790:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000794:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adcTaskHandle = osThreadCreate(osThread(adcTask), NULL);
 8000798:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f003 fb91 	bl	8003ec6 <osThreadCreate>
 80007a4:	4603      	mov	r3, r0
 80007a6:	4a1d      	ldr	r2, [pc, #116]	@ (800081c <main+0x140>)
 80007a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of canTask */
  osThreadDef(canTask, StartCANTask, osPriorityNormal, 0, 256);
 80007aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000820 <main+0x144>)
 80007ac:	f107 041c 	add.w	r4, r7, #28
 80007b0:	461d      	mov	r5, r3
 80007b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canTaskHandle = osThreadCreate(osThread(canTask), NULL);
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f003 fb7e 	bl	8003ec6 <osThreadCreate>
 80007ca:	4603      	mov	r3, r0
 80007cc:	4a15      	ldr	r2, [pc, #84]	@ (8000824 <main+0x148>)
 80007ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of Engine_RPM_S */
  osThreadDef(Engine_RPM_S, StartEngineTask, osPriorityHigh, 0, 256);
 80007d0:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <main+0x14c>)
 80007d2:	463c      	mov	r4, r7
 80007d4:	461d      	mov	r5, r3
 80007d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Engine_RPM_SHandle = osThreadCreate(osThread(Engine_RPM_S), NULL);
 80007e2:	463b      	mov	r3, r7
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f003 fb6d 	bl	8003ec6 <osThreadCreate>
 80007ec:	4603      	mov	r3, r0
 80007ee:	4a0f      	ldr	r2, [pc, #60]	@ (800082c <main+0x150>)
 80007f0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007f2:	f003 fb51 	bl	8003e98 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
 80007f6:	bf00      	nop
 80007f8:	e7fd      	b.n	80007f6 <main+0x11a>
 80007fa:	bf00      	nop
 80007fc:	08007384 	.word	0x08007384
 8000800:	20000738 	.word	0x20000738
 8000804:	200007b8 	.word	0x200007b8
 8000808:	080073ac 	.word	0x080073ac
 800080c:	200007bc 	.word	0x200007bc
 8000810:	080073c8 	.word	0x080073c8
 8000814:	200007a8 	.word	0x200007a8
 8000818:	080073ec 	.word	0x080073ec
 800081c:	200007ac 	.word	0x200007ac
 8000820:	08007410 	.word	0x08007410
 8000824:	200007b0 	.word	0x200007b0
 8000828:	0800743c 	.word	0x0800743c
 800082c:	200007b4 	.word	0x200007b4

08000830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b094      	sub	sp, #80	@ 0x50
 8000834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000836:	f107 0320 	add.w	r3, r7, #32
 800083a:	2230      	movs	r2, #48	@ 0x30
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f006 fd5a 	bl	80072f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	4b28      	ldr	r3, [pc, #160]	@ (80008fc <SystemClock_Config+0xcc>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085c:	4a27      	ldr	r2, [pc, #156]	@ (80008fc <SystemClock_Config+0xcc>)
 800085e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000862:	6413      	str	r3, [r2, #64]	@ 0x40
 8000864:	4b25      	ldr	r3, [pc, #148]	@ (80008fc <SystemClock_Config+0xcc>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000870:	2300      	movs	r3, #0
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	4b22      	ldr	r3, [pc, #136]	@ (8000900 <SystemClock_Config+0xd0>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a21      	ldr	r2, [pc, #132]	@ (8000900 <SystemClock_Config+0xd0>)
 800087a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800087e:	6013      	str	r3, [r2, #0]
 8000880:	4b1f      	ldr	r3, [pc, #124]	@ (8000900 <SystemClock_Config+0xd0>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800088c:	2301      	movs	r3, #1
 800088e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000890:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000896:	2302      	movs	r3, #2
 8000898:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800089e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008a0:	2308      	movs	r3, #8
 80008a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80008a4:	23c0      	movs	r3, #192	@ 0xc0
 80008a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008ac:	2304      	movs	r3, #4
 80008ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b0:	f107 0320 	add.w	r3, r7, #32
 80008b4:	4618      	mov	r0, r3
 80008b6:	f002 f89f 	bl	80029f8 <HAL_RCC_OscConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008c0:	f000 fa6e 	bl	8000da0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c4:	230f      	movs	r3, #15
 80008c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c8:	2302      	movs	r3, #2
 80008ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008d0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	2103      	movs	r1, #3
 80008e2:	4618      	mov	r0, r3
 80008e4:	f002 fb00 	bl	8002ee8 <HAL_RCC_ClockConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008ee:	f000 fa57 	bl	8000da0 <Error_Handler>
  }
}
 80008f2:	bf00      	nop
 80008f4:	3750      	adds	r7, #80	@ 0x50
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	40007000 	.word	0x40007000

08000904 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800090a:	463b      	mov	r3, r7
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000916:	4b21      	ldr	r3, [pc, #132]	@ (800099c <MX_ADC1_Init+0x98>)
 8000918:	4a21      	ldr	r2, [pc, #132]	@ (80009a0 <MX_ADC1_Init+0x9c>)
 800091a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800091c:	4b1f      	ldr	r3, [pc, #124]	@ (800099c <MX_ADC1_Init+0x98>)
 800091e:	2200      	movs	r2, #0
 8000920:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000922:	4b1e      	ldr	r3, [pc, #120]	@ (800099c <MX_ADC1_Init+0x98>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000928:	4b1c      	ldr	r3, [pc, #112]	@ (800099c <MX_ADC1_Init+0x98>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800092e:	4b1b      	ldr	r3, [pc, #108]	@ (800099c <MX_ADC1_Init+0x98>)
 8000930:	2200      	movs	r2, #0
 8000932:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000934:	4b19      	ldr	r3, [pc, #100]	@ (800099c <MX_ADC1_Init+0x98>)
 8000936:	2200      	movs	r2, #0
 8000938:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800093c:	4b17      	ldr	r3, [pc, #92]	@ (800099c <MX_ADC1_Init+0x98>)
 800093e:	2200      	movs	r2, #0
 8000940:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000942:	4b16      	ldr	r3, [pc, #88]	@ (800099c <MX_ADC1_Init+0x98>)
 8000944:	4a17      	ldr	r2, [pc, #92]	@ (80009a4 <MX_ADC1_Init+0xa0>)
 8000946:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000948:	4b14      	ldr	r3, [pc, #80]	@ (800099c <MX_ADC1_Init+0x98>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800094e:	4b13      	ldr	r3, [pc, #76]	@ (800099c <MX_ADC1_Init+0x98>)
 8000950:	2201      	movs	r2, #1
 8000952:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000954:	4b11      	ldr	r3, [pc, #68]	@ (800099c <MX_ADC1_Init+0x98>)
 8000956:	2200      	movs	r2, #0
 8000958:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800095c:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <MX_ADC1_Init+0x98>)
 800095e:	2201      	movs	r2, #1
 8000960:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000962:	480e      	ldr	r0, [pc, #56]	@ (800099c <MX_ADC1_Init+0x98>)
 8000964:	f000 fc38 	bl	80011d8 <HAL_ADC_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800096e:	f000 fa17 	bl	8000da0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000972:	2301      	movs	r3, #1
 8000974:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000976:	2301      	movs	r3, #1
 8000978:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800097e:	463b      	mov	r3, r7
 8000980:	4619      	mov	r1, r3
 8000982:	4806      	ldr	r0, [pc, #24]	@ (800099c <MX_ADC1_Init+0x98>)
 8000984:	f000 fe20 	bl	80015c8 <HAL_ADC_ConfigChannel>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800098e:	f000 fa07 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200006d4 	.word	0x200006d4
 80009a0:	40012000 	.word	0x40012000
 80009a4:	0f000001 	.word	0x0f000001

080009a8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_Init 0 */
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */
  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009ac:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <MX_CAN1_Init+0x64>)
 80009ae:	4a18      	ldr	r2, [pc, #96]	@ (8000a10 <MX_CAN1_Init+0x68>)
 80009b0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80009b2:	4b16      	ldr	r3, [pc, #88]	@ (8000a0c <MX_CAN1_Init+0x64>)
 80009b4:	2203      	movs	r2, #3
 80009b6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009b8:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <MX_CAN1_Init+0x64>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009be:	4b13      	ldr	r3, [pc, #76]	@ (8000a0c <MX_CAN1_Init+0x64>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80009c4:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <MX_CAN1_Init+0x64>)
 80009c6:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80009ca:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <MX_CAN1_Init+0x64>)
 80009ce:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80009d2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009d4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <MX_CAN1_Init+0x64>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80009da:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <MX_CAN1_Init+0x64>)
 80009dc:	2200      	movs	r2, #0
 80009de:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009e0:	4b0a      	ldr	r3, [pc, #40]	@ (8000a0c <MX_CAN1_Init+0x64>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009e6:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <MX_CAN1_Init+0x64>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009ec:	4b07      	ldr	r3, [pc, #28]	@ (8000a0c <MX_CAN1_Init+0x64>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009f2:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <MX_CAN1_Init+0x64>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009f8:	4804      	ldr	r0, [pc, #16]	@ (8000a0c <MX_CAN1_Init+0x64>)
 80009fa:	f001 f80d 	bl	8001a18 <HAL_CAN_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000a04:	f000 f9cc 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  /* USER CODE END CAN1_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000738 	.word	0x20000738
 8000a10:	40006400 	.word	0x40006400

08000a14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a1a:	f107 0310 	add.w	r3, r7, #16
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a24:	463b      	mov	r3, r7
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a30:	4b20      	ldr	r3, [pc, #128]	@ (8000ab4 <MX_TIM2_Init+0xa0>)
 8000a32:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8000a38:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab4 <MX_TIM2_Init+0xa0>)
 8000a3a:	222f      	movs	r2, #47	@ 0x2f
 8000a3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab4 <MX_TIM2_Init+0xa0>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000a44:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab4 <MX_TIM2_Init+0xa0>)
 8000a46:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4c:	4b19      	ldr	r3, [pc, #100]	@ (8000ab4 <MX_TIM2_Init+0xa0>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a52:	4b18      	ldr	r3, [pc, #96]	@ (8000ab4 <MX_TIM2_Init+0xa0>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000a58:	4816      	ldr	r0, [pc, #88]	@ (8000ab4 <MX_TIM2_Init+0xa0>)
 8000a5a:	f002 fc31 	bl	80032c0 <HAL_TIM_IC_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a64:	f000 f99c 	bl	8000da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000a68:	2310      	movs	r3, #16
 8000a6a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a70:	f107 0310 	add.w	r3, r7, #16
 8000a74:	4619      	mov	r1, r3
 8000a76:	480f      	ldr	r0, [pc, #60]	@ (8000ab4 <MX_TIM2_Init+0xa0>)
 8000a78:	f003 f954 	bl	8003d24 <HAL_TIMEx_MasterConfigSynchronization>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a82:	f000 f98d 	bl	8000da0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a96:	463b      	mov	r3, r7
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4805      	ldr	r0, [pc, #20]	@ (8000ab4 <MX_TIM2_Init+0xa0>)
 8000a9e:	f002 fe77 	bl	8003790 <HAL_TIM_IC_ConfigChannel>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000aa8:	f000 f97a 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	3718      	adds	r7, #24
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000760 	.word	0x20000760

08000ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	@ 0x28
 8000abc:	af00      	add	r7, sp, #0
  //GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */
	// Add in MX_GPIO_Init():
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	4b32      	ldr	r3, [pc, #200]	@ (8000b8c <MX_GPIO_Init+0xd4>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	4a31      	ldr	r2, [pc, #196]	@ (8000b8c <MX_GPIO_Init+0xd4>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ace:	4b2f      	ldr	r3, [pc, #188]	@ (8000b8c <MX_GPIO_Init+0xd4>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]
	GPIO_InitTypeDef GPIO_InitStruct = {1};
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]
 8000aea:	2301      	movs	r3, #1
 8000aec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000aee:	2302      	movs	r3, #2
 8000af0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af2:	2303      	movs	r3, #3
 8000af4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	4823      	ldr	r0, [pc, #140]	@ (8000b90 <MX_GPIO_Init+0xd8>)
 8000b02:	f001 fdc5 	bl	8002690 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	4b20      	ldr	r3, [pc, #128]	@ (8000b8c <MX_GPIO_Init+0xd4>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	4a1f      	ldr	r2, [pc, #124]	@ (8000b8c <MX_GPIO_Init+0xd4>)
 8000b10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b16:	4b1d      	ldr	r3, [pc, #116]	@ (8000b8c <MX_GPIO_Init+0xd4>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	4b19      	ldr	r3, [pc, #100]	@ (8000b8c <MX_GPIO_Init+0xd4>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	4a18      	ldr	r2, [pc, #96]	@ (8000b8c <MX_GPIO_Init+0xd4>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b32:	4b16      	ldr	r3, [pc, #88]	@ (8000b8c <MX_GPIO_Init+0xd4>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	4b12      	ldr	r3, [pc, #72]	@ (8000b8c <MX_GPIO_Init+0xd4>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a11      	ldr	r2, [pc, #68]	@ (8000b8c <MX_GPIO_Init+0xd4>)
 8000b48:	f043 0302 	orr.w	r3, r3, #2
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <MX_GPIO_Init+0xd4>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b5e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4808      	ldr	r0, [pc, #32]	@ (8000b90 <MX_GPIO_Init+0xd8>)
 8000b70:	f001 fd8e 	bl	8002690 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2105      	movs	r1, #5
 8000b78:	2006      	movs	r0, #6
 8000b7a:	f001 fd52 	bl	8002622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b7e:	2006      	movs	r0, #6
 8000b80:	f001 fd6b 	bl	800265a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b84:	bf00      	nop
 8000b86:	3728      	adds	r7, #40	@ 0x28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020000 	.word	0x40020000

08000b94 <StartTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask */
void StartTask(void const * argument)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	  /* Initialize lastTime */
		    lastTime = HAL_GetTick();
 8000b9c:	f000 fb10 	bl	80011c0 <HAL_GetTick>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	4a07      	ldr	r2, [pc, #28]	@ (8000bc0 <StartTask+0x2c>)
 8000ba4:	6013      	str	r3, [r2, #0]

		    /* Start timer interrupt */
		    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4806      	ldr	r0, [pc, #24]	@ (8000bc4 <StartTask+0x30>)
 8000baa:	f002 fbd9 	bl	8003360 <HAL_TIM_IC_Start_IT>

		    /* Start CAN */
		    HAL_CAN_Start(&hcan1);
 8000bae:	4806      	ldr	r0, [pc, #24]	@ (8000bc8 <StartTask+0x34>)
 8000bb0:	f001 f90e 	bl	8001dd0 <HAL_CAN_Start>

		    /* Infinite loop */
		    for(;;) {
		        osDelay(1000);
 8000bb4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bb8:	f003 f9d1 	bl	8003f5e <osDelay>
 8000bbc:	e7fa      	b.n	8000bb4 <StartTask+0x20>
 8000bbe:	bf00      	nop
 8000bc0:	200007c8 	.word	0x200007c8
 8000bc4:	20000760 	.word	0x20000760
 8000bc8:	20000738 	.word	0x20000738

08000bcc <StartADCTask>:
}

/* USER CODE BEGIN Header_StartADCTask */
/* USER CODE END Header_StartADCTask */
void StartADCTask(void const * argument)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADCTask */
	// Constants (compile-time optimized)
	    const float vRef = 3.3f;               // Must match your actual VREF
 8000bd4:	4b40      	ldr	r3, [pc, #256]	@ (8000cd8 <StartADCTask+0x10c>)
 8000bd6:	613b      	str	r3, [r7, #16]
	    const float scaleFactor = vRef * 100.0f / 4095.0f;
 8000bd8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bdc:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8000cdc <StartADCTask+0x110>
 8000be0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000be4:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8000ce0 <StartADCTask+0x114>
 8000be8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bec:	edc7 7a03 	vstr	s15, [r7, #12]
	    static TempData_t tempData;
	    static uint32_t adcValue;
	    static uint32_t validReadings = 0;

	    // Initialize with dummy reads
	    for(uint8_t i=0; i<5; i++) {
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	75fb      	strb	r3, [r7, #23]
 8000bf4:	e00f      	b.n	8000c16 <StartADCTask+0x4a>
	        HAL_ADC_Start(&hadc1);
 8000bf6:	483b      	ldr	r0, [pc, #236]	@ (8000ce4 <StartADCTask+0x118>)
 8000bf8:	f000 fb54 	bl	80012a4 <HAL_ADC_Start>
	        HAL_ADC_PollForConversion(&hadc1, 1);
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	4839      	ldr	r0, [pc, #228]	@ (8000ce4 <StartADCTask+0x118>)
 8000c00:	f000 fc22 	bl	8001448 <HAL_ADC_PollForConversion>
	        HAL_ADC_GetValue(&hadc1);
 8000c04:	4837      	ldr	r0, [pc, #220]	@ (8000ce4 <StartADCTask+0x118>)
 8000c06:	f000 fcaa 	bl	800155e <HAL_ADC_GetValue>
	        osDelay(10);
 8000c0a:	200a      	movs	r0, #10
 8000c0c:	f003 f9a7 	bl	8003f5e <osDelay>
	    for(uint8_t i=0; i<5; i++) {
 8000c10:	7dfb      	ldrb	r3, [r7, #23]
 8000c12:	3301      	adds	r3, #1
 8000c14:	75fb      	strb	r3, [r7, #23]
 8000c16:	7dfb      	ldrb	r3, [r7, #23]
 8000c18:	2b04      	cmp	r3, #4
 8000c1a:	d9ec      	bls.n	8000bf6 <StartADCTask+0x2a>
	    }

	    for(;;)
	    {
	        HAL_ADC_Start(&hadc1);
 8000c1c:	4831      	ldr	r0, [pc, #196]	@ (8000ce4 <StartADCTask+0x118>)
 8000c1e:	f000 fb41 	bl	80012a4 <HAL_ADC_Start>

	        if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8000c22:	210a      	movs	r1, #10
 8000c24:	482f      	ldr	r0, [pc, #188]	@ (8000ce4 <StartADCTask+0x118>)
 8000c26:	f000 fc0f 	bl	8001448 <HAL_ADC_PollForConversion>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d14e      	bne.n	8000cce <StartADCTask+0x102>
	        {
	            adcValue = HAL_ADC_GetValue(&hadc1);
 8000c30:	482c      	ldr	r0, [pc, #176]	@ (8000ce4 <StartADCTask+0x118>)
 8000c32:	f000 fc94 	bl	800155e <HAL_ADC_GetValue>
 8000c36:	4603      	mov	r3, r0
 8000c38:	4a2b      	ldr	r2, [pc, #172]	@ (8000ce8 <StartADCTask+0x11c>)
 8000c3a:	6013      	str	r3, [r2, #0]

	            /* Robust validation checks */
	            if(adcValue < 10) {  // Minimum expected raw value (~0.08V = 8Â°C)
 8000c3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce8 <StartADCTask+0x11c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b09      	cmp	r3, #9
 8000c42:	d804      	bhi.n	8000c4e <StartADCTask+0x82>
	                tempData.temperature = 0.0f;  // Treat as disconnected
 8000c44:	4b29      	ldr	r3, [pc, #164]	@ (8000cec <StartADCTask+0x120>)
 8000c46:	f04f 0200 	mov.w	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	e023      	b.n	8000c96 <StartADCTask+0xca>
	            }
	            else {
	                // Only consider stable readings
	                float newTemp = adcValue * scaleFactor;
 8000c4e:	4b26      	ldr	r3, [pc, #152]	@ (8000ce8 <StartADCTask+0x11c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	ee07 3a90 	vmov	s15, r3
 8000c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c62:	edc7 7a02 	vstr	s15, [r7, #8]

	                // Validate plausible temperature range
	                if(newTemp >= 0.0f && newTemp <= 150.0f) {
 8000c66:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c72:	db10      	blt.n	8000c96 <StartADCTask+0xca>
 8000c74:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c78:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000cf0 <StartADCTask+0x124>
 8000c7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c84:	d807      	bhi.n	8000c96 <StartADCTask+0xca>
	                    tempData.temperature = newTemp;
 8000c86:	4a19      	ldr	r2, [pc, #100]	@ (8000cec <StartADCTask+0x120>)
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	6013      	str	r3, [r2, #0]
	                    validReadings++;
 8000c8c:	4b19      	ldr	r3, [pc, #100]	@ (8000cf4 <StartADCTask+0x128>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	3301      	adds	r3, #1
 8000c92:	4a18      	ldr	r2, [pc, #96]	@ (8000cf4 <StartADCTask+0x128>)
 8000c94:	6013      	str	r3, [r2, #0]
	                }
	            }
	            temp=tempData.temperature;
 8000c96:	4b15      	ldr	r3, [pc, #84]	@ (8000cec <StartADCTask+0x120>)
 8000c98:	edd3 7a00 	vldr	s15, [r3]
 8000c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ca0:	ee17 2a90 	vmov	r2, s15
 8000ca4:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <StartADCTask+0x12c>)
 8000ca6:	601a      	str	r2, [r3, #0]

	            // Only send data after 5 valid readings
	            if(validReadings > 5) {
 8000ca8:	4b12      	ldr	r3, [pc, #72]	@ (8000cf4 <StartADCTask+0x128>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b05      	cmp	r3, #5
 8000cae:	d90b      	bls.n	8000cc8 <StartADCTask+0xfc>
	                tempData.timestamp = osKernelSysTick();
 8000cb0:	f003 f8f9 	bl	8003ea6 <osKernelSysTick>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	4a0d      	ldr	r2, [pc, #52]	@ (8000cec <StartADCTask+0x120>)
 8000cb8:	6053      	str	r3, [r2, #4]
	                osMessagePut(tempQueueHandle, (uint32_t)&tempData, 0);
 8000cba:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <StartADCTask+0x130>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	490b      	ldr	r1, [pc, #44]	@ (8000cec <StartADCTask+0x120>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f003 fa24 	bl	8004110 <osMessagePut>
	            }

	            HAL_ADC_Start(&hadc1);  // Restart immediately
 8000cc8:	4806      	ldr	r0, [pc, #24]	@ (8000ce4 <StartADCTask+0x118>)
 8000cca:	f000 faeb 	bl	80012a4 <HAL_ADC_Start>
	        }
	        osDelay(200);  // 5Hz update rate
 8000cce:	20c8      	movs	r0, #200	@ 0xc8
 8000cd0:	f003 f945 	bl	8003f5e <osDelay>
	        HAL_ADC_Start(&hadc1);
 8000cd4:	e7a2      	b.n	8000c1c <StartADCTask+0x50>
 8000cd6:	bf00      	nop
 8000cd8:	40533333 	.word	0x40533333
 8000cdc:	42c80000 	.word	0x42c80000
 8000ce0:	457ff000 	.word	0x457ff000
 8000ce4:	200006d4 	.word	0x200006d4
 8000ce8:	200007d8 	.word	0x200007d8
 8000cec:	200007dc 	.word	0x200007dc
 8000cf0:	43160000 	.word	0x43160000
 8000cf4:	200007e4 	.word	0x200007e4
 8000cf8:	200007c0 	.word	0x200007c0
 8000cfc:	200007bc 	.word	0x200007bc

08000d00 <StartCANTask>:
}

/* USER CODE BEGIN Header_StartCANTask */
/* USER CODE END Header_StartCANTask */
void StartCANTask(void const * argument)
{
 8000d00:	b5b0      	push	{r4, r5, r7, lr}
 8000d02:	b090      	sub	sp, #64	@ 0x40
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCANTask */
	osEvent event;
	    TempData_t *tempData;
	    CAN_TxHeaderTypeDef txHeader = {
 8000d08:	4b15      	ldr	r3, [pc, #84]	@ (8000d60 <StartCANTask+0x60>)
 8000d0a:	f107 0418 	add.w	r4, r7, #24
 8000d0e:	461d      	mov	r5, r3
 8000d10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d14:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d18:	e884 0003 	stmia.w	r4, {r0, r1}
	    uint8_t canData[8];
	    uint32_t txMailbox;

	    for(;;) {
	        // Wait for temperature data
	        event = osMessageGet(tempQueueHandle, osWaitForever);
 8000d1c:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <StartCANTask+0x64>)
 8000d1e:	6819      	ldr	r1, [r3, #0]
 8000d20:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f003 fa31 	bl	8004190 <osMessageGet>

	        if (event.status == osEventMessage) {
 8000d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d30:	2b10      	cmp	r3, #16
 8000d32:	d1f3      	bne.n	8000d1c <StartCANTask+0x1c>
	            tempData = (TempData_t *)event.value.p;
 8000d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d36:	63fb      	str	r3, [r7, #60]	@ 0x3c

	            // Prepare CAN data (float temperature + timestamp)
	            memcpy(canData, &tempData->temperature, sizeof(float));
 8000d38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	613b      	str	r3, [r7, #16]
	            memcpy(canData + 4, &tempData->timestamp, sizeof(uint32_t));
 8000d3e:	f107 0310 	add.w	r3, r7, #16
 8000d42:	3304      	adds	r3, #4
 8000d44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d46:	3204      	adds	r2, #4
 8000d48:	6812      	ldr	r2, [r2, #0]
 8000d4a:	601a      	str	r2, [r3, #0]

	            // Send CAN message
	            if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, canData, &txMailbox) != HAL_OK) {
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	f107 0210 	add.w	r2, r7, #16
 8000d54:	f107 0118 	add.w	r1, r7, #24
 8000d58:	4803      	ldr	r0, [pc, #12]	@ (8000d68 <StartCANTask+0x68>)
 8000d5a:	f001 f87d 	bl	8001e58 <HAL_CAN_AddTxMessage>
	        event = osMessageGet(tempQueueHandle, osWaitForever);
 8000d5e:	e7dd      	b.n	8000d1c <StartCANTask+0x1c>
 8000d60:	08007458 	.word	0x08007458
 8000d64:	200007bc 	.word	0x200007bc
 8000d68:	20000738 	.word	0x20000738

08000d6c <StartEngineTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartEngineTask */
void StartEngineTask(void const * argument)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEngineTask */
	/* Infinite loop */
		    for(;;) {
		        osMutexWait(rpmMutexHandle, osWaitForever);
 8000d74:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <StartEngineTask+0x30>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f003 f91b 	bl	8003fb8 <osMutexWait>
		        calculateRPM();
 8000d82:	f7ff fc05 	bl	8000590 <calculateRPM>
		        osMutexRelease(rpmMutexHandle);
 8000d86:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <StartEngineTask+0x30>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f003 f962 	bl	8004054 <osMutexRelease>

		        osDelay(100); // 100ms delay for RPM calculation
 8000d90:	2064      	movs	r0, #100	@ 0x64
 8000d92:	f003 f8e4 	bl	8003f5e <osDelay>
		        osMutexWait(rpmMutexHandle, osWaitForever);
 8000d96:	bf00      	nop
 8000d98:	e7ec      	b.n	8000d74 <StartEngineTask+0x8>
 8000d9a:	bf00      	nop
 8000d9c:	200007b8 	.word	0x200007b8

08000da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
	...

08000db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <HAL_MspInit+0x54>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dbe:	4a11      	ldr	r2, [pc, #68]	@ (8000e04 <HAL_MspInit+0x54>)
 8000dc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e04 <HAL_MspInit+0x54>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	603b      	str	r3, [r7, #0]
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e04 <HAL_MspInit+0x54>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dda:	4a0a      	ldr	r2, [pc, #40]	@ (8000e04 <HAL_MspInit+0x54>)
 8000ddc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de2:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <HAL_MspInit+0x54>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	210f      	movs	r1, #15
 8000df2:	f06f 0001 	mvn.w	r0, #1
 8000df6:	f001 fc14 	bl	8002622 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800

08000e08 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	@ 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a17      	ldr	r2, [pc, #92]	@ (8000e84 <HAL_ADC_MspInit+0x7c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d127      	bne.n	8000e7a <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	4b16      	ldr	r3, [pc, #88]	@ (8000e88 <HAL_ADC_MspInit+0x80>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e32:	4a15      	ldr	r2, [pc, #84]	@ (8000e88 <HAL_ADC_MspInit+0x80>)
 8000e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e3a:	4b13      	ldr	r3, [pc, #76]	@ (8000e88 <HAL_ADC_MspInit+0x80>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <HAL_ADC_MspInit+0x80>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e88 <HAL_ADC_MspInit+0x80>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e56:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <HAL_ADC_MspInit+0x80>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e62:	2302      	movs	r3, #2
 8000e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e66:	2303      	movs	r3, #3
 8000e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	4805      	ldr	r0, [pc, #20]	@ (8000e8c <HAL_ADC_MspInit+0x84>)
 8000e76:	f001 fc0b 	bl	8002690 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e7a:	bf00      	nop
 8000e7c:	3728      	adds	r7, #40	@ 0x28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40012000 	.word	0x40012000
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020000 	.word	0x40020000

08000e90 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	@ 0x28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a21      	ldr	r2, [pc, #132]	@ (8000f34 <HAL_CAN_MspInit+0xa4>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d13c      	bne.n	8000f2c <HAL_CAN_MspInit+0x9c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	4b20      	ldr	r3, [pc, #128]	@ (8000f38 <HAL_CAN_MspInit+0xa8>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eba:	4a1f      	ldr	r2, [pc, #124]	@ (8000f38 <HAL_CAN_MspInit+0xa8>)
 8000ebc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ec0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f38 <HAL_CAN_MspInit+0xa8>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	4b19      	ldr	r3, [pc, #100]	@ (8000f38 <HAL_CAN_MspInit+0xa8>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	4a18      	ldr	r2, [pc, #96]	@ (8000f38 <HAL_CAN_MspInit+0xa8>)
 8000ed8:	f043 0302 	orr.w	r3, r3, #2
 8000edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ede:	4b16      	ldr	r3, [pc, #88]	@ (8000f38 <HAL_CAN_MspInit+0xa8>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000eea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000efc:	2309      	movs	r3, #9
 8000efe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	480d      	ldr	r0, [pc, #52]	@ (8000f3c <HAL_CAN_MspInit+0xac>)
 8000f08:	f001 fbc2 	bl	8002690 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2105      	movs	r1, #5
 8000f10:	2013      	movs	r0, #19
 8000f12:	f001 fb86 	bl	8002622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000f16:	2013      	movs	r0, #19
 8000f18:	f001 fb9f 	bl	800265a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2105      	movs	r1, #5
 8000f20:	2014      	movs	r0, #20
 8000f22:	f001 fb7e 	bl	8002622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f26:	2014      	movs	r0, #20
 8000f28:	f001 fb97 	bl	800265a <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000f2c:	bf00      	nop
 8000f2e:	3728      	adds	r7, #40	@ 0x28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40006400 	.word	0x40006400
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40020400 	.word	0x40020400

08000f40 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	@ 0x28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f60:	d133      	bne.n	8000fca <HAL_TIM_IC_MspInit+0x8a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd4 <HAL_TIM_IC_MspInit+0x94>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6a:	4a1a      	ldr	r2, [pc, #104]	@ (8000fd4 <HAL_TIM_IC_MspInit+0x94>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f72:	4b18      	ldr	r3, [pc, #96]	@ (8000fd4 <HAL_TIM_IC_MspInit+0x94>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <HAL_TIM_IC_MspInit+0x94>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	4a13      	ldr	r2, [pc, #76]	@ (8000fd4 <HAL_TIM_IC_MspInit+0x94>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8e:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <HAL_TIM_IC_MspInit+0x94>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f9a:	2320      	movs	r3, #32
 8000f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000faa:	2301      	movs	r3, #1
 8000fac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4808      	ldr	r0, [pc, #32]	@ (8000fd8 <HAL_TIM_IC_MspInit+0x98>)
 8000fb6:	f001 fb6b 	bl	8002690 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2105      	movs	r1, #5
 8000fbe:	201c      	movs	r0, #28
 8000fc0:	f001 fb2f 	bl	8002622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fc4:	201c      	movs	r0, #28
 8000fc6:	f001 fb48 	bl	800265a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000fca:	bf00      	nop
 8000fcc:	3728      	adds	r7, #40	@ 0x28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020000 	.word	0x40020000

08000fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fee:	bf00      	nop
 8000ff0:	e7fd      	b.n	8000fee <HardFault_Handler+0x4>

08000ff2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff6:	bf00      	nop
 8000ff8:	e7fd      	b.n	8000ff6 <MemManage_Handler+0x4>

08000ffa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffe:	bf00      	nop
 8001000:	e7fd      	b.n	8000ffe <BusFault_Handler+0x4>

08001002 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001006:	bf00      	nop
 8001008:	e7fd      	b.n	8001006 <UsageFault_Handler+0x4>

0800100a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800101c:	f000 f8bc 	bl	8001198 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001020:	f004 ffc2 	bl	8005fa8 <xTaskGetSchedulerState>
 8001024:	4603      	mov	r3, r0
 8001026:	2b01      	cmp	r3, #1
 8001028:	d001      	beq.n	800102e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800102a:	f005 fee5 	bl	8006df8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}

08001032 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001036:	2001      	movs	r0, #1
 8001038:	f001 fcc6 	bl	80029c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}

08001040 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */
  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001044:	4802      	ldr	r0, [pc, #8]	@ (8001050 <CAN1_TX_IRQHandler+0x10>)
 8001046:	f000 ffd7 	bl	8001ff8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */
  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000738 	.word	0x20000738

08001054 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001058:	4802      	ldr	r0, [pc, #8]	@ (8001064 <CAN1_RX0_IRQHandler+0x10>)
 800105a:	f000 ffcd 	bl	8001ff8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000738 	.word	0x20000738

08001068 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800106c:	4802      	ldr	r0, [pc, #8]	@ (8001078 <TIM2_IRQHandler+0x10>)
 800106e:	f002 fa9f 	bl	80035b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000760 	.word	0x20000760

0800107c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001080:	4b06      	ldr	r3, [pc, #24]	@ (800109c <SystemInit+0x20>)
 8001082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001086:	4a05      	ldr	r2, [pc, #20]	@ (800109c <SystemInit+0x20>)
 8001088:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800108c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010a4:	f7ff ffea 	bl	800107c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a8:	480c      	ldr	r0, [pc, #48]	@ (80010dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010aa:	490d      	ldr	r1, [pc, #52]	@ (80010e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010ac:	4a0d      	ldr	r2, [pc, #52]	@ (80010e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b0:	e002      	b.n	80010b8 <LoopCopyDataInit>

080010b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b6:	3304      	adds	r3, #4

080010b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010bc:	d3f9      	bcc.n	80010b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010be:	4a0a      	ldr	r2, [pc, #40]	@ (80010e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010c0:	4c0a      	ldr	r4, [pc, #40]	@ (80010ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c4:	e001      	b.n	80010ca <LoopFillZerobss>

080010c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c8:	3204      	adds	r2, #4

080010ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010cc:	d3fb      	bcc.n	80010c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ce:	f006 f91b 	bl	8007308 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010d2:	f7ff fb03 	bl	80006dc <main>
  bx  lr    
 80010d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80010e4:	080074a8 	.word	0x080074a8
  ldr r2, =_sbss
 80010e8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80010ec:	20008a7c 	.word	0x20008a7c

080010f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f0:	e7fe      	b.n	80010f0 <ADC_IRQHandler>
	...

080010f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <HAL_Init+0x40>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001134 <HAL_Init+0x40>)
 80010fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001102:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001104:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <HAL_Init+0x40>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a0a      	ldr	r2, [pc, #40]	@ (8001134 <HAL_Init+0x40>)
 800110a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800110e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001110:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <HAL_Init+0x40>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a07      	ldr	r2, [pc, #28]	@ (8001134 <HAL_Init+0x40>)
 8001116:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800111a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111c:	2003      	movs	r0, #3
 800111e:	f001 fa75 	bl	800260c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001122:	200f      	movs	r0, #15
 8001124:	f000 f808 	bl	8001138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001128:	f7ff fe42 	bl	8000db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023c00 	.word	0x40023c00

08001138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <HAL_InitTick+0x54>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <HAL_InitTick+0x58>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4619      	mov	r1, r3
 800114a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800114e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001152:	fbb2 f3f3 	udiv	r3, r2, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f001 fa8d 	bl	8002676 <HAL_SYSTICK_Config>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e00e      	b.n	8001184 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b0f      	cmp	r3, #15
 800116a:	d80a      	bhi.n	8001182 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800116c:	2200      	movs	r2, #0
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001174:	f001 fa55 	bl	8002622 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001178:	4a06      	ldr	r2, [pc, #24]	@ (8001194 <HAL_InitTick+0x5c>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	e000      	b.n	8001184 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000000 	.word	0x20000000
 8001190:	20000008 	.word	0x20000008
 8001194:	20000004 	.word	0x20000004

08001198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800119c:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <HAL_IncTick+0x20>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <HAL_IncTick+0x24>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	4a04      	ldr	r2, [pc, #16]	@ (80011bc <HAL_IncTick+0x24>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000008 	.word	0x20000008
 80011bc:	200007e8 	.word	0x200007e8

080011c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return uwTick;
 80011c4:	4b03      	ldr	r3, [pc, #12]	@ (80011d4 <HAL_GetTick+0x14>)
 80011c6:	681b      	ldr	r3, [r3, #0]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	200007e8 	.word	0x200007e8

080011d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011e0:	2300      	movs	r3, #0
 80011e2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e04a      	b.n	8001284 <HAL_ADC_Init+0xac>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d120      	bne.n	8001238 <HAL_ADC_Init+0x60>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a24      	ldr	r2, [pc, #144]	@ (800128c <HAL_ADC_Init+0xb4>)
 80011fa:	649a      	str	r2, [r3, #72]	@ 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a24      	ldr	r2, [pc, #144]	@ (8001290 <HAL_ADC_Init+0xb8>)
 8001200:	64da      	str	r2, [r3, #76]	@ 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a23      	ldr	r2, [pc, #140]	@ (8001294 <HAL_ADC_Init+0xbc>)
 8001206:	651a      	str	r2, [r3, #80]	@ 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a23      	ldr	r2, [pc, #140]	@ (8001298 <HAL_ADC_Init+0xc0>)
 800120c:	655a      	str	r2, [r3, #84]	@ 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a22      	ldr	r2, [pc, #136]	@ (800129c <HAL_ADC_Init+0xc4>)
 8001212:	659a      	str	r2, [r3, #88]	@ 0x58
    if (hadc->MspInitCallback == NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001218:	2b00      	cmp	r3, #0
 800121a:	d102      	bne.n	8001222 <HAL_ADC_Init+0x4a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a20      	ldr	r2, [pc, #128]	@ (80012a0 <HAL_ADC_Init+0xc8>)
 8001220:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123c:	f003 0310 	and.w	r3, r3, #16
 8001240:	2b00      	cmp	r3, #0
 8001242:	d118      	bne.n	8001276 <HAL_ADC_Init+0x9e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001248:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800124c:	f023 0302 	bic.w	r3, r3, #2
 8001250:	f043 0202 	orr.w	r2, r3, #2
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f000 fad7 	bl	800180c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001268:	f023 0303 	bic.w	r3, r3, #3
 800126c:	f043 0201 	orr.w	r2, r3, #1
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	641a      	str	r2, [r3, #64]	@ 0x40
 8001274:	e001      	b.n	800127a <HAL_ADC_Init+0xa2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001282:	7bfb      	ldrb	r3, [r7, #15]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	08001579 	.word	0x08001579
 8001290:	0800158d 	.word	0x0800158d
 8001294:	080015a1 	.word	0x080015a1
 8001298:	080015b5 	.word	0x080015b5
 800129c:	08001a05 	.word	0x08001a05
 80012a0:	08000e09 	.word	0x08000e09

080012a4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d101      	bne.n	80012be <HAL_ADC_Start+0x1a>
 80012ba:	2302      	movs	r3, #2
 80012bc:	e0b2      	b.n	8001424 <HAL_ADC_Start+0x180>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d018      	beq.n	8001306 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 0201 	orr.w	r2, r2, #1
 80012e2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012e4:	4b52      	ldr	r3, [pc, #328]	@ (8001430 <HAL_ADC_Start+0x18c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a52      	ldr	r2, [pc, #328]	@ (8001434 <HAL_ADC_Start+0x190>)
 80012ea:	fba2 2303 	umull	r2, r3, r2, r3
 80012ee:	0c9a      	lsrs	r2, r3, #18
 80012f0:	4613      	mov	r3, r2
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	4413      	add	r3, r2
 80012f6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80012f8:	e002      	b.n	8001300 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	3b01      	subs	r3, #1
 80012fe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f9      	bne.n	80012fa <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b01      	cmp	r3, #1
 8001312:	d17a      	bne.n	800140a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001318:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800131c:	f023 0301 	bic.w	r3, r3, #1
 8001320:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001332:	2b00      	cmp	r3, #0
 8001334:	d007      	beq.n	8001346 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800133e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800134e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001352:	d106      	bne.n	8001362 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001358:	f023 0206 	bic.w	r2, r3, #6
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001360:	e002      	b.n	8001368 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001370:	4b31      	ldr	r3, [pc, #196]	@ (8001438 <HAL_ADC_Start+0x194>)
 8001372:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800137c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 031f 	and.w	r3, r3, #31
 8001386:	2b00      	cmp	r3, #0
 8001388:	d12a      	bne.n	80013e0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a2b      	ldr	r2, [pc, #172]	@ (800143c <HAL_ADC_Start+0x198>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d015      	beq.n	80013c0 <HAL_ADC_Start+0x11c>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a29      	ldr	r2, [pc, #164]	@ (8001440 <HAL_ADC_Start+0x19c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d105      	bne.n	80013aa <HAL_ADC_Start+0x106>
 800139e:	4b26      	ldr	r3, [pc, #152]	@ (8001438 <HAL_ADC_Start+0x194>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 031f 	and.w	r3, r3, #31
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00a      	beq.n	80013c0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a25      	ldr	r2, [pc, #148]	@ (8001444 <HAL_ADC_Start+0x1a0>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d136      	bne.n	8001422 <HAL_ADC_Start+0x17e>
 80013b4:	4b20      	ldr	r3, [pc, #128]	@ (8001438 <HAL_ADC_Start+0x194>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0310 	and.w	r3, r3, #16
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d130      	bne.n	8001422 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d129      	bne.n	8001422 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	e020      	b.n	8001422 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a15      	ldr	r2, [pc, #84]	@ (800143c <HAL_ADC_Start+0x198>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d11b      	bne.n	8001422 <HAL_ADC_Start+0x17e>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d114      	bne.n	8001422 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	e00b      	b.n	8001422 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140e:	f043 0210 	orr.w	r2, r3, #16
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141a:	f043 0201 	orr.w	r2, r3, #1
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	20000000 	.word	0x20000000
 8001434:	431bde83 	.word	0x431bde83
 8001438:	40012300 	.word	0x40012300
 800143c:	40012000 	.word	0x40012000
 8001440:	40012100 	.word	0x40012100
 8001444:	40012200 	.word	0x40012200

08001448 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001460:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001464:	d113      	bne.n	800148e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001470:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001474:	d10b      	bne.n	800148e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	f043 0220 	orr.w	r2, r3, #32
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e063      	b.n	8001556 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800148e:	f7ff fe97 	bl	80011c0 <HAL_GetTick>
 8001492:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001494:	e021      	b.n	80014da <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800149c:	d01d      	beq.n	80014da <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d007      	beq.n	80014b4 <HAL_ADC_PollForConversion+0x6c>
 80014a4:	f7ff fe8c 	bl	80011c0 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d212      	bcs.n	80014da <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d00b      	beq.n	80014da <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c6:	f043 0204 	orr.w	r2, r3, #4
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e03d      	b.n	8001556 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d1d6      	bne.n	8001496 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f06f 0212 	mvn.w	r2, #18
 80014f0:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d123      	bne.n	8001554 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001510:	2b00      	cmp	r3, #0
 8001512:	d11f      	bne.n	8001554 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800151a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800151e:	2b00      	cmp	r3, #0
 8001520:	d006      	beq.n	8001530 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800152c:	2b00      	cmp	r3, #0
 800152e:	d111      	bne.n	8001554 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001534:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001540:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d105      	bne.n	8001554 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154c:	f043 0201 	orr.w	r2, r3, #1
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d101      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x1c>
 80015e0:	2302      	movs	r3, #2
 80015e2:	e105      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x228>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b09      	cmp	r3, #9
 80015f2:	d925      	bls.n	8001640 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68d9      	ldr	r1, [r3, #12]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	461a      	mov	r2, r3
 8001602:	4613      	mov	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	4413      	add	r3, r2
 8001608:	3b1e      	subs	r3, #30
 800160a:	2207      	movs	r2, #7
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43da      	mvns	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	400a      	ands	r2, r1
 8001618:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68d9      	ldr	r1, [r3, #12]
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	b29b      	uxth	r3, r3
 800162a:	4618      	mov	r0, r3
 800162c:	4603      	mov	r3, r0
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	4403      	add	r3, r0
 8001632:	3b1e      	subs	r3, #30
 8001634:	409a      	lsls	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	e022      	b.n	8001686 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6919      	ldr	r1, [r3, #16]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	b29b      	uxth	r3, r3
 800164c:	461a      	mov	r2, r3
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	2207      	movs	r2, #7
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	400a      	ands	r2, r1
 8001662:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6919      	ldr	r1, [r3, #16]
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	b29b      	uxth	r3, r3
 8001674:	4618      	mov	r0, r3
 8001676:	4603      	mov	r3, r0
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4403      	add	r3, r0
 800167c:	409a      	lsls	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b06      	cmp	r3, #6
 800168c:	d824      	bhi.n	80016d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	3b05      	subs	r3, #5
 80016a0:	221f      	movs	r2, #31
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43da      	mvns	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	400a      	ands	r2, r1
 80016ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	4618      	mov	r0, r3
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	3b05      	subs	r3, #5
 80016ca:	fa00 f203 	lsl.w	r2, r0, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80016d6:	e04c      	b.n	8001772 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b0c      	cmp	r3, #12
 80016de:	d824      	bhi.n	800172a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	3b23      	subs	r3, #35	@ 0x23
 80016f2:	221f      	movs	r2, #31
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43da      	mvns	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	400a      	ands	r2, r1
 8001700:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	b29b      	uxth	r3, r3
 800170e:	4618      	mov	r0, r3
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	3b23      	subs	r3, #35	@ 0x23
 800171c:	fa00 f203 	lsl.w	r2, r0, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	631a      	str	r2, [r3, #48]	@ 0x30
 8001728:	e023      	b.n	8001772 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	4613      	mov	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	3b41      	subs	r3, #65	@ 0x41
 800173c:	221f      	movs	r2, #31
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43da      	mvns	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	400a      	ands	r2, r1
 800174a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	4618      	mov	r0, r3
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	3b41      	subs	r3, #65	@ 0x41
 8001766:	fa00 f203 	lsl.w	r2, r0, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001772:	4b22      	ldr	r3, [pc, #136]	@ (80017fc <HAL_ADC_ConfigChannel+0x234>)
 8001774:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a21      	ldr	r2, [pc, #132]	@ (8001800 <HAL_ADC_ConfigChannel+0x238>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d109      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x1cc>
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b12      	cmp	r3, #18
 8001786:	d105      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a19      	ldr	r2, [pc, #100]	@ (8001800 <HAL_ADC_ConfigChannel+0x238>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d123      	bne.n	80017e6 <HAL_ADC_ConfigChannel+0x21e>
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b10      	cmp	r3, #16
 80017a4:	d003      	beq.n	80017ae <HAL_ADC_ConfigChannel+0x1e6>
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b11      	cmp	r3, #17
 80017ac:	d11b      	bne.n	80017e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b10      	cmp	r3, #16
 80017c0:	d111      	bne.n	80017e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017c2:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <HAL_ADC_ConfigChannel+0x23c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a10      	ldr	r2, [pc, #64]	@ (8001808 <HAL_ADC_ConfigChannel+0x240>)
 80017c8:	fba2 2303 	umull	r2, r3, r2, r3
 80017cc:	0c9a      	lsrs	r2, r3, #18
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017d8:	e002      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	3b01      	subs	r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f9      	bne.n	80017da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	40012300 	.word	0x40012300
 8001800:	40012000 	.word	0x40012000
 8001804:	20000000 	.word	0x20000000
 8001808:	431bde83 	.word	0x431bde83

0800180c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001814:	4b79      	ldr	r3, [pc, #484]	@ (80019fc <ADC_Init+0x1f0>)
 8001816:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	431a      	orrs	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001840:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6859      	ldr	r1, [r3, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	021a      	lsls	r2, r3, #8
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001864:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6859      	ldr	r1, [r3, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	430a      	orrs	r2, r1
 8001876:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001886:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6899      	ldr	r1, [r3, #8]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800189e:	4a58      	ldr	r2, [pc, #352]	@ (8001a00 <ADC_Init+0x1f4>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d022      	beq.n	80018ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6899      	ldr	r1, [r3, #8]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6899      	ldr	r1, [r3, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	e00f      	b.n	800190a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001908:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0202 	bic.w	r2, r2, #2
 8001918:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6899      	ldr	r1, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	7e1b      	ldrb	r3, [r3, #24]
 8001924:	005a      	lsls	r2, r3, #1
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d01b      	beq.n	8001970 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001946:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001956:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6859      	ldr	r1, [r3, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001962:	3b01      	subs	r3, #1
 8001964:	035a      	lsls	r2, r3, #13
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	e007      	b.n	8001980 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800197e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800198e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	3b01      	subs	r3, #1
 800199c:	051a      	lsls	r2, r3, #20
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80019b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6899      	ldr	r1, [r3, #8]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019c2:	025a      	lsls	r2, r3, #9
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6899      	ldr	r1, [r3, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	029a      	lsls	r2, r3, #10
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	609a      	str	r2, [r3, #8]
}
 80019f0:	bf00      	nop
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	40012300 	.word	0x40012300
 8001a00:	0f000001 	.word	0x0f000001

08001a04 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e0ed      	b.n	8001c06 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d102      	bne.n	8001a3c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff fa2a 	bl	8000e90 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0201 	orr.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a4c:	f7ff fbb8 	bl	80011c0 <HAL_GetTick>
 8001a50:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a52:	e012      	b.n	8001a7a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a54:	f7ff fbb4 	bl	80011c0 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b0a      	cmp	r3, #10
 8001a60:	d90b      	bls.n	8001a7a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a66:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2205      	movs	r2, #5
 8001a72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e0c5      	b.n	8001c06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0e5      	beq.n	8001a54 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0202 	bic.w	r2, r2, #2
 8001a96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a98:	f7ff fb92 	bl	80011c0 <HAL_GetTick>
 8001a9c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a9e:	e012      	b.n	8001ac6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001aa0:	f7ff fb8e 	bl	80011c0 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b0a      	cmp	r3, #10
 8001aac:	d90b      	bls.n	8001ac6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2205      	movs	r2, #5
 8001abe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e09f      	b.n	8001c06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1e5      	bne.n	8001aa0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7e1b      	ldrb	r3, [r3, #24]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d108      	bne.n	8001aee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	e007      	b.n	8001afe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001afc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	7e5b      	ldrb	r3, [r3, #25]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d108      	bne.n	8001b18 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	e007      	b.n	8001b28 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b26:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	7e9b      	ldrb	r3, [r3, #26]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d108      	bne.n	8001b42 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0220 	orr.w	r2, r2, #32
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	e007      	b.n	8001b52 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 0220 	bic.w	r2, r2, #32
 8001b50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	7edb      	ldrb	r3, [r3, #27]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d108      	bne.n	8001b6c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 0210 	bic.w	r2, r2, #16
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	e007      	b.n	8001b7c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0210 	orr.w	r2, r2, #16
 8001b7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	7f1b      	ldrb	r3, [r3, #28]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d108      	bne.n	8001b96 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0208 	orr.w	r2, r2, #8
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	e007      	b.n	8001ba6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0208 	bic.w	r2, r2, #8
 8001ba4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	7f5b      	ldrb	r3, [r3, #29]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d108      	bne.n	8001bc0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f042 0204 	orr.w	r2, r2, #4
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	e007      	b.n	8001bd0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0204 	bic.w	r2, r2, #4
 8001bce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	ea42 0103 	orr.w	r1, r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	1e5a      	subs	r2, r3, #1
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b087      	sub	sp, #28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c26:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c28:	7cfb      	ldrb	r3, [r7, #19]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d003      	beq.n	8001c36 <HAL_CAN_ConfigFilter+0x26>
 8001c2e:	7cfb      	ldrb	r3, [r7, #19]
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	f040 80be 	bne.w	8001db2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001c36:	4b65      	ldr	r3, [pc, #404]	@ (8001dcc <HAL_CAN_ConfigFilter+0x1bc>)
 8001c38:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c40:	f043 0201 	orr.w	r2, r3, #1
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c50:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c64:	021b      	lsls	r3, r3, #8
 8001c66:	431a      	orrs	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	f003 031f 	and.w	r3, r3, #31
 8001c76:	2201      	movs	r2, #1
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	401a      	ands	r2, r3
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d123      	bne.n	8001ce0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001cba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	3248      	adds	r2, #72	@ 0x48
 8001cc0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cd4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cd6:	6979      	ldr	r1, [r7, #20]
 8001cd8:	3348      	adds	r3, #72	@ 0x48
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	440b      	add	r3, r1
 8001cde:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d122      	bne.n	8001d2e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d08:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	3248      	adds	r2, #72	@ 0x48
 8001d0e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d22:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d24:	6979      	ldr	r1, [r7, #20]
 8001d26:	3348      	adds	r3, #72	@ 0x48
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	440b      	add	r3, r1
 8001d2c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d109      	bne.n	8001d4a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	401a      	ands	r2, r3
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001d48:	e007      	b.n	8001d5a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	431a      	orrs	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d109      	bne.n	8001d76 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	401a      	ands	r2, r3
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001d74:	e007      	b.n	8001d86 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d107      	bne.n	8001d9e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	431a      	orrs	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001da4:	f023 0201 	bic.w	r2, r3, #1
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	e006      	b.n	8001dc0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
  }
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	371c      	adds	r7, #28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	40006400 	.word	0x40006400

08001dd0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d12e      	bne.n	8001e42 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2202      	movs	r2, #2
 8001de8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0201 	bic.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001dfc:	f7ff f9e0 	bl	80011c0 <HAL_GetTick>
 8001e00:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e02:	e012      	b.n	8001e2a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e04:	f7ff f9dc 	bl	80011c0 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b0a      	cmp	r3, #10
 8001e10:	d90b      	bls.n	8001e2a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e16:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2205      	movs	r2, #5
 8001e22:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e012      	b.n	8001e50 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1e5      	bne.n	8001e04 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	e006      	b.n	8001e50 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e46:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
  }
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	@ 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
 8001e64:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e6c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e76:	7ffb      	ldrb	r3, [r7, #31]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d003      	beq.n	8001e84 <HAL_CAN_AddTxMessage+0x2c>
 8001e7c:	7ffb      	ldrb	r3, [r7, #31]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	f040 80ad 	bne.w	8001fde <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10a      	bne.n	8001ea4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d105      	bne.n	8001ea4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 8095 	beq.w	8001fce <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	0e1b      	lsrs	r3, r3, #24
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001eae:	2201      	movs	r2, #1
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	409a      	lsls	r2, r3
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10d      	bne.n	8001edc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001eca:	68f9      	ldr	r1, [r7, #12]
 8001ecc:	6809      	ldr	r1, [r1, #0]
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	3318      	adds	r3, #24
 8001ed4:	011b      	lsls	r3, r3, #4
 8001ed6:	440b      	add	r3, r1
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	e00f      	b.n	8001efc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ee6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001eec:	68f9      	ldr	r1, [r7, #12]
 8001eee:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001ef0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	3318      	adds	r3, #24
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	440b      	add	r3, r1
 8001efa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6819      	ldr	r1, [r3, #0]
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	3318      	adds	r3, #24
 8001f08:	011b      	lsls	r3, r3, #4
 8001f0a:	440b      	add	r3, r1
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	7d1b      	ldrb	r3, [r3, #20]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d111      	bne.n	8001f3c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	3318      	adds	r3, #24
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	4413      	add	r3, r2
 8001f24:	3304      	adds	r3, #4
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	6811      	ldr	r1, [r2, #0]
 8001f2c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	3318      	adds	r3, #24
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	440b      	add	r3, r1
 8001f38:	3304      	adds	r3, #4
 8001f3a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3307      	adds	r3, #7
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	061a      	lsls	r2, r3, #24
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3306      	adds	r3, #6
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	041b      	lsls	r3, r3, #16
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3305      	adds	r3, #5
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	021b      	lsls	r3, r3, #8
 8001f56:	4313      	orrs	r3, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	3204      	adds	r2, #4
 8001f5c:	7812      	ldrb	r2, [r2, #0]
 8001f5e:	4610      	mov	r0, r2
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	6811      	ldr	r1, [r2, #0]
 8001f64:	ea43 0200 	orr.w	r2, r3, r0
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	440b      	add	r3, r1
 8001f6e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001f72:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3303      	adds	r3, #3
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	061a      	lsls	r2, r3, #24
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3302      	adds	r3, #2
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	041b      	lsls	r3, r3, #16
 8001f84:	431a      	orrs	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	021b      	lsls	r3, r3, #8
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	7812      	ldrb	r2, [r2, #0]
 8001f94:	4610      	mov	r0, r2
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	6811      	ldr	r1, [r2, #0]
 8001f9a:	ea43 0200 	orr.w	r2, r3, r0
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	440b      	add	r3, r1
 8001fa4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001fa8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	3318      	adds	r3, #24
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	4413      	add	r3, r2
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	6811      	ldr	r1, [r2, #0]
 8001fbc:	f043 0201 	orr.w	r2, r3, #1
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	3318      	adds	r3, #24
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	440b      	add	r3, r1
 8001fc8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e00e      	b.n	8001fec <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e006      	b.n	8001fec <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
  }
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3724      	adds	r7, #36	@ 0x24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08a      	sub	sp, #40	@ 0x28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002000:	2300      	movs	r3, #0
 8002002:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002034:	6a3b      	ldr	r3, [r7, #32]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d07c      	beq.n	8002138 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b00      	cmp	r3, #0
 8002046:	d023      	beq.n	8002090 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2201      	movs	r2, #1
 800204e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f983 	bl	8002366 <HAL_CAN_TxMailbox0CompleteCallback>
 8002060:	e016      	b.n	8002090 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	d004      	beq.n	8002076 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800206c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002072:	627b      	str	r3, [r7, #36]	@ 0x24
 8002074:	e00c      	b.n	8002090 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b00      	cmp	r3, #0
 800207e:	d004      	beq.n	800208a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002082:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002086:	627b      	str	r3, [r7, #36]	@ 0x24
 8002088:	e002      	b.n	8002090 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f989 	bl	80023a2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002096:	2b00      	cmp	r3, #0
 8002098:	d024      	beq.n	80020e4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f963 	bl	800237a <HAL_CAN_TxMailbox1CompleteCallback>
 80020b4:	e016      	b.n	80020e4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d004      	beq.n	80020ca <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80020c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80020c8:	e00c      	b.n	80020e4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d004      	beq.n	80020de <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80020d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020da:	627b      	str	r3, [r7, #36]	@ 0x24
 80020dc:	e002      	b.n	80020e4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f969 	bl	80023b6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d024      	beq.n	8002138 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80020f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f943 	bl	800238e <HAL_CAN_TxMailbox2CompleteCallback>
 8002108:	e016      	b.n	8002138 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d004      	beq.n	800211e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002116:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800211a:	627b      	str	r3, [r7, #36]	@ 0x24
 800211c:	e00c      	b.n	8002138 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d004      	beq.n	8002132 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800212e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002130:	e002      	b.n	8002138 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f949 	bl	80023ca <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002138:	6a3b      	ldr	r3, [r7, #32]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00c      	beq.n	800215c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f003 0310 	and.w	r3, r3, #16
 8002148:	2b00      	cmp	r3, #0
 800214a:	d007      	beq.n	800215c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800214c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002152:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2210      	movs	r2, #16
 800215a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00b      	beq.n	800217e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	2b00      	cmp	r3, #0
 800216e:	d006      	beq.n	800217e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2208      	movs	r2, #8
 8002176:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f93a 	bl	80023f2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800217e:	6a3b      	ldr	r3, [r7, #32]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d009      	beq.n	800219c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f921 	bl	80023de <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00c      	beq.n	80021c0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	f003 0310 	and.w	r3, r3, #16
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d007      	beq.n	80021c0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80021b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021b6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2210      	movs	r2, #16
 80021be:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	f003 0320 	and.w	r3, r3, #32
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00b      	beq.n	80021e2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	f003 0308 	and.w	r3, r3, #8
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d006      	beq.n	80021e2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2208      	movs	r2, #8
 80021da:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f91c 	bl	800241a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	f003 0310 	and.w	r3, r3, #16
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d009      	beq.n	8002200 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d002      	beq.n	8002200 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f903 	bl	8002406 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00b      	beq.n	8002222 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	f003 0310 	and.w	r3, r3, #16
 8002210:	2b00      	cmp	r3, #0
 8002212:	d006      	beq.n	8002222 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2210      	movs	r2, #16
 800221a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f906 	bl	800242e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00b      	beq.n	8002244 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d006      	beq.n	8002244 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2208      	movs	r2, #8
 800223c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f8ff 	bl	8002442 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d07b      	beq.n	8002346 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	d072      	beq.n	800233e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225e:	2b00      	cmp	r3, #0
 8002260:	d008      	beq.n	8002274 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800226c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002274:	6a3b      	ldr	r3, [r7, #32]
 8002276:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800227a:	2b00      	cmp	r3, #0
 800227c:	d008      	beq.n	8002290 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228a:	f043 0302 	orr.w	r3, r3, #2
 800228e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002296:	2b00      	cmp	r3, #0
 8002298:	d008      	beq.n	80022ac <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80022a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a6:	f043 0304 	orr.w	r3, r3, #4
 80022aa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d043      	beq.n	800233e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d03e      	beq.n	800233e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022c6:	2b60      	cmp	r3, #96	@ 0x60
 80022c8:	d02b      	beq.n	8002322 <HAL_CAN_IRQHandler+0x32a>
 80022ca:	2b60      	cmp	r3, #96	@ 0x60
 80022cc:	d82e      	bhi.n	800232c <HAL_CAN_IRQHandler+0x334>
 80022ce:	2b50      	cmp	r3, #80	@ 0x50
 80022d0:	d022      	beq.n	8002318 <HAL_CAN_IRQHandler+0x320>
 80022d2:	2b50      	cmp	r3, #80	@ 0x50
 80022d4:	d82a      	bhi.n	800232c <HAL_CAN_IRQHandler+0x334>
 80022d6:	2b40      	cmp	r3, #64	@ 0x40
 80022d8:	d019      	beq.n	800230e <HAL_CAN_IRQHandler+0x316>
 80022da:	2b40      	cmp	r3, #64	@ 0x40
 80022dc:	d826      	bhi.n	800232c <HAL_CAN_IRQHandler+0x334>
 80022de:	2b30      	cmp	r3, #48	@ 0x30
 80022e0:	d010      	beq.n	8002304 <HAL_CAN_IRQHandler+0x30c>
 80022e2:	2b30      	cmp	r3, #48	@ 0x30
 80022e4:	d822      	bhi.n	800232c <HAL_CAN_IRQHandler+0x334>
 80022e6:	2b10      	cmp	r3, #16
 80022e8:	d002      	beq.n	80022f0 <HAL_CAN_IRQHandler+0x2f8>
 80022ea:	2b20      	cmp	r3, #32
 80022ec:	d005      	beq.n	80022fa <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80022ee:	e01d      	b.n	800232c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80022f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f2:	f043 0308 	orr.w	r3, r3, #8
 80022f6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80022f8:	e019      	b.n	800232e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80022fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fc:	f043 0310 	orr.w	r3, r3, #16
 8002300:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002302:	e014      	b.n	800232e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002306:	f043 0320 	orr.w	r3, r3, #32
 800230a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800230c:	e00f      	b.n	800232e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800230e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002310:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002314:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002316:	e00a      	b.n	800232e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800231e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002320:	e005      	b.n	800232e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002328:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800232a:	e000      	b.n	800232e <HAL_CAN_IRQHandler+0x336>
            break;
 800232c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	699a      	ldr	r2, [r3, #24]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800233c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2204      	movs	r2, #4
 8002344:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002348:	2b00      	cmp	r3, #0
 800234a:	d008      	beq.n	800235e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f87c 	bl	8002456 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800235e:	bf00      	nop
 8002360:	3728      	adds	r7, #40	@ 0x28
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800247c:	4b0c      	ldr	r3, [pc, #48]	@ (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002488:	4013      	ands	r3, r2
 800248a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002494:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002498:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800249c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800249e:	4a04      	ldr	r2, [pc, #16]	@ (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	60d3      	str	r3, [r2, #12]
}
 80024a4:	bf00      	nop
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b8:	4b04      	ldr	r3, [pc, #16]	@ (80024cc <__NVIC_GetPriorityGrouping+0x18>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	0a1b      	lsrs	r3, r3, #8
 80024be:	f003 0307 	and.w	r3, r3, #7
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	db0b      	blt.n	80024fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	f003 021f 	and.w	r2, r3, #31
 80024e8:	4907      	ldr	r1, [pc, #28]	@ (8002508 <__NVIC_EnableIRQ+0x38>)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	2001      	movs	r0, #1
 80024f2:	fa00 f202 	lsl.w	r2, r0, r2
 80024f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000e100 	.word	0xe000e100

0800250c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	6039      	str	r1, [r7, #0]
 8002516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251c:	2b00      	cmp	r3, #0
 800251e:	db0a      	blt.n	8002536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	b2da      	uxtb	r2, r3
 8002524:	490c      	ldr	r1, [pc, #48]	@ (8002558 <__NVIC_SetPriority+0x4c>)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	0112      	lsls	r2, r2, #4
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	440b      	add	r3, r1
 8002530:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002534:	e00a      	b.n	800254c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	b2da      	uxtb	r2, r3
 800253a:	4908      	ldr	r1, [pc, #32]	@ (800255c <__NVIC_SetPriority+0x50>)
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	3b04      	subs	r3, #4
 8002544:	0112      	lsls	r2, r2, #4
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	440b      	add	r3, r1
 800254a:	761a      	strb	r2, [r3, #24]
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000e100 	.word	0xe000e100
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002560:	b480      	push	{r7}
 8002562:	b089      	sub	sp, #36	@ 0x24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f1c3 0307 	rsb	r3, r3, #7
 800257a:	2b04      	cmp	r3, #4
 800257c:	bf28      	it	cs
 800257e:	2304      	movcs	r3, #4
 8002580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3304      	adds	r3, #4
 8002586:	2b06      	cmp	r3, #6
 8002588:	d902      	bls.n	8002590 <NVIC_EncodePriority+0x30>
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3b03      	subs	r3, #3
 800258e:	e000      	b.n	8002592 <NVIC_EncodePriority+0x32>
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002594:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43da      	mvns	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	401a      	ands	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	43d9      	mvns	r1, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b8:	4313      	orrs	r3, r2
         );
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3724      	adds	r7, #36	@ 0x24
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
	...

080025c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025d8:	d301      	bcc.n	80025de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025da:	2301      	movs	r3, #1
 80025dc:	e00f      	b.n	80025fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025de:	4a0a      	ldr	r2, [pc, #40]	@ (8002608 <SysTick_Config+0x40>)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025e6:	210f      	movs	r1, #15
 80025e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80025ec:	f7ff ff8e 	bl	800250c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025f0:	4b05      	ldr	r3, [pc, #20]	@ (8002608 <SysTick_Config+0x40>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025f6:	4b04      	ldr	r3, [pc, #16]	@ (8002608 <SysTick_Config+0x40>)
 80025f8:	2207      	movs	r2, #7
 80025fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	e000e010 	.word	0xe000e010

0800260c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff ff29 	bl	800246c <__NVIC_SetPriorityGrouping>
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002622:	b580      	push	{r7, lr}
 8002624:	b086      	sub	sp, #24
 8002626:	af00      	add	r7, sp, #0
 8002628:	4603      	mov	r3, r0
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	607a      	str	r2, [r7, #4]
 800262e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002634:	f7ff ff3e 	bl	80024b4 <__NVIC_GetPriorityGrouping>
 8002638:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	68b9      	ldr	r1, [r7, #8]
 800263e:	6978      	ldr	r0, [r7, #20]
 8002640:	f7ff ff8e 	bl	8002560 <NVIC_EncodePriority>
 8002644:	4602      	mov	r2, r0
 8002646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800264a:	4611      	mov	r1, r2
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff ff5d 	bl	800250c <__NVIC_SetPriority>
}
 8002652:	bf00      	nop
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	4603      	mov	r3, r0
 8002662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff31 	bl	80024d0 <__NVIC_EnableIRQ>
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff ffa2 	bl	80025c8 <SysTick_Config>
 8002684:	4603      	mov	r3, r0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002690:	b480      	push	{r7}
 8002692:	b089      	sub	sp, #36	@ 0x24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800269e:	2300      	movs	r3, #0
 80026a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	e16b      	b.n	8002984 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026ac:	2201      	movs	r2, #1
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	4013      	ands	r3, r2
 80026be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	f040 815a 	bne.w	800297e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d005      	beq.n	80026e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d130      	bne.n	8002744 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	2203      	movs	r2, #3
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002718:	2201      	movs	r2, #1
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 0201 	and.w	r2, r3, #1
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	2b03      	cmp	r3, #3
 800274e:	d017      	beq.n	8002780 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	2203      	movs	r2, #3
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d123      	bne.n	80027d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	08da      	lsrs	r2, r3, #3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3208      	adds	r2, #8
 8002794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002798:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	220f      	movs	r2, #15
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	08da      	lsrs	r2, r3, #3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3208      	adds	r2, #8
 80027ce:	69b9      	ldr	r1, [r7, #24]
 80027d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	2203      	movs	r2, #3
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 0203 	and.w	r2, r3, #3
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 80b4 	beq.w	800297e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	4b60      	ldr	r3, [pc, #384]	@ (800299c <HAL_GPIO_Init+0x30c>)
 800281c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281e:	4a5f      	ldr	r2, [pc, #380]	@ (800299c <HAL_GPIO_Init+0x30c>)
 8002820:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002824:	6453      	str	r3, [r2, #68]	@ 0x44
 8002826:	4b5d      	ldr	r3, [pc, #372]	@ (800299c <HAL_GPIO_Init+0x30c>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002832:	4a5b      	ldr	r2, [pc, #364]	@ (80029a0 <HAL_GPIO_Init+0x310>)
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	089b      	lsrs	r3, r3, #2
 8002838:	3302      	adds	r3, #2
 800283a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	220f      	movs	r2, #15
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a52      	ldr	r2, [pc, #328]	@ (80029a4 <HAL_GPIO_Init+0x314>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d02b      	beq.n	80028b6 <HAL_GPIO_Init+0x226>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a51      	ldr	r2, [pc, #324]	@ (80029a8 <HAL_GPIO_Init+0x318>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d025      	beq.n	80028b2 <HAL_GPIO_Init+0x222>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a50      	ldr	r2, [pc, #320]	@ (80029ac <HAL_GPIO_Init+0x31c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d01f      	beq.n	80028ae <HAL_GPIO_Init+0x21e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a4f      	ldr	r2, [pc, #316]	@ (80029b0 <HAL_GPIO_Init+0x320>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d019      	beq.n	80028aa <HAL_GPIO_Init+0x21a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a4e      	ldr	r2, [pc, #312]	@ (80029b4 <HAL_GPIO_Init+0x324>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d013      	beq.n	80028a6 <HAL_GPIO_Init+0x216>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a4d      	ldr	r2, [pc, #308]	@ (80029b8 <HAL_GPIO_Init+0x328>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00d      	beq.n	80028a2 <HAL_GPIO_Init+0x212>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a4c      	ldr	r2, [pc, #304]	@ (80029bc <HAL_GPIO_Init+0x32c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d007      	beq.n	800289e <HAL_GPIO_Init+0x20e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a4b      	ldr	r2, [pc, #300]	@ (80029c0 <HAL_GPIO_Init+0x330>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d101      	bne.n	800289a <HAL_GPIO_Init+0x20a>
 8002896:	2307      	movs	r3, #7
 8002898:	e00e      	b.n	80028b8 <HAL_GPIO_Init+0x228>
 800289a:	2308      	movs	r3, #8
 800289c:	e00c      	b.n	80028b8 <HAL_GPIO_Init+0x228>
 800289e:	2306      	movs	r3, #6
 80028a0:	e00a      	b.n	80028b8 <HAL_GPIO_Init+0x228>
 80028a2:	2305      	movs	r3, #5
 80028a4:	e008      	b.n	80028b8 <HAL_GPIO_Init+0x228>
 80028a6:	2304      	movs	r3, #4
 80028a8:	e006      	b.n	80028b8 <HAL_GPIO_Init+0x228>
 80028aa:	2303      	movs	r3, #3
 80028ac:	e004      	b.n	80028b8 <HAL_GPIO_Init+0x228>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e002      	b.n	80028b8 <HAL_GPIO_Init+0x228>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <HAL_GPIO_Init+0x228>
 80028b6:	2300      	movs	r3, #0
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	f002 0203 	and.w	r2, r2, #3
 80028be:	0092      	lsls	r2, r2, #2
 80028c0:	4093      	lsls	r3, r2
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028c8:	4935      	ldr	r1, [pc, #212]	@ (80029a0 <HAL_GPIO_Init+0x310>)
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	089b      	lsrs	r3, r3, #2
 80028ce:	3302      	adds	r3, #2
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028d6:	4b3b      	ldr	r3, [pc, #236]	@ (80029c4 <HAL_GPIO_Init+0x334>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028fa:	4a32      	ldr	r2, [pc, #200]	@ (80029c4 <HAL_GPIO_Init+0x334>)
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002900:	4b30      	ldr	r3, [pc, #192]	@ (80029c4 <HAL_GPIO_Init+0x334>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002924:	4a27      	ldr	r2, [pc, #156]	@ (80029c4 <HAL_GPIO_Init+0x334>)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800292a:	4b26      	ldr	r3, [pc, #152]	@ (80029c4 <HAL_GPIO_Init+0x334>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800294e:	4a1d      	ldr	r2, [pc, #116]	@ (80029c4 <HAL_GPIO_Init+0x334>)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002954:	4b1b      	ldr	r3, [pc, #108]	@ (80029c4 <HAL_GPIO_Init+0x334>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002978:	4a12      	ldr	r2, [pc, #72]	@ (80029c4 <HAL_GPIO_Init+0x334>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3301      	adds	r3, #1
 8002982:	61fb      	str	r3, [r7, #28]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b0f      	cmp	r3, #15
 8002988:	f67f ae90 	bls.w	80026ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800298c:	bf00      	nop
 800298e:	bf00      	nop
 8002990:	3724      	adds	r7, #36	@ 0x24
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800
 80029a0:	40013800 	.word	0x40013800
 80029a4:	40020000 	.word	0x40020000
 80029a8:	40020400 	.word	0x40020400
 80029ac:	40020800 	.word	0x40020800
 80029b0:	40020c00 	.word	0x40020c00
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40021400 	.word	0x40021400
 80029bc:	40021800 	.word	0x40021800
 80029c0:	40021c00 	.word	0x40021c00
 80029c4:	40013c00 	.word	0x40013c00

080029c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80029d2:	4b08      	ldr	r3, [pc, #32]	@ (80029f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029d4:	695a      	ldr	r2, [r3, #20]
 80029d6:	88fb      	ldrh	r3, [r7, #6]
 80029d8:	4013      	ands	r3, r2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d006      	beq.n	80029ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029de:	4a05      	ldr	r2, [pc, #20]	@ (80029f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029e0:	88fb      	ldrh	r3, [r7, #6]
 80029e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029e4:	88fb      	ldrh	r3, [r7, #6]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fd fdbc 	bl	8000564 <HAL_GPIO_EXTI_Callback>
  }
}
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40013c00 	.word	0x40013c00

080029f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e267      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d075      	beq.n	8002b02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a16:	4b88      	ldr	r3, [pc, #544]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 030c 	and.w	r3, r3, #12
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d00c      	beq.n	8002a3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a22:	4b85      	ldr	r3, [pc, #532]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a2a:	2b08      	cmp	r3, #8
 8002a2c:	d112      	bne.n	8002a54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a2e:	4b82      	ldr	r3, [pc, #520]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a3a:	d10b      	bne.n	8002a54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3c:	4b7e      	ldr	r3, [pc, #504]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d05b      	beq.n	8002b00 <HAL_RCC_OscConfig+0x108>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d157      	bne.n	8002b00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e242      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a5c:	d106      	bne.n	8002a6c <HAL_RCC_OscConfig+0x74>
 8002a5e:	4b76      	ldr	r3, [pc, #472]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a75      	ldr	r2, [pc, #468]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	e01d      	b.n	8002aa8 <HAL_RCC_OscConfig+0xb0>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a74:	d10c      	bne.n	8002a90 <HAL_RCC_OscConfig+0x98>
 8002a76:	4b70      	ldr	r3, [pc, #448]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a6f      	ldr	r2, [pc, #444]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	4b6d      	ldr	r3, [pc, #436]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a6c      	ldr	r2, [pc, #432]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	e00b      	b.n	8002aa8 <HAL_RCC_OscConfig+0xb0>
 8002a90:	4b69      	ldr	r3, [pc, #420]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a68      	ldr	r2, [pc, #416]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	4b66      	ldr	r3, [pc, #408]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a65      	ldr	r2, [pc, #404]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002aa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d013      	beq.n	8002ad8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab0:	f7fe fb86 	bl	80011c0 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ab8:	f7fe fb82 	bl	80011c0 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b64      	cmp	r3, #100	@ 0x64
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e207      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aca:	4b5b      	ldr	r3, [pc, #364]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0xc0>
 8002ad6:	e014      	b.n	8002b02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad8:	f7fe fb72 	bl	80011c0 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ae0:	f7fe fb6e 	bl	80011c0 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b64      	cmp	r3, #100	@ 0x64
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e1f3      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af2:	4b51      	ldr	r3, [pc, #324]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f0      	bne.n	8002ae0 <HAL_RCC_OscConfig+0xe8>
 8002afe:	e000      	b.n	8002b02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d063      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b0e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00b      	beq.n	8002b32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b1a:	4b47      	ldr	r3, [pc, #284]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d11c      	bne.n	8002b60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b26:	4b44      	ldr	r3, [pc, #272]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d116      	bne.n	8002b60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b32:	4b41      	ldr	r3, [pc, #260]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d005      	beq.n	8002b4a <HAL_RCC_OscConfig+0x152>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d001      	beq.n	8002b4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e1c7      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4937      	ldr	r1, [pc, #220]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b5e:	e03a      	b.n	8002bd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d020      	beq.n	8002baa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b68:	4b34      	ldr	r3, [pc, #208]	@ (8002c3c <HAL_RCC_OscConfig+0x244>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6e:	f7fe fb27 	bl	80011c0 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b76:	f7fe fb23 	bl	80011c0 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e1a8      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b88:	4b2b      	ldr	r3, [pc, #172]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b94:	4b28      	ldr	r3, [pc, #160]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4925      	ldr	r1, [pc, #148]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	600b      	str	r3, [r1, #0]
 8002ba8:	e015      	b.n	8002bd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002baa:	4b24      	ldr	r3, [pc, #144]	@ (8002c3c <HAL_RCC_OscConfig+0x244>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb0:	f7fe fb06 	bl	80011c0 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bb8:	f7fe fb02 	bl	80011c0 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e187      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bca:	4b1b      	ldr	r3, [pc, #108]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f0      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d036      	beq.n	8002c50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d016      	beq.n	8002c18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bea:	4b15      	ldr	r3, [pc, #84]	@ (8002c40 <HAL_RCC_OscConfig+0x248>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf0:	f7fe fae6 	bl	80011c0 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf8:	f7fe fae2 	bl	80011c0 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e167      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x200>
 8002c16:	e01b      	b.n	8002c50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c18:	4b09      	ldr	r3, [pc, #36]	@ (8002c40 <HAL_RCC_OscConfig+0x248>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c1e:	f7fe facf 	bl	80011c0 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c24:	e00e      	b.n	8002c44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c26:	f7fe facb 	bl	80011c0 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d907      	bls.n	8002c44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e150      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	42470000 	.word	0x42470000
 8002c40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c44:	4b88      	ldr	r3, [pc, #544]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002c46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1ea      	bne.n	8002c26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 8097 	beq.w	8002d8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c62:	4b81      	ldr	r3, [pc, #516]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10f      	bne.n	8002c8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	4b7d      	ldr	r3, [pc, #500]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c76:	4a7c      	ldr	r2, [pc, #496]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c7e:	4b7a      	ldr	r3, [pc, #488]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8e:	4b77      	ldr	r3, [pc, #476]	@ (8002e6c <HAL_RCC_OscConfig+0x474>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d118      	bne.n	8002ccc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c9a:	4b74      	ldr	r3, [pc, #464]	@ (8002e6c <HAL_RCC_OscConfig+0x474>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a73      	ldr	r2, [pc, #460]	@ (8002e6c <HAL_RCC_OscConfig+0x474>)
 8002ca0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca6:	f7fe fa8b 	bl	80011c0 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cae:	f7fe fa87 	bl	80011c0 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e10c      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc0:	4b6a      	ldr	r3, [pc, #424]	@ (8002e6c <HAL_RCC_OscConfig+0x474>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d106      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x2ea>
 8002cd4:	4b64      	ldr	r3, [pc, #400]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd8:	4a63      	ldr	r2, [pc, #396]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ce0:	e01c      	b.n	8002d1c <HAL_RCC_OscConfig+0x324>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b05      	cmp	r3, #5
 8002ce8:	d10c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x30c>
 8002cea:	4b5f      	ldr	r3, [pc, #380]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cee:	4a5e      	ldr	r2, [pc, #376]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002cf0:	f043 0304 	orr.w	r3, r3, #4
 8002cf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cf6:	4b5c      	ldr	r3, [pc, #368]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cfa:	4a5b      	ldr	r2, [pc, #364]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d02:	e00b      	b.n	8002d1c <HAL_RCC_OscConfig+0x324>
 8002d04:	4b58      	ldr	r3, [pc, #352]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d08:	4a57      	ldr	r2, [pc, #348]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002d0a:	f023 0301 	bic.w	r3, r3, #1
 8002d0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d10:	4b55      	ldr	r3, [pc, #340]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d14:	4a54      	ldr	r2, [pc, #336]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002d16:	f023 0304 	bic.w	r3, r3, #4
 8002d1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d015      	beq.n	8002d50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d24:	f7fe fa4c 	bl	80011c0 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2a:	e00a      	b.n	8002d42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d2c:	f7fe fa48 	bl	80011c0 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e0cb      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d42:	4b49      	ldr	r3, [pc, #292]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0ee      	beq.n	8002d2c <HAL_RCC_OscConfig+0x334>
 8002d4e:	e014      	b.n	8002d7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d50:	f7fe fa36 	bl	80011c0 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d56:	e00a      	b.n	8002d6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d58:	f7fe fa32 	bl	80011c0 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e0b5      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d6e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1ee      	bne.n	8002d58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d7a:	7dfb      	ldrb	r3, [r7, #23]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d105      	bne.n	8002d8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d80:	4b39      	ldr	r3, [pc, #228]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d84:	4a38      	ldr	r2, [pc, #224]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002d86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d8a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80a1 	beq.w	8002ed8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d96:	4b34      	ldr	r3, [pc, #208]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d05c      	beq.n	8002e5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d141      	bne.n	8002e2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002daa:	4b31      	ldr	r3, [pc, #196]	@ (8002e70 <HAL_RCC_OscConfig+0x478>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7fe fa06 	bl	80011c0 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db8:	f7fe fa02 	bl	80011c0 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e087      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dca:	4b27      	ldr	r3, [pc, #156]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69da      	ldr	r2, [r3, #28]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de4:	019b      	lsls	r3, r3, #6
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dec:	085b      	lsrs	r3, r3, #1
 8002dee:	3b01      	subs	r3, #1
 8002df0:	041b      	lsls	r3, r3, #16
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df8:	061b      	lsls	r3, r3, #24
 8002dfa:	491b      	ldr	r1, [pc, #108]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e00:	4b1b      	ldr	r3, [pc, #108]	@ (8002e70 <HAL_RCC_OscConfig+0x478>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e06:	f7fe f9db 	bl	80011c0 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e0e:	f7fe f9d7 	bl	80011c0 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e05c      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e20:	4b11      	ldr	r3, [pc, #68]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0f0      	beq.n	8002e0e <HAL_RCC_OscConfig+0x416>
 8002e2c:	e054      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2e:	4b10      	ldr	r3, [pc, #64]	@ (8002e70 <HAL_RCC_OscConfig+0x478>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e34:	f7fe f9c4 	bl	80011c0 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e3c:	f7fe f9c0 	bl	80011c0 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e045      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4e:	4b06      	ldr	r3, [pc, #24]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f0      	bne.n	8002e3c <HAL_RCC_OscConfig+0x444>
 8002e5a:	e03d      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d107      	bne.n	8002e74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e038      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40007000 	.word	0x40007000
 8002e70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee4 <HAL_RCC_OscConfig+0x4ec>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d028      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d121      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d11a      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002eaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d111      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eba:	085b      	lsrs	r3, r3, #1
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d107      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ece:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d001      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800

08002ee8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e0cc      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002efc:	4b68      	ldr	r3, [pc, #416]	@ (80030a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d90c      	bls.n	8002f24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0a:	4b65      	ldr	r3, [pc, #404]	@ (80030a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f12:	4b63      	ldr	r3, [pc, #396]	@ (80030a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0b8      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d020      	beq.n	8002f72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d005      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f3c:	4b59      	ldr	r3, [pc, #356]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	4a58      	ldr	r2, [pc, #352]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0308 	and.w	r3, r3, #8
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d005      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f54:	4b53      	ldr	r3, [pc, #332]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	4a52      	ldr	r2, [pc, #328]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f60:	4b50      	ldr	r3, [pc, #320]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	494d      	ldr	r1, [pc, #308]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d044      	beq.n	8003008 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d107      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f86:	4b47      	ldr	r3, [pc, #284]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d119      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e07f      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d003      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fa2:	2b03      	cmp	r3, #3
 8002fa4:	d107      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa6:	4b3f      	ldr	r3, [pc, #252]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d109      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e06f      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb6:	4b3b      	ldr	r3, [pc, #236]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e067      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fc6:	4b37      	ldr	r3, [pc, #220]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f023 0203 	bic.w	r2, r3, #3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	4934      	ldr	r1, [pc, #208]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fd8:	f7fe f8f2 	bl	80011c0 <HAL_GetTick>
 8002fdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fde:	e00a      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe0:	f7fe f8ee 	bl	80011c0 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e04f      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff6:	4b2b      	ldr	r3, [pc, #172]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 020c 	and.w	r2, r3, #12
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	429a      	cmp	r2, r3
 8003006:	d1eb      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003008:	4b25      	ldr	r3, [pc, #148]	@ (80030a0 <HAL_RCC_ClockConfig+0x1b8>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d20c      	bcs.n	8003030 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003016:	4b22      	ldr	r3, [pc, #136]	@ (80030a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800301e:	4b20      	ldr	r3, [pc, #128]	@ (80030a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d001      	beq.n	8003030 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e032      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d008      	beq.n	800304e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800303c:	4b19      	ldr	r3, [pc, #100]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	4916      	ldr	r1, [pc, #88]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	4313      	orrs	r3, r2
 800304c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d009      	beq.n	800306e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800305a:	4b12      	ldr	r3, [pc, #72]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	490e      	ldr	r1, [pc, #56]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	4313      	orrs	r3, r2
 800306c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800306e:	f000 f821 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 8003072:	4602      	mov	r2, r0
 8003074:	4b0b      	ldr	r3, [pc, #44]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	091b      	lsrs	r3, r3, #4
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	490a      	ldr	r1, [pc, #40]	@ (80030a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003080:	5ccb      	ldrb	r3, [r1, r3]
 8003082:	fa22 f303 	lsr.w	r3, r2, r3
 8003086:	4a09      	ldr	r2, [pc, #36]	@ (80030ac <HAL_RCC_ClockConfig+0x1c4>)
 8003088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800308a:	4b09      	ldr	r3, [pc, #36]	@ (80030b0 <HAL_RCC_ClockConfig+0x1c8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f7fe f852 	bl	8001138 <HAL_InitTick>

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40023c00 	.word	0x40023c00
 80030a4:	40023800 	.word	0x40023800
 80030a8:	08007488 	.word	0x08007488
 80030ac:	20000000 	.word	0x20000000
 80030b0:	20000004 	.word	0x20000004

080030b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030b8:	b094      	sub	sp, #80	@ 0x50
 80030ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	647b      	str	r3, [r7, #68]	@ 0x44
 80030c0:	2300      	movs	r3, #0
 80030c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030c4:	2300      	movs	r3, #0
 80030c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030cc:	4b79      	ldr	r3, [pc, #484]	@ (80032b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 030c 	and.w	r3, r3, #12
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d00d      	beq.n	80030f4 <HAL_RCC_GetSysClockFreq+0x40>
 80030d8:	2b08      	cmp	r3, #8
 80030da:	f200 80e1 	bhi.w	80032a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d002      	beq.n	80030e8 <HAL_RCC_GetSysClockFreq+0x34>
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d003      	beq.n	80030ee <HAL_RCC_GetSysClockFreq+0x3a>
 80030e6:	e0db      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030e8:	4b73      	ldr	r3, [pc, #460]	@ (80032b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80030ea:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80030ec:	e0db      	b.n	80032a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030ee:	4b73      	ldr	r3, [pc, #460]	@ (80032bc <HAL_RCC_GetSysClockFreq+0x208>)
 80030f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030f2:	e0d8      	b.n	80032a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030f4:	4b6f      	ldr	r3, [pc, #444]	@ (80032b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030fc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030fe:	4b6d      	ldr	r3, [pc, #436]	@ (80032b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d063      	beq.n	80031d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800310a:	4b6a      	ldr	r3, [pc, #424]	@ (80032b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	099b      	lsrs	r3, r3, #6
 8003110:	2200      	movs	r2, #0
 8003112:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003114:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800311c:	633b      	str	r3, [r7, #48]	@ 0x30
 800311e:	2300      	movs	r3, #0
 8003120:	637b      	str	r3, [r7, #52]	@ 0x34
 8003122:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003126:	4622      	mov	r2, r4
 8003128:	462b      	mov	r3, r5
 800312a:	f04f 0000 	mov.w	r0, #0
 800312e:	f04f 0100 	mov.w	r1, #0
 8003132:	0159      	lsls	r1, r3, #5
 8003134:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003138:	0150      	lsls	r0, r2, #5
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	4621      	mov	r1, r4
 8003140:	1a51      	subs	r1, r2, r1
 8003142:	6139      	str	r1, [r7, #16]
 8003144:	4629      	mov	r1, r5
 8003146:	eb63 0301 	sbc.w	r3, r3, r1
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	f04f 0300 	mov.w	r3, #0
 8003154:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003158:	4659      	mov	r1, fp
 800315a:	018b      	lsls	r3, r1, #6
 800315c:	4651      	mov	r1, sl
 800315e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003162:	4651      	mov	r1, sl
 8003164:	018a      	lsls	r2, r1, #6
 8003166:	4651      	mov	r1, sl
 8003168:	ebb2 0801 	subs.w	r8, r2, r1
 800316c:	4659      	mov	r1, fp
 800316e:	eb63 0901 	sbc.w	r9, r3, r1
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800317e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003182:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003186:	4690      	mov	r8, r2
 8003188:	4699      	mov	r9, r3
 800318a:	4623      	mov	r3, r4
 800318c:	eb18 0303 	adds.w	r3, r8, r3
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	462b      	mov	r3, r5
 8003194:	eb49 0303 	adc.w	r3, r9, r3
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	f04f 0300 	mov.w	r3, #0
 80031a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031a6:	4629      	mov	r1, r5
 80031a8:	024b      	lsls	r3, r1, #9
 80031aa:	4621      	mov	r1, r4
 80031ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031b0:	4621      	mov	r1, r4
 80031b2:	024a      	lsls	r2, r1, #9
 80031b4:	4610      	mov	r0, r2
 80031b6:	4619      	mov	r1, r3
 80031b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031ba:	2200      	movs	r2, #0
 80031bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80031c4:	f7fd f804 	bl	80001d0 <__aeabi_uldivmod>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4613      	mov	r3, r2
 80031ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031d0:	e058      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031d2:	4b38      	ldr	r3, [pc, #224]	@ (80032b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	099b      	lsrs	r3, r3, #6
 80031d8:	2200      	movs	r2, #0
 80031da:	4618      	mov	r0, r3
 80031dc:	4611      	mov	r1, r2
 80031de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031e2:	623b      	str	r3, [r7, #32]
 80031e4:	2300      	movs	r3, #0
 80031e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80031e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031ec:	4642      	mov	r2, r8
 80031ee:	464b      	mov	r3, r9
 80031f0:	f04f 0000 	mov.w	r0, #0
 80031f4:	f04f 0100 	mov.w	r1, #0
 80031f8:	0159      	lsls	r1, r3, #5
 80031fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031fe:	0150      	lsls	r0, r2, #5
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	4641      	mov	r1, r8
 8003206:	ebb2 0a01 	subs.w	sl, r2, r1
 800320a:	4649      	mov	r1, r9
 800320c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800321c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003220:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003224:	ebb2 040a 	subs.w	r4, r2, sl
 8003228:	eb63 050b 	sbc.w	r5, r3, fp
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	f04f 0300 	mov.w	r3, #0
 8003234:	00eb      	lsls	r3, r5, #3
 8003236:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800323a:	00e2      	lsls	r2, r4, #3
 800323c:	4614      	mov	r4, r2
 800323e:	461d      	mov	r5, r3
 8003240:	4643      	mov	r3, r8
 8003242:	18e3      	adds	r3, r4, r3
 8003244:	603b      	str	r3, [r7, #0]
 8003246:	464b      	mov	r3, r9
 8003248:	eb45 0303 	adc.w	r3, r5, r3
 800324c:	607b      	str	r3, [r7, #4]
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	e9d7 4500 	ldrd	r4, r5, [r7]
 800325a:	4629      	mov	r1, r5
 800325c:	028b      	lsls	r3, r1, #10
 800325e:	4621      	mov	r1, r4
 8003260:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003264:	4621      	mov	r1, r4
 8003266:	028a      	lsls	r2, r1, #10
 8003268:	4610      	mov	r0, r2
 800326a:	4619      	mov	r1, r3
 800326c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800326e:	2200      	movs	r2, #0
 8003270:	61bb      	str	r3, [r7, #24]
 8003272:	61fa      	str	r2, [r7, #28]
 8003274:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003278:	f7fc ffaa 	bl	80001d0 <__aeabi_uldivmod>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4613      	mov	r3, r2
 8003282:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003284:	4b0b      	ldr	r3, [pc, #44]	@ (80032b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	0c1b      	lsrs	r3, r3, #16
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	3301      	adds	r3, #1
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003294:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003296:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003298:	fbb2 f3f3 	udiv	r3, r2, r3
 800329c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800329e:	e002      	b.n	80032a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032a0:	4b05      	ldr	r3, [pc, #20]	@ (80032b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80032a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3750      	adds	r7, #80	@ 0x50
 80032ac:	46bd      	mov	sp, r7
 80032ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032b2:	bf00      	nop
 80032b4:	40023800 	.word	0x40023800
 80032b8:	00f42400 	.word	0x00f42400
 80032bc:	007a1200 	.word	0x007a1200

080032c0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e041      	b.n	8003356 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d106      	bne.n	80032ec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7fd fe2a 	bl	8000f40 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3304      	adds	r3, #4
 80032fc:	4619      	mov	r1, r3
 80032fe:	4610      	mov	r0, r2
 8003300:	f000 fb14 	bl	800392c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d104      	bne.n	800337e <HAL_TIM_IC_Start_IT+0x1e>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800337a:	b2db      	uxtb	r3, r3
 800337c:	e013      	b.n	80033a6 <HAL_TIM_IC_Start_IT+0x46>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b04      	cmp	r3, #4
 8003382:	d104      	bne.n	800338e <HAL_TIM_IC_Start_IT+0x2e>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800338a:	b2db      	uxtb	r3, r3
 800338c:	e00b      	b.n	80033a6 <HAL_TIM_IC_Start_IT+0x46>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b08      	cmp	r3, #8
 8003392:	d104      	bne.n	800339e <HAL_TIM_IC_Start_IT+0x3e>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800339a:	b2db      	uxtb	r3, r3
 800339c:	e003      	b.n	80033a6 <HAL_TIM_IC_Start_IT+0x46>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d104      	bne.n	80033b8 <HAL_TIM_IC_Start_IT+0x58>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	e013      	b.n	80033e0 <HAL_TIM_IC_Start_IT+0x80>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d104      	bne.n	80033c8 <HAL_TIM_IC_Start_IT+0x68>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	e00b      	b.n	80033e0 <HAL_TIM_IC_Start_IT+0x80>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	d104      	bne.n	80033d8 <HAL_TIM_IC_Start_IT+0x78>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	e003      	b.n	80033e0 <HAL_TIM_IC_Start_IT+0x80>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80033e2:	7bbb      	ldrb	r3, [r7, #14]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d102      	bne.n	80033ee <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80033e8:	7b7b      	ldrb	r3, [r7, #13]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d001      	beq.n	80033f2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e0cc      	b.n	800358c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d104      	bne.n	8003402 <HAL_TIM_IC_Start_IT+0xa2>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003400:	e013      	b.n	800342a <HAL_TIM_IC_Start_IT+0xca>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b04      	cmp	r3, #4
 8003406:	d104      	bne.n	8003412 <HAL_TIM_IC_Start_IT+0xb2>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003410:	e00b      	b.n	800342a <HAL_TIM_IC_Start_IT+0xca>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b08      	cmp	r3, #8
 8003416:	d104      	bne.n	8003422 <HAL_TIM_IC_Start_IT+0xc2>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003420:	e003      	b.n	800342a <HAL_TIM_IC_Start_IT+0xca>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2202      	movs	r2, #2
 8003426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d104      	bne.n	800343a <HAL_TIM_IC_Start_IT+0xda>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003438:	e013      	b.n	8003462 <HAL_TIM_IC_Start_IT+0x102>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b04      	cmp	r3, #4
 800343e:	d104      	bne.n	800344a <HAL_TIM_IC_Start_IT+0xea>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003448:	e00b      	b.n	8003462 <HAL_TIM_IC_Start_IT+0x102>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	2b08      	cmp	r3, #8
 800344e:	d104      	bne.n	800345a <HAL_TIM_IC_Start_IT+0xfa>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003458:	e003      	b.n	8003462 <HAL_TIM_IC_Start_IT+0x102>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2202      	movs	r2, #2
 800345e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2b0c      	cmp	r3, #12
 8003466:	d841      	bhi.n	80034ec <HAL_TIM_IC_Start_IT+0x18c>
 8003468:	a201      	add	r2, pc, #4	@ (adr r2, 8003470 <HAL_TIM_IC_Start_IT+0x110>)
 800346a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346e:	bf00      	nop
 8003470:	080034a5 	.word	0x080034a5
 8003474:	080034ed 	.word	0x080034ed
 8003478:	080034ed 	.word	0x080034ed
 800347c:	080034ed 	.word	0x080034ed
 8003480:	080034b7 	.word	0x080034b7
 8003484:	080034ed 	.word	0x080034ed
 8003488:	080034ed 	.word	0x080034ed
 800348c:	080034ed 	.word	0x080034ed
 8003490:	080034c9 	.word	0x080034c9
 8003494:	080034ed 	.word	0x080034ed
 8003498:	080034ed 	.word	0x080034ed
 800349c:	080034ed 	.word	0x080034ed
 80034a0:	080034db 	.word	0x080034db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0202 	orr.w	r2, r2, #2
 80034b2:	60da      	str	r2, [r3, #12]
      break;
 80034b4:	e01d      	b.n	80034f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f042 0204 	orr.w	r2, r2, #4
 80034c4:	60da      	str	r2, [r3, #12]
      break;
 80034c6:	e014      	b.n	80034f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0208 	orr.w	r2, r2, #8
 80034d6:	60da      	str	r2, [r3, #12]
      break;
 80034d8:	e00b      	b.n	80034f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f042 0210 	orr.w	r2, r2, #16
 80034e8:	60da      	str	r2, [r3, #12]
      break;
 80034ea:	e002      	b.n	80034f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	73fb      	strb	r3, [r7, #15]
      break;
 80034f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d148      	bne.n	800358a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2201      	movs	r2, #1
 80034fe:	6839      	ldr	r1, [r7, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f000 fbe9 	bl	8003cd8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a22      	ldr	r2, [pc, #136]	@ (8003594 <HAL_TIM_IC_Start_IT+0x234>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d022      	beq.n	8003556 <HAL_TIM_IC_Start_IT+0x1f6>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003518:	d01d      	beq.n	8003556 <HAL_TIM_IC_Start_IT+0x1f6>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a1e      	ldr	r2, [pc, #120]	@ (8003598 <HAL_TIM_IC_Start_IT+0x238>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d018      	beq.n	8003556 <HAL_TIM_IC_Start_IT+0x1f6>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a1c      	ldr	r2, [pc, #112]	@ (800359c <HAL_TIM_IC_Start_IT+0x23c>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d013      	beq.n	8003556 <HAL_TIM_IC_Start_IT+0x1f6>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1b      	ldr	r2, [pc, #108]	@ (80035a0 <HAL_TIM_IC_Start_IT+0x240>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d00e      	beq.n	8003556 <HAL_TIM_IC_Start_IT+0x1f6>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a19      	ldr	r2, [pc, #100]	@ (80035a4 <HAL_TIM_IC_Start_IT+0x244>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d009      	beq.n	8003556 <HAL_TIM_IC_Start_IT+0x1f6>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a18      	ldr	r2, [pc, #96]	@ (80035a8 <HAL_TIM_IC_Start_IT+0x248>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d004      	beq.n	8003556 <HAL_TIM_IC_Start_IT+0x1f6>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a16      	ldr	r2, [pc, #88]	@ (80035ac <HAL_TIM_IC_Start_IT+0x24c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d111      	bne.n	800357a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2b06      	cmp	r3, #6
 8003566:	d010      	beq.n	800358a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0201 	orr.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003578:	e007      	b.n	800358a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f042 0201 	orr.w	r2, r2, #1
 8003588:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800358a:	7bfb      	ldrb	r3, [r7, #15]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40010000 	.word	0x40010000
 8003598:	40000400 	.word	0x40000400
 800359c:	40000800 	.word	0x40000800
 80035a0:	40000c00 	.word	0x40000c00
 80035a4:	40010400 	.word	0x40010400
 80035a8:	40014000 	.word	0x40014000
 80035ac:	40001800 	.word	0x40001800

080035b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d020      	beq.n	8003614 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d01b      	beq.n	8003614 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0202 	mvn.w	r2, #2
 80035e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f978 	bl	80038f0 <HAL_TIM_IC_CaptureCallback>
 8003600:	e005      	b.n	800360e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f96a 	bl	80038dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f97b 	bl	8003904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	2b00      	cmp	r3, #0
 800361c:	d020      	beq.n	8003660 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d01b      	beq.n	8003660 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0204 	mvn.w	r2, #4
 8003630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2202      	movs	r2, #2
 8003636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f952 	bl	80038f0 <HAL_TIM_IC_CaptureCallback>
 800364c:	e005      	b.n	800365a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f944 	bl	80038dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f955 	bl	8003904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d020      	beq.n	80036ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b00      	cmp	r3, #0
 8003672:	d01b      	beq.n	80036ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f06f 0208 	mvn.w	r2, #8
 800367c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2204      	movs	r2, #4
 8003682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f92c 	bl	80038f0 <HAL_TIM_IC_CaptureCallback>
 8003698:	e005      	b.n	80036a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f91e 	bl	80038dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f92f 	bl	8003904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f003 0310 	and.w	r3, r3, #16
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d020      	beq.n	80036f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f003 0310 	and.w	r3, r3, #16
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d01b      	beq.n	80036f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f06f 0210 	mvn.w	r2, #16
 80036c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2208      	movs	r2, #8
 80036ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f906 	bl	80038f0 <HAL_TIM_IC_CaptureCallback>
 80036e4:	e005      	b.n	80036f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f8f8 	bl	80038dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f909 	bl	8003904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00c      	beq.n	800371c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d007      	beq.n	800371c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f06f 0201 	mvn.w	r2, #1
 8003714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f8d6 	bl	80038c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00c      	beq.n	8003740 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800372c:	2b00      	cmp	r3, #0
 800372e:	d007      	beq.n	8003740 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 fb78 	bl	8003e30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00c      	beq.n	8003764 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003750:	2b00      	cmp	r3, #0
 8003752:	d007      	beq.n	8003764 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800375c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f8da 	bl	8003918 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00c      	beq.n	8003788 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b00      	cmp	r3, #0
 8003776:	d007      	beq.n	8003788 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0220 	mvn.w	r2, #32
 8003780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fb4a 	bl	8003e1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003788:	bf00      	nop
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800379c:	2300      	movs	r3, #0
 800379e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d101      	bne.n	80037ae <HAL_TIM_IC_ConfigChannel+0x1e>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e088      	b.n	80038c0 <HAL_TIM_IC_ConfigChannel+0x130>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d11b      	bne.n	80037f4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80037cc:	f000 f95a 	bl	8003a84 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699a      	ldr	r2, [r3, #24]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 020c 	bic.w	r2, r2, #12
 80037de:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6999      	ldr	r1, [r3, #24]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	619a      	str	r2, [r3, #24]
 80037f2:	e060      	b.n	80038b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d11c      	bne.n	8003834 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800380a:	f000 f9af 	bl	8003b6c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699a      	ldr	r2, [r3, #24]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800381c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6999      	ldr	r1, [r3, #24]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	021a      	lsls	r2, r3, #8
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	619a      	str	r2, [r3, #24]
 8003832:	e040      	b.n	80038b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b08      	cmp	r3, #8
 8003838:	d11b      	bne.n	8003872 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800384a:	f000 f9cc 	bl	8003be6 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	69da      	ldr	r2, [r3, #28]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 020c 	bic.w	r2, r2, #12
 800385c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	69d9      	ldr	r1, [r3, #28]
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	61da      	str	r2, [r3, #28]
 8003870:	e021      	b.n	80038b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b0c      	cmp	r3, #12
 8003876:	d11c      	bne.n	80038b2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003888:	f000 f9e9 	bl	8003c5e <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	69da      	ldr	r2, [r3, #28]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800389a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	69d9      	ldr	r1, [r3, #28]
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	021a      	lsls	r2, r3, #8
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	61da      	str	r2, [r3, #28]
 80038b0:	e001      	b.n	80038b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038be:	7dfb      	ldrb	r3, [r7, #23]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a46      	ldr	r2, [pc, #280]	@ (8003a58 <TIM_Base_SetConfig+0x12c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d013      	beq.n	800396c <TIM_Base_SetConfig+0x40>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800394a:	d00f      	beq.n	800396c <TIM_Base_SetConfig+0x40>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a43      	ldr	r2, [pc, #268]	@ (8003a5c <TIM_Base_SetConfig+0x130>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d00b      	beq.n	800396c <TIM_Base_SetConfig+0x40>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a42      	ldr	r2, [pc, #264]	@ (8003a60 <TIM_Base_SetConfig+0x134>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d007      	beq.n	800396c <TIM_Base_SetConfig+0x40>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a41      	ldr	r2, [pc, #260]	@ (8003a64 <TIM_Base_SetConfig+0x138>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d003      	beq.n	800396c <TIM_Base_SetConfig+0x40>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a40      	ldr	r2, [pc, #256]	@ (8003a68 <TIM_Base_SetConfig+0x13c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d108      	bne.n	800397e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	4313      	orrs	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a35      	ldr	r2, [pc, #212]	@ (8003a58 <TIM_Base_SetConfig+0x12c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d02b      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800398c:	d027      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a32      	ldr	r2, [pc, #200]	@ (8003a5c <TIM_Base_SetConfig+0x130>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d023      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a31      	ldr	r2, [pc, #196]	@ (8003a60 <TIM_Base_SetConfig+0x134>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d01f      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a30      	ldr	r2, [pc, #192]	@ (8003a64 <TIM_Base_SetConfig+0x138>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d01b      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a2f      	ldr	r2, [pc, #188]	@ (8003a68 <TIM_Base_SetConfig+0x13c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d017      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a2e      	ldr	r2, [pc, #184]	@ (8003a6c <TIM_Base_SetConfig+0x140>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d013      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a2d      	ldr	r2, [pc, #180]	@ (8003a70 <TIM_Base_SetConfig+0x144>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00f      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a2c      	ldr	r2, [pc, #176]	@ (8003a74 <TIM_Base_SetConfig+0x148>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00b      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a2b      	ldr	r2, [pc, #172]	@ (8003a78 <TIM_Base_SetConfig+0x14c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d007      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a2a      	ldr	r2, [pc, #168]	@ (8003a7c <TIM_Base_SetConfig+0x150>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d003      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a29      	ldr	r2, [pc, #164]	@ (8003a80 <TIM_Base_SetConfig+0x154>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d108      	bne.n	80039f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a10      	ldr	r2, [pc, #64]	@ (8003a58 <TIM_Base_SetConfig+0x12c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d003      	beq.n	8003a24 <TIM_Base_SetConfig+0xf8>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a12      	ldr	r2, [pc, #72]	@ (8003a68 <TIM_Base_SetConfig+0x13c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d103      	bne.n	8003a2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d105      	bne.n	8003a4a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f023 0201 	bic.w	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	611a      	str	r2, [r3, #16]
  }
}
 8003a4a:	bf00      	nop
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40010000 	.word	0x40010000
 8003a5c:	40000400 	.word	0x40000400
 8003a60:	40000800 	.word	0x40000800
 8003a64:	40000c00 	.word	0x40000c00
 8003a68:	40010400 	.word	0x40010400
 8003a6c:	40014000 	.word	0x40014000
 8003a70:	40014400 	.word	0x40014400
 8003a74:	40014800 	.word	0x40014800
 8003a78:	40001800 	.word	0x40001800
 8003a7c:	40001c00 	.word	0x40001c00
 8003a80:	40002000 	.word	0x40002000

08003a84 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
 8003a90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	f023 0201 	bic.w	r2, r3, #1
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4a28      	ldr	r2, [pc, #160]	@ (8003b50 <TIM_TI1_SetConfig+0xcc>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d01b      	beq.n	8003aea <TIM_TI1_SetConfig+0x66>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ab8:	d017      	beq.n	8003aea <TIM_TI1_SetConfig+0x66>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4a25      	ldr	r2, [pc, #148]	@ (8003b54 <TIM_TI1_SetConfig+0xd0>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d013      	beq.n	8003aea <TIM_TI1_SetConfig+0x66>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4a24      	ldr	r2, [pc, #144]	@ (8003b58 <TIM_TI1_SetConfig+0xd4>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00f      	beq.n	8003aea <TIM_TI1_SetConfig+0x66>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4a23      	ldr	r2, [pc, #140]	@ (8003b5c <TIM_TI1_SetConfig+0xd8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00b      	beq.n	8003aea <TIM_TI1_SetConfig+0x66>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4a22      	ldr	r2, [pc, #136]	@ (8003b60 <TIM_TI1_SetConfig+0xdc>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d007      	beq.n	8003aea <TIM_TI1_SetConfig+0x66>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4a21      	ldr	r2, [pc, #132]	@ (8003b64 <TIM_TI1_SetConfig+0xe0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d003      	beq.n	8003aea <TIM_TI1_SetConfig+0x66>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4a20      	ldr	r2, [pc, #128]	@ (8003b68 <TIM_TI1_SetConfig+0xe4>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d101      	bne.n	8003aee <TIM_TI1_SetConfig+0x6a>
 8003aea:	2301      	movs	r3, #1
 8003aec:	e000      	b.n	8003af0 <TIM_TI1_SetConfig+0x6c>
 8003aee:	2300      	movs	r3, #0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f023 0303 	bic.w	r3, r3, #3
 8003afa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	e003      	b.n	8003b0e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f043 0301 	orr.w	r3, r3, #1
 8003b0c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	f023 030a 	bic.w	r3, r3, #10
 8003b28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f003 030a 	and.w	r3, r3, #10
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	621a      	str	r2, [r3, #32]
}
 8003b42:	bf00      	nop
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	40010000 	.word	0x40010000
 8003b54:	40000400 	.word	0x40000400
 8003b58:	40000800 	.word	0x40000800
 8003b5c:	40000c00 	.word	0x40000c00
 8003b60:	40010400 	.word	0x40010400
 8003b64:	40014000 	.word	0x40014000
 8003b68:	40001800 	.word	0x40001800

08003b6c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	f023 0210 	bic.w	r2, r3, #16
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	021b      	lsls	r3, r3, #8
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003baa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	031b      	lsls	r3, r3, #12
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003bbe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	621a      	str	r2, [r3, #32]
}
 8003bda:	bf00      	nop
 8003bdc:	371c      	adds	r7, #28
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b087      	sub	sp, #28
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	60f8      	str	r0, [r7, #12]
 8003bee:	60b9      	str	r1, [r7, #8]
 8003bf0:	607a      	str	r2, [r7, #4]
 8003bf2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	f023 0303 	bic.w	r3, r3, #3
 8003c12:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c22:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003c36:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	021b      	lsls	r3, r3, #8
 8003c3c:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	621a      	str	r2, [r3, #32]
}
 8003c52:	bf00      	nop
 8003c54:	371c      	adds	r7, #28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b087      	sub	sp, #28
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	60f8      	str	r0, [r7, #12]
 8003c66:	60b9      	str	r1, [r7, #8]
 8003c68:	607a      	str	r2, [r7, #4]
 8003c6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c8a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	021b      	lsls	r3, r3, #8
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c9c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	031b      	lsls	r3, r3, #12
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003cb0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	031b      	lsls	r3, r3, #12
 8003cb6:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	621a      	str	r2, [r3, #32]
}
 8003ccc:	bf00      	nop
 8003cce:	371c      	adds	r7, #28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	f003 031f 	and.w	r3, r3, #31
 8003cea:	2201      	movs	r2, #1
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a1a      	ldr	r2, [r3, #32]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	401a      	ands	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a1a      	ldr	r2, [r3, #32]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	f003 031f 	and.w	r3, r3, #31
 8003d0a:	6879      	ldr	r1, [r7, #4]
 8003d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d10:	431a      	orrs	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	621a      	str	r2, [r3, #32]
}
 8003d16:	bf00      	nop
 8003d18:	371c      	adds	r7, #28
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
	...

08003d24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	e05a      	b.n	8003df2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a21      	ldr	r2, [pc, #132]	@ (8003e00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d022      	beq.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d88:	d01d      	beq.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a1d      	ldr	r2, [pc, #116]	@ (8003e04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d018      	beq.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a1b      	ldr	r2, [pc, #108]	@ (8003e08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d013      	beq.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a1a      	ldr	r2, [pc, #104]	@ (8003e0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d00e      	beq.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a18      	ldr	r2, [pc, #96]	@ (8003e10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d009      	beq.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a17      	ldr	r2, [pc, #92]	@ (8003e14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d004      	beq.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a15      	ldr	r2, [pc, #84]	@ (8003e18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d10c      	bne.n	8003de0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40010000 	.word	0x40010000
 8003e04:	40000400 	.word	0x40000400
 8003e08:	40000800 	.word	0x40000800
 8003e0c:	40000c00 	.word	0x40000c00
 8003e10:	40010400 	.word	0x40010400
 8003e14:	40014000 	.word	0x40014000
 8003e18:	40001800 	.word	0x40001800

08003e1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003e52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e56:	2b84      	cmp	r3, #132	@ 0x84
 8003e58:	d005      	beq.n	8003e66 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003e5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4413      	add	r3, r2
 8003e62:	3303      	adds	r3, #3
 8003e64:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003e66:	68fb      	ldr	r3, [r7, #12]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e7a:	f3ef 8305 	mrs	r3, IPSR
 8003e7e:	607b      	str	r3, [r7, #4]
  return(result);
 8003e80:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	bf14      	ite	ne
 8003e86:	2301      	movne	r3, #1
 8003e88:	2300      	moveq	r3, #0
 8003e8a:	b2db      	uxtb	r3, r3
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003e9c:	f001 fc26 	bl	80056ec <vTaskStartScheduler>
  
  return osOK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8003eaa:	f7ff ffe3 	bl	8003e74 <inHandlerMode>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8003eb4:	f001 fd3e 	bl	8005934 <xTaskGetTickCountFromISR>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	e002      	b.n	8003ec2 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8003ebc:	f001 fd2a 	bl	8005914 <xTaskGetTickCount>
 8003ec0:	4603      	mov	r3, r0
  }
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003ec6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ec8:	b089      	sub	sp, #36	@ 0x24
 8003eca:	af04      	add	r7, sp, #16
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d020      	beq.n	8003f1a <osThreadCreate+0x54>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d01c      	beq.n	8003f1a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685c      	ldr	r4, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691e      	ldr	r6, [r3, #16]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7ff ffa6 	bl	8003e44 <makeFreeRtosPriority>
 8003ef8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f02:	9202      	str	r2, [sp, #8]
 8003f04:	9301      	str	r3, [sp, #4]
 8003f06:	9100      	str	r1, [sp, #0]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	4632      	mov	r2, r6
 8003f0c:	4629      	mov	r1, r5
 8003f0e:	4620      	mov	r0, r4
 8003f10:	f001 fa1e 	bl	8005350 <xTaskCreateStatic>
 8003f14:	4603      	mov	r3, r0
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	e01c      	b.n	8003f54 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685c      	ldr	r4, [r3, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f26:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff ff88 	bl	8003e44 <makeFreeRtosPriority>
 8003f34:	4602      	mov	r2, r0
 8003f36:	f107 030c 	add.w	r3, r7, #12
 8003f3a:	9301      	str	r3, [sp, #4]
 8003f3c:	9200      	str	r2, [sp, #0]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	4632      	mov	r2, r6
 8003f42:	4629      	mov	r1, r5
 8003f44:	4620      	mov	r0, r4
 8003f46:	f001 fa63 	bl	8005410 <xTaskCreate>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d001      	beq.n	8003f54 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003f50:	2300      	movs	r3, #0
 8003f52:	e000      	b.n	8003f56 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003f54:	68fb      	ldr	r3, [r7, #12]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f5e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b084      	sub	sp, #16
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <osDelay+0x16>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	e000      	b.n	8003f76 <osDelay+0x18>
 8003f74:	2301      	movs	r3, #1
 8003f76:	4618      	mov	r0, r3
 8003f78:	f001 fb82 	bl	8005680 <vTaskDelay>
  
  return osOK;
 8003f7c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d007      	beq.n	8003fa6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	2001      	movs	r0, #1
 8003f9e:	f000 fb92 	bl	80046c6 <xQueueCreateMutexStatic>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	e003      	b.n	8003fae <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003fa6:	2001      	movs	r0, #1
 8003fa8:	f000 fb75 	bl	8004696 <xQueueCreateMutex>
 8003fac:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
	...

08003fb8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <osMutexWait+0x18>
    return osErrorParameter;
 8003fcc:	2380      	movs	r3, #128	@ 0x80
 8003fce:	e03a      	b.n	8004046 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fda:	d103      	bne.n	8003fe4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8003fdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	e009      	b.n	8003ff8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d006      	beq.n	8003ff8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <osMutexWait+0x40>
      ticks = 1;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003ff8:	f7ff ff3c 	bl	8003e74 <inHandlerMode>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d017      	beq.n	8004032 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004002:	f107 0308 	add.w	r3, r7, #8
 8004006:	461a      	mov	r2, r3
 8004008:	2100      	movs	r1, #0
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 ff98 	bl	8004f40 <xQueueReceiveFromISR>
 8004010:	4603      	mov	r3, r0
 8004012:	2b01      	cmp	r3, #1
 8004014:	d001      	beq.n	800401a <osMutexWait+0x62>
      return osErrorOS;
 8004016:	23ff      	movs	r3, #255	@ 0xff
 8004018:	e015      	b.n	8004046 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d011      	beq.n	8004044 <osMutexWait+0x8c>
 8004020:	4b0b      	ldr	r3, [pc, #44]	@ (8004050 <osMutexWait+0x98>)
 8004022:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	e008      	b.n	8004044 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004032:	68f9      	ldr	r1, [r7, #12]
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fe73 	bl	8004d20 <xQueueSemaphoreTake>
 800403a:	4603      	mov	r3, r0
 800403c:	2b01      	cmp	r3, #1
 800403e:	d001      	beq.n	8004044 <osMutexWait+0x8c>
    return osErrorOS;
 8004040:	23ff      	movs	r3, #255	@ 0xff
 8004042:	e000      	b.n	8004046 <osMutexWait+0x8e>
  }
  
  return osOK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	e000ed04 	.word	0xe000ed04

08004054 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800405c:	2300      	movs	r3, #0
 800405e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004060:	2300      	movs	r3, #0
 8004062:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004064:	f7ff ff06 	bl	8003e74 <inHandlerMode>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d016      	beq.n	800409c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800406e:	f107 0308 	add.w	r3, r7, #8
 8004072:	4619      	mov	r1, r3
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 fce1 	bl	8004a3c <xQueueGiveFromISR>
 800407a:	4603      	mov	r3, r0
 800407c:	2b01      	cmp	r3, #1
 800407e:	d001      	beq.n	8004084 <osMutexRelease+0x30>
      return osErrorOS;
 8004080:	23ff      	movs	r3, #255	@ 0xff
 8004082:	e017      	b.n	80040b4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d013      	beq.n	80040b2 <osMutexRelease+0x5e>
 800408a:	4b0c      	ldr	r3, [pc, #48]	@ (80040bc <osMutexRelease+0x68>)
 800408c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	f3bf 8f6f 	isb	sy
 800409a:	e00a      	b.n	80040b2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800409c:	2300      	movs	r3, #0
 800409e:	2200      	movs	r2, #0
 80040a0:	2100      	movs	r1, #0
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fb2a 	bl	80046fc <xQueueGenericSend>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d001      	beq.n	80040b2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80040ae:	23ff      	movs	r3, #255	@ 0xff
 80040b0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80040b2:	68fb      	ldr	r3, [r7, #12]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	e000ed04 	.word	0xe000ed04

080040c0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80040c0:	b590      	push	{r4, r7, lr}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af02      	add	r7, sp, #8
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d011      	beq.n	80040f6 <osMessageCreate+0x36>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00d      	beq.n	80040f6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6859      	ldr	r1, [r3, #4]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689a      	ldr	r2, [r3, #8]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	2400      	movs	r4, #0
 80040ec:	9400      	str	r4, [sp, #0]
 80040ee:	f000 f9e1 	bl	80044b4 <xQueueGenericCreateStatic>
 80040f2:	4603      	mov	r3, r0
 80040f4:	e008      	b.n	8004108 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6818      	ldr	r0, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	4619      	mov	r1, r3
 8004102:	f000 fa54 	bl	80045ae <xQueueGenericCreate>
 8004106:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004108:	4618      	mov	r0, r3
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	bd90      	pop	{r4, r7, pc}

08004110 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800411c:	2300      	movs	r3, #0
 800411e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <osMessagePut+0x1e>
    ticks = 1;
 800412a:	2301      	movs	r3, #1
 800412c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800412e:	f7ff fea1 	bl	8003e74 <inHandlerMode>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d018      	beq.n	800416a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004138:	f107 0210 	add.w	r2, r7, #16
 800413c:	f107 0108 	add.w	r1, r7, #8
 8004140:	2300      	movs	r3, #0
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 fbdc 	bl	8004900 <xQueueGenericSendFromISR>
 8004148:	4603      	mov	r3, r0
 800414a:	2b01      	cmp	r3, #1
 800414c:	d001      	beq.n	8004152 <osMessagePut+0x42>
      return osErrorOS;
 800414e:	23ff      	movs	r3, #255	@ 0xff
 8004150:	e018      	b.n	8004184 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d014      	beq.n	8004182 <osMessagePut+0x72>
 8004158:	4b0c      	ldr	r3, [pc, #48]	@ (800418c <osMessagePut+0x7c>)
 800415a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	e00b      	b.n	8004182 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800416a:	f107 0108 	add.w	r1, r7, #8
 800416e:	2300      	movs	r3, #0
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 fac2 	bl	80046fc <xQueueGenericSend>
 8004178:	4603      	mov	r3, r0
 800417a:	2b01      	cmp	r3, #1
 800417c:	d001      	beq.n	8004182 <osMessagePut+0x72>
      return osErrorOS;
 800417e:	23ff      	movs	r3, #255	@ 0xff
 8004180:	e000      	b.n	8004184 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	e000ed04 	.word	0xe000ed04

08004190 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004190:	b590      	push	{r4, r7, lr}
 8004192:	b08b      	sub	sp, #44	@ 0x2c
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80041a0:	2300      	movs	r3, #0
 80041a2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10a      	bne.n	80041c0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80041aa:	2380      	movs	r3, #128	@ 0x80
 80041ac:	617b      	str	r3, [r7, #20]
    return event;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	461c      	mov	r4, r3
 80041b2:	f107 0314 	add.w	r3, r7, #20
 80041b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80041ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80041be:	e054      	b.n	800426a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80041c0:	2300      	movs	r3, #0
 80041c2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041ce:	d103      	bne.n	80041d8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80041d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80041d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80041d6:	e009      	b.n	80041ec <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d006      	beq.n	80041ec <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80041e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <osMessageGet+0x5c>
      ticks = 1;
 80041e8:	2301      	movs	r3, #1
 80041ea:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80041ec:	f7ff fe42 	bl	8003e74 <inHandlerMode>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d01c      	beq.n	8004230 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80041f6:	f107 0220 	add.w	r2, r7, #32
 80041fa:	f107 0314 	add.w	r3, r7, #20
 80041fe:	3304      	adds	r3, #4
 8004200:	4619      	mov	r1, r3
 8004202:	68b8      	ldr	r0, [r7, #8]
 8004204:	f000 fe9c 	bl	8004f40 <xQueueReceiveFromISR>
 8004208:	4603      	mov	r3, r0
 800420a:	2b01      	cmp	r3, #1
 800420c:	d102      	bne.n	8004214 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800420e:	2310      	movs	r3, #16
 8004210:	617b      	str	r3, [r7, #20]
 8004212:	e001      	b.n	8004218 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004214:	2300      	movs	r3, #0
 8004216:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d01d      	beq.n	800425a <osMessageGet+0xca>
 800421e:	4b15      	ldr	r3, [pc, #84]	@ (8004274 <osMessageGet+0xe4>)
 8004220:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	e014      	b.n	800425a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004230:	f107 0314 	add.w	r3, r7, #20
 8004234:	3304      	adds	r3, #4
 8004236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004238:	4619      	mov	r1, r3
 800423a:	68b8      	ldr	r0, [r7, #8]
 800423c:	f000 fc8e 	bl	8004b5c <xQueueReceive>
 8004240:	4603      	mov	r3, r0
 8004242:	2b01      	cmp	r3, #1
 8004244:	d102      	bne.n	800424c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004246:	2310      	movs	r3, #16
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	e006      	b.n	800425a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800424c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <osMessageGet+0xc6>
 8004252:	2300      	movs	r3, #0
 8004254:	e000      	b.n	8004258 <osMessageGet+0xc8>
 8004256:	2340      	movs	r3, #64	@ 0x40
 8004258:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	461c      	mov	r4, r3
 800425e:	f107 0314 	add.w	r3, r7, #20
 8004262:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004266:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	372c      	adds	r7, #44	@ 0x2c
 800426e:	46bd      	mov	sp, r7
 8004270:	bd90      	pop	{r4, r7, pc}
 8004272:	bf00      	nop
 8004274:	e000ed04 	.word	0xe000ed04

08004278 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f103 0208 	add.w	r2, r3, #8
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004290:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f103 0208 	add.w	r2, r3, #8
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f103 0208 	add.w	r2, r3, #8
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042d2:	b480      	push	{r7}
 80042d4:	b085      	sub	sp, #20
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	1c5a      	adds	r2, r3, #1
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	601a      	str	r2, [r3, #0]
}
 800430e:	bf00      	nop
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800431a:	b480      	push	{r7}
 800431c:	b085      	sub	sp, #20
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004330:	d103      	bne.n	800433a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	e00c      	b.n	8004354 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	3308      	adds	r3, #8
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	e002      	b.n	8004348 <vListInsert+0x2e>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	429a      	cmp	r2, r3
 8004352:	d2f6      	bcs.n	8004342 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	601a      	str	r2, [r3, #0]
}
 8004380:	bf00      	nop
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6892      	ldr	r2, [r2, #8]
 80043a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6852      	ldr	r2, [r2, #4]
 80043ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d103      	bne.n	80043c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	1e5a      	subs	r2, r3, #1
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10b      	bne.n	800440c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004406:	bf00      	nop
 8004408:	bf00      	nop
 800440a:	e7fd      	b.n	8004408 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800440c:	f002 fc64 	bl	8006cd8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004418:	68f9      	ldr	r1, [r7, #12]
 800441a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800441c:	fb01 f303 	mul.w	r3, r1, r3
 8004420:	441a      	add	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800443c:	3b01      	subs	r3, #1
 800443e:	68f9      	ldr	r1, [r7, #12]
 8004440:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004442:	fb01 f303 	mul.w	r3, r1, r3
 8004446:	441a      	add	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	22ff      	movs	r2, #255	@ 0xff
 8004450:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	22ff      	movs	r2, #255	@ 0xff
 8004458:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d114      	bne.n	800448c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d01a      	beq.n	80044a0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	3310      	adds	r3, #16
 800446e:	4618      	mov	r0, r3
 8004470:	f001 fbda 	bl	8005c28 <xTaskRemoveFromEventList>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d012      	beq.n	80044a0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800447a:	4b0d      	ldr	r3, [pc, #52]	@ (80044b0 <xQueueGenericReset+0xd0>)
 800447c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	e009      	b.n	80044a0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	3310      	adds	r3, #16
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff fef1 	bl	8004278 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	3324      	adds	r3, #36	@ 0x24
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff feec 	bl	8004278 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80044a0:	f002 fc4c 	bl	8006d3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80044a4:	2301      	movs	r3, #1
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	e000ed04 	.word	0xe000ed04

080044b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b08e      	sub	sp, #56	@ 0x38
 80044b8:	af02      	add	r7, sp, #8
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
 80044c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10b      	bne.n	80044e0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80044c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044cc:	f383 8811 	msr	BASEPRI, r3
 80044d0:	f3bf 8f6f 	isb	sy
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80044da:	bf00      	nop
 80044dc:	bf00      	nop
 80044de:	e7fd      	b.n	80044dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10b      	bne.n	80044fe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80044e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ea:	f383 8811 	msr	BASEPRI, r3
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80044f8:	bf00      	nop
 80044fa:	bf00      	nop
 80044fc:	e7fd      	b.n	80044fa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <xQueueGenericCreateStatic+0x56>
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <xQueueGenericCreateStatic+0x5a>
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <xQueueGenericCreateStatic+0x5c>
 800450e:	2300      	movs	r3, #0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10b      	bne.n	800452c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	623b      	str	r3, [r7, #32]
}
 8004526:	bf00      	nop
 8004528:	bf00      	nop
 800452a:	e7fd      	b.n	8004528 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d102      	bne.n	8004538 <xQueueGenericCreateStatic+0x84>
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <xQueueGenericCreateStatic+0x88>
 8004538:	2301      	movs	r3, #1
 800453a:	e000      	b.n	800453e <xQueueGenericCreateStatic+0x8a>
 800453c:	2300      	movs	r3, #0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10b      	bne.n	800455a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	61fb      	str	r3, [r7, #28]
}
 8004554:	bf00      	nop
 8004556:	bf00      	nop
 8004558:	e7fd      	b.n	8004556 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800455a:	2348      	movs	r3, #72	@ 0x48
 800455c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2b48      	cmp	r3, #72	@ 0x48
 8004562:	d00b      	beq.n	800457c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	61bb      	str	r3, [r7, #24]
}
 8004576:	bf00      	nop
 8004578:	bf00      	nop
 800457a:	e7fd      	b.n	8004578 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800457c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00d      	beq.n	80045a4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004590:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	4613      	mov	r3, r2
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	68b9      	ldr	r1, [r7, #8]
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 f840 	bl	8004624 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80045a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3730      	adds	r7, #48	@ 0x30
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b08a      	sub	sp, #40	@ 0x28
 80045b2:	af02      	add	r7, sp, #8
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	4613      	mov	r3, r2
 80045ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10b      	bne.n	80045da <xQueueGenericCreate+0x2c>
	__asm volatile
 80045c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	613b      	str	r3, [r7, #16]
}
 80045d4:	bf00      	nop
 80045d6:	bf00      	nop
 80045d8:	e7fd      	b.n	80045d6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	fb02 f303 	mul.w	r3, r2, r3
 80045e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	3348      	adds	r3, #72	@ 0x48
 80045e8:	4618      	mov	r0, r3
 80045ea:	f002 fc97 	bl	8006f1c <pvPortMalloc>
 80045ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d011      	beq.n	800461a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	3348      	adds	r3, #72	@ 0x48
 80045fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004608:	79fa      	ldrb	r2, [r7, #7]
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	4613      	mov	r3, r2
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	68b9      	ldr	r1, [r7, #8]
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 f805 	bl	8004624 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800461a:	69bb      	ldr	r3, [r7, #24]
	}
 800461c:	4618      	mov	r0, r3
 800461e:	3720      	adds	r7, #32
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
 8004630:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d103      	bne.n	8004640 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	e002      	b.n	8004646 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004652:	2101      	movs	r1, #1
 8004654:	69b8      	ldr	r0, [r7, #24]
 8004656:	f7ff fec3 	bl	80043e0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800465a:	bf00      	nop
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004662:	b580      	push	{r7, lr}
 8004664:	b082      	sub	sp, #8
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00e      	beq.n	800468e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004682:	2300      	movs	r3, #0
 8004684:	2200      	movs	r2, #0
 8004686:	2100      	movs	r1, #0
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f837 	bl	80046fc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800468e:	bf00      	nop
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004696:	b580      	push	{r7, lr}
 8004698:	b086      	sub	sp, #24
 800469a:	af00      	add	r7, sp, #0
 800469c:	4603      	mov	r3, r0
 800469e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80046a0:	2301      	movs	r3, #1
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	2300      	movs	r3, #0
 80046a6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	461a      	mov	r2, r3
 80046ac:	6939      	ldr	r1, [r7, #16]
 80046ae:	6978      	ldr	r0, [r7, #20]
 80046b0:	f7ff ff7d 	bl	80045ae <xQueueGenericCreate>
 80046b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f7ff ffd3 	bl	8004662 <prvInitialiseMutex>

		return xNewQueue;
 80046bc:	68fb      	ldr	r3, [r7, #12]
	}
 80046be:	4618      	mov	r0, r3
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b088      	sub	sp, #32
 80046ca:	af02      	add	r7, sp, #8
 80046cc:	4603      	mov	r3, r0
 80046ce:	6039      	str	r1, [r7, #0]
 80046d0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80046d2:	2301      	movs	r3, #1
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	2300      	movs	r3, #0
 80046d8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2200      	movs	r2, #0
 80046e2:	6939      	ldr	r1, [r7, #16]
 80046e4:	6978      	ldr	r0, [r7, #20]
 80046e6:	f7ff fee5 	bl	80044b4 <xQueueGenericCreateStatic>
 80046ea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f7ff ffb8 	bl	8004662 <prvInitialiseMutex>

		return xNewQueue;
 80046f2:	68fb      	ldr	r3, [r7, #12]
	}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b08e      	sub	sp, #56	@ 0x38
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
 8004708:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800470a:	2300      	movs	r3, #0
 800470c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10b      	bne.n	8004730 <xQueueGenericSend+0x34>
	__asm volatile
 8004718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800472a:	bf00      	nop
 800472c:	bf00      	nop
 800472e:	e7fd      	b.n	800472c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d103      	bne.n	800473e <xQueueGenericSend+0x42>
 8004736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <xQueueGenericSend+0x46>
 800473e:	2301      	movs	r3, #1
 8004740:	e000      	b.n	8004744 <xQueueGenericSend+0x48>
 8004742:	2300      	movs	r3, #0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10b      	bne.n	8004760 <xQueueGenericSend+0x64>
	__asm volatile
 8004748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800474c:	f383 8811 	msr	BASEPRI, r3
 8004750:	f3bf 8f6f 	isb	sy
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800475a:	bf00      	nop
 800475c:	bf00      	nop
 800475e:	e7fd      	b.n	800475c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	2b02      	cmp	r3, #2
 8004764:	d103      	bne.n	800476e <xQueueGenericSend+0x72>
 8004766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800476a:	2b01      	cmp	r3, #1
 800476c:	d101      	bne.n	8004772 <xQueueGenericSend+0x76>
 800476e:	2301      	movs	r3, #1
 8004770:	e000      	b.n	8004774 <xQueueGenericSend+0x78>
 8004772:	2300      	movs	r3, #0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10b      	bne.n	8004790 <xQueueGenericSend+0x94>
	__asm volatile
 8004778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800477c:	f383 8811 	msr	BASEPRI, r3
 8004780:	f3bf 8f6f 	isb	sy
 8004784:	f3bf 8f4f 	dsb	sy
 8004788:	623b      	str	r3, [r7, #32]
}
 800478a:	bf00      	nop
 800478c:	bf00      	nop
 800478e:	e7fd      	b.n	800478c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004790:	f001 fc0a 	bl	8005fa8 <xTaskGetSchedulerState>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d102      	bne.n	80047a0 <xQueueGenericSend+0xa4>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <xQueueGenericSend+0xa8>
 80047a0:	2301      	movs	r3, #1
 80047a2:	e000      	b.n	80047a6 <xQueueGenericSend+0xaa>
 80047a4:	2300      	movs	r3, #0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10b      	bne.n	80047c2 <xQueueGenericSend+0xc6>
	__asm volatile
 80047aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	61fb      	str	r3, [r7, #28]
}
 80047bc:	bf00      	nop
 80047be:	bf00      	nop
 80047c0:	e7fd      	b.n	80047be <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047c2:	f002 fa89 	bl	8006cd8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d302      	bcc.n	80047d8 <xQueueGenericSend+0xdc>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d129      	bne.n	800482c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	68b9      	ldr	r1, [r7, #8]
 80047dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047de:	f000 fc49 	bl	8005074 <prvCopyDataToQueue>
 80047e2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d010      	beq.n	800480e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ee:	3324      	adds	r3, #36	@ 0x24
 80047f0:	4618      	mov	r0, r3
 80047f2:	f001 fa19 	bl	8005c28 <xTaskRemoveFromEventList>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d013      	beq.n	8004824 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80047fc:	4b3f      	ldr	r3, [pc, #252]	@ (80048fc <xQueueGenericSend+0x200>)
 80047fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	e00a      	b.n	8004824 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800480e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004810:	2b00      	cmp	r3, #0
 8004812:	d007      	beq.n	8004824 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004814:	4b39      	ldr	r3, [pc, #228]	@ (80048fc <xQueueGenericSend+0x200>)
 8004816:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004824:	f002 fa8a 	bl	8006d3c <vPortExitCritical>
				return pdPASS;
 8004828:	2301      	movs	r3, #1
 800482a:	e063      	b.n	80048f4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d103      	bne.n	800483a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004832:	f002 fa83 	bl	8006d3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004836:	2300      	movs	r3, #0
 8004838:	e05c      	b.n	80048f4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800483a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800483c:	2b00      	cmp	r3, #0
 800483e:	d106      	bne.n	800484e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004840:	f107 0314 	add.w	r3, r7, #20
 8004844:	4618      	mov	r0, r3
 8004846:	f001 fa53 	bl	8005cf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800484a:	2301      	movs	r3, #1
 800484c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800484e:	f002 fa75 	bl	8006d3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004852:	f000 ffb3 	bl	80057bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004856:	f002 fa3f 	bl	8006cd8 <vPortEnterCritical>
 800485a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004860:	b25b      	sxtb	r3, r3
 8004862:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004866:	d103      	bne.n	8004870 <xQueueGenericSend+0x174>
 8004868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004872:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004876:	b25b      	sxtb	r3, r3
 8004878:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800487c:	d103      	bne.n	8004886 <xQueueGenericSend+0x18a>
 800487e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004886:	f002 fa59 	bl	8006d3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800488a:	1d3a      	adds	r2, r7, #4
 800488c:	f107 0314 	add.w	r3, r7, #20
 8004890:	4611      	mov	r1, r2
 8004892:	4618      	mov	r0, r3
 8004894:	f001 fa42 	bl	8005d1c <xTaskCheckForTimeOut>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d124      	bne.n	80048e8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800489e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048a0:	f000 fce0 	bl	8005264 <prvIsQueueFull>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d018      	beq.n	80048dc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80048aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ac:	3310      	adds	r3, #16
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	4611      	mov	r1, r2
 80048b2:	4618      	mov	r0, r3
 80048b4:	f001 f966 	bl	8005b84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80048b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048ba:	f000 fc6b 	bl	8005194 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80048be:	f000 ff8b 	bl	80057d8 <xTaskResumeAll>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f47f af7c 	bne.w	80047c2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80048ca:	4b0c      	ldr	r3, [pc, #48]	@ (80048fc <xQueueGenericSend+0x200>)
 80048cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	e772      	b.n	80047c2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80048dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048de:	f000 fc59 	bl	8005194 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048e2:	f000 ff79 	bl	80057d8 <xTaskResumeAll>
 80048e6:	e76c      	b.n	80047c2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80048e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048ea:	f000 fc53 	bl	8005194 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048ee:	f000 ff73 	bl	80057d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80048f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3738      	adds	r7, #56	@ 0x38
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	e000ed04 	.word	0xe000ed04

08004900 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b090      	sub	sp, #64	@ 0x40
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
 800490c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10b      	bne.n	8004930 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800492a:	bf00      	nop
 800492c:	bf00      	nop
 800492e:	e7fd      	b.n	800492c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d103      	bne.n	800493e <xQueueGenericSendFromISR+0x3e>
 8004936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <xQueueGenericSendFromISR+0x42>
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <xQueueGenericSendFromISR+0x44>
 8004942:	2300      	movs	r3, #0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10b      	bne.n	8004960 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800495a:	bf00      	nop
 800495c:	bf00      	nop
 800495e:	e7fd      	b.n	800495c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2b02      	cmp	r3, #2
 8004964:	d103      	bne.n	800496e <xQueueGenericSendFromISR+0x6e>
 8004966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <xQueueGenericSendFromISR+0x72>
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <xQueueGenericSendFromISR+0x74>
 8004972:	2300      	movs	r3, #0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10b      	bne.n	8004990 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800497c:	f383 8811 	msr	BASEPRI, r3
 8004980:	f3bf 8f6f 	isb	sy
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	623b      	str	r3, [r7, #32]
}
 800498a:	bf00      	nop
 800498c:	bf00      	nop
 800498e:	e7fd      	b.n	800498c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004990:	f002 fa82 	bl	8006e98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004994:	f3ef 8211 	mrs	r2, BASEPRI
 8004998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	61fa      	str	r2, [r7, #28]
 80049aa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80049ac:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049ae:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d302      	bcc.n	80049c2 <xQueueGenericSendFromISR+0xc2>
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d12f      	bne.n	8004a22 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80049c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	68b9      	ldr	r1, [r7, #8]
 80049d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80049d8:	f000 fb4c 	bl	8005074 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80049dc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80049e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049e4:	d112      	bne.n	8004a0c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d016      	beq.n	8004a1c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f0:	3324      	adds	r3, #36	@ 0x24
 80049f2:	4618      	mov	r0, r3
 80049f4:	f001 f918 	bl	8005c28 <xTaskRemoveFromEventList>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00e      	beq.n	8004a1c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00b      	beq.n	8004a1c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	e007      	b.n	8004a1c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004a10:	3301      	adds	r3, #1
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	b25a      	sxtb	r2, r3
 8004a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004a20:	e001      	b.n	8004a26 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a28:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a30:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3740      	adds	r7, #64	@ 0x40
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b08e      	sub	sp, #56	@ 0x38
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10b      	bne.n	8004a68 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8004a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	623b      	str	r3, [r7, #32]
}
 8004a62:	bf00      	nop
 8004a64:	bf00      	nop
 8004a66:	e7fd      	b.n	8004a64 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00b      	beq.n	8004a88 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	61fb      	str	r3, [r7, #28]
}
 8004a82:	bf00      	nop
 8004a84:	bf00      	nop
 8004a86:	e7fd      	b.n	8004a84 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d103      	bne.n	8004a98 <xQueueGiveFromISR+0x5c>
 8004a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <xQueueGiveFromISR+0x60>
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e000      	b.n	8004a9e <xQueueGiveFromISR+0x62>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10b      	bne.n	8004aba <xQueueGiveFromISR+0x7e>
	__asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	61bb      	str	r3, [r7, #24]
}
 8004ab4:	bf00      	nop
 8004ab6:	bf00      	nop
 8004ab8:	e7fd      	b.n	8004ab6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004aba:	f002 f9ed 	bl	8006e98 <vPortValidateInterruptPriority>
	__asm volatile
 8004abe:	f3ef 8211 	mrs	r2, BASEPRI
 8004ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac6:	f383 8811 	msr	BASEPRI, r3
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	617a      	str	r2, [r7, #20]
 8004ad4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004ad6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ade:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ae4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d22b      	bcs.n	8004b42 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004af0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004afc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004b00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b04:	d112      	bne.n	8004b2c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d016      	beq.n	8004b3c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b10:	3324      	adds	r3, #36	@ 0x24
 8004b12:	4618      	mov	r0, r3
 8004b14:	f001 f888 	bl	8005c28 <xTaskRemoveFromEventList>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00e      	beq.n	8004b3c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00b      	beq.n	8004b3c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2201      	movs	r2, #1
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	e007      	b.n	8004b3c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b30:	3301      	adds	r3, #1
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	b25a      	sxtb	r2, r3
 8004b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b40:	e001      	b.n	8004b46 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b42:	2300      	movs	r3, #0
 8004b44:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b48:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f383 8811 	msr	BASEPRI, r3
}
 8004b50:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3738      	adds	r7, #56	@ 0x38
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b08c      	sub	sp, #48	@ 0x30
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10b      	bne.n	8004b8e <xQueueReceive+0x32>
	__asm volatile
 8004b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	623b      	str	r3, [r7, #32]
}
 8004b88:	bf00      	nop
 8004b8a:	bf00      	nop
 8004b8c:	e7fd      	b.n	8004b8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d103      	bne.n	8004b9c <xQueueReceive+0x40>
 8004b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <xQueueReceive+0x44>
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e000      	b.n	8004ba2 <xQueueReceive+0x46>
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10b      	bne.n	8004bbe <xQueueReceive+0x62>
	__asm volatile
 8004ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004baa:	f383 8811 	msr	BASEPRI, r3
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f3bf 8f4f 	dsb	sy
 8004bb6:	61fb      	str	r3, [r7, #28]
}
 8004bb8:	bf00      	nop
 8004bba:	bf00      	nop
 8004bbc:	e7fd      	b.n	8004bba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bbe:	f001 f9f3 	bl	8005fa8 <xTaskGetSchedulerState>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d102      	bne.n	8004bce <xQueueReceive+0x72>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <xQueueReceive+0x76>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e000      	b.n	8004bd4 <xQueueReceive+0x78>
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10b      	bne.n	8004bf0 <xQueueReceive+0x94>
	__asm volatile
 8004bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bdc:	f383 8811 	msr	BASEPRI, r3
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	61bb      	str	r3, [r7, #24]
}
 8004bea:	bf00      	nop
 8004bec:	bf00      	nop
 8004bee:	e7fd      	b.n	8004bec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bf0:	f002 f872 	bl	8006cd8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d01f      	beq.n	8004c40 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c00:	68b9      	ldr	r1, [r7, #8]
 8004c02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c04:	f000 faa0 	bl	8005148 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0a:	1e5a      	subs	r2, r3, #1
 8004c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c0e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00f      	beq.n	8004c38 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1a:	3310      	adds	r3, #16
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f001 f803 	bl	8005c28 <xTaskRemoveFromEventList>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d007      	beq.n	8004c38 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c28:	4b3c      	ldr	r3, [pc, #240]	@ (8004d1c <xQueueReceive+0x1c0>)
 8004c2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c38:	f002 f880 	bl	8006d3c <vPortExitCritical>
				return pdPASS;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e069      	b.n	8004d14 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d103      	bne.n	8004c4e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c46:	f002 f879 	bl	8006d3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	e062      	b.n	8004d14 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d106      	bne.n	8004c62 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c54:	f107 0310 	add.w	r3, r7, #16
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f001 f849 	bl	8005cf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c62:	f002 f86b 	bl	8006d3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c66:	f000 fda9 	bl	80057bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c6a:	f002 f835 	bl	8006cd8 <vPortEnterCritical>
 8004c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c74:	b25b      	sxtb	r3, r3
 8004c76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c7a:	d103      	bne.n	8004c84 <xQueueReceive+0x128>
 8004c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c8a:	b25b      	sxtb	r3, r3
 8004c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c90:	d103      	bne.n	8004c9a <xQueueReceive+0x13e>
 8004c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c9a:	f002 f84f 	bl	8006d3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c9e:	1d3a      	adds	r2, r7, #4
 8004ca0:	f107 0310 	add.w	r3, r7, #16
 8004ca4:	4611      	mov	r1, r2
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f001 f838 	bl	8005d1c <xTaskCheckForTimeOut>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d123      	bne.n	8004cfa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cb4:	f000 fac0 	bl	8005238 <prvIsQueueEmpty>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d017      	beq.n	8004cee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc0:	3324      	adds	r3, #36	@ 0x24
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	4611      	mov	r1, r2
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 ff5c 	bl	8005b84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ccc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cce:	f000 fa61 	bl	8005194 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004cd2:	f000 fd81 	bl	80057d8 <xTaskResumeAll>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d189      	bne.n	8004bf0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8004d1c <xQueueReceive+0x1c0>)
 8004cde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	e780      	b.n	8004bf0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004cee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cf0:	f000 fa50 	bl	8005194 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cf4:	f000 fd70 	bl	80057d8 <xTaskResumeAll>
 8004cf8:	e77a      	b.n	8004bf0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004cfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cfc:	f000 fa4a 	bl	8005194 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d00:	f000 fd6a 	bl	80057d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d06:	f000 fa97 	bl	8005238 <prvIsQueueEmpty>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f43f af6f 	beq.w	8004bf0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d12:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3730      	adds	r7, #48	@ 0x30
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	e000ed04 	.word	0xe000ed04

08004d20 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b08e      	sub	sp, #56	@ 0x38
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004d32:	2300      	movs	r3, #0
 8004d34:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10b      	bne.n	8004d54 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d40:	f383 8811 	msr	BASEPRI, r3
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	623b      	str	r3, [r7, #32]
}
 8004d4e:	bf00      	nop
 8004d50:	bf00      	nop
 8004d52:	e7fd      	b.n	8004d50 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00b      	beq.n	8004d74 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	61fb      	str	r3, [r7, #28]
}
 8004d6e:	bf00      	nop
 8004d70:	bf00      	nop
 8004d72:	e7fd      	b.n	8004d70 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d74:	f001 f918 	bl	8005fa8 <xTaskGetSchedulerState>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d102      	bne.n	8004d84 <xQueueSemaphoreTake+0x64>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <xQueueSemaphoreTake+0x68>
 8004d84:	2301      	movs	r3, #1
 8004d86:	e000      	b.n	8004d8a <xQueueSemaphoreTake+0x6a>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10b      	bne.n	8004da6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	61bb      	str	r3, [r7, #24]
}
 8004da0:	bf00      	nop
 8004da2:	bf00      	nop
 8004da4:	e7fd      	b.n	8004da2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004da6:	f001 ff97 	bl	8006cd8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dae:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d024      	beq.n	8004e00 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db8:	1e5a      	subs	r2, r3, #1
 8004dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dbc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d104      	bne.n	8004dd0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004dc6:	f001 fa9b 	bl	8006300 <pvTaskIncrementMutexHeldCount>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dce:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00f      	beq.n	8004df8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dda:	3310      	adds	r3, #16
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f000 ff23 	bl	8005c28 <xTaskRemoveFromEventList>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d007      	beq.n	8004df8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004de8:	4b54      	ldr	r3, [pc, #336]	@ (8004f3c <xQueueSemaphoreTake+0x21c>)
 8004dea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004df8:	f001 ffa0 	bl	8006d3c <vPortExitCritical>
				return pdPASS;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e098      	b.n	8004f32 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d112      	bne.n	8004e2c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00b      	beq.n	8004e24 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	617b      	str	r3, [r7, #20]
}
 8004e1e:	bf00      	nop
 8004e20:	bf00      	nop
 8004e22:	e7fd      	b.n	8004e20 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004e24:	f001 ff8a 	bl	8006d3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	e082      	b.n	8004f32 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d106      	bne.n	8004e40 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e32:	f107 030c 	add.w	r3, r7, #12
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 ff5a 	bl	8005cf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e40:	f001 ff7c 	bl	8006d3c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e44:	f000 fcba 	bl	80057bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e48:	f001 ff46 	bl	8006cd8 <vPortEnterCritical>
 8004e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e4e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e52:	b25b      	sxtb	r3, r3
 8004e54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e58:	d103      	bne.n	8004e62 <xQueueSemaphoreTake+0x142>
 8004e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e68:	b25b      	sxtb	r3, r3
 8004e6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e6e:	d103      	bne.n	8004e78 <xQueueSemaphoreTake+0x158>
 8004e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e78:	f001 ff60 	bl	8006d3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e7c:	463a      	mov	r2, r7
 8004e7e:	f107 030c 	add.w	r3, r7, #12
 8004e82:	4611      	mov	r1, r2
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 ff49 	bl	8005d1c <xTaskCheckForTimeOut>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d132      	bne.n	8004ef6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e92:	f000 f9d1 	bl	8005238 <prvIsQueueEmpty>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d026      	beq.n	8004eea <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d109      	bne.n	8004eb8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004ea4:	f001 ff18 	bl	8006cd8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f001 f899 	bl	8005fe4 <xTaskPriorityInherit>
 8004eb2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004eb4:	f001 ff42 	bl	8006d3c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eba:	3324      	adds	r3, #36	@ 0x24
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 fe5f 	bl	8005b84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ec6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ec8:	f000 f964 	bl	8005194 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ecc:	f000 fc84 	bl	80057d8 <xTaskResumeAll>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f47f af67 	bne.w	8004da6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004ed8:	4b18      	ldr	r3, [pc, #96]	@ (8004f3c <xQueueSemaphoreTake+0x21c>)
 8004eda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	e75d      	b.n	8004da6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004eea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004eec:	f000 f952 	bl	8005194 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ef0:	f000 fc72 	bl	80057d8 <xTaskResumeAll>
 8004ef4:	e757      	b.n	8004da6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004ef6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ef8:	f000 f94c 	bl	8005194 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004efc:	f000 fc6c 	bl	80057d8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004f02:	f000 f999 	bl	8005238 <prvIsQueueEmpty>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f43f af4c 	beq.w	8004da6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00d      	beq.n	8004f30 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004f14:	f001 fee0 	bl	8006cd8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004f18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004f1a:	f000 f893 	bl	8005044 <prvGetDisinheritPriorityAfterTimeout>
 8004f1e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f26:	4618      	mov	r0, r3
 8004f28:	f001 f95a 	bl	80061e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004f2c:	f001 ff06 	bl	8006d3c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3738      	adds	r7, #56	@ 0x38
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	e000ed04 	.word	0xe000ed04

08004f40 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b08e      	sub	sp, #56	@ 0x38
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10b      	bne.n	8004f6e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f5a:	f383 8811 	msr	BASEPRI, r3
 8004f5e:	f3bf 8f6f 	isb	sy
 8004f62:	f3bf 8f4f 	dsb	sy
 8004f66:	623b      	str	r3, [r7, #32]
}
 8004f68:	bf00      	nop
 8004f6a:	bf00      	nop
 8004f6c:	e7fd      	b.n	8004f6a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d103      	bne.n	8004f7c <xQueueReceiveFromISR+0x3c>
 8004f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <xQueueReceiveFromISR+0x40>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e000      	b.n	8004f82 <xQueueReceiveFromISR+0x42>
 8004f80:	2300      	movs	r3, #0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10b      	bne.n	8004f9e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f8a:	f383 8811 	msr	BASEPRI, r3
 8004f8e:	f3bf 8f6f 	isb	sy
 8004f92:	f3bf 8f4f 	dsb	sy
 8004f96:	61fb      	str	r3, [r7, #28]
}
 8004f98:	bf00      	nop
 8004f9a:	bf00      	nop
 8004f9c:	e7fd      	b.n	8004f9a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f9e:	f001 ff7b 	bl	8006e98 <vPortValidateInterruptPriority>
	__asm volatile
 8004fa2:	f3ef 8211 	mrs	r2, BASEPRI
 8004fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	61ba      	str	r2, [r7, #24]
 8004fb8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004fba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d02f      	beq.n	800502a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fcc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004fd4:	68b9      	ldr	r1, [r7, #8]
 8004fd6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fd8:	f000 f8b6 	bl	8005148 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fde:	1e5a      	subs	r2, r3, #1
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004fe4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fec:	d112      	bne.n	8005014 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d016      	beq.n	8005024 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff8:	3310      	adds	r3, #16
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fe14 	bl	8005c28 <xTaskRemoveFromEventList>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00e      	beq.n	8005024 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00b      	beq.n	8005024 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	e007      	b.n	8005024 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005014:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005018:	3301      	adds	r3, #1
 800501a:	b2db      	uxtb	r3, r3
 800501c:	b25a      	sxtb	r2, r3
 800501e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005020:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005024:	2301      	movs	r3, #1
 8005026:	637b      	str	r3, [r7, #52]	@ 0x34
 8005028:	e001      	b.n	800502e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800502a:	2300      	movs	r3, #0
 800502c:	637b      	str	r3, [r7, #52]	@ 0x34
 800502e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005030:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f383 8811 	msr	BASEPRI, r3
}
 8005038:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800503a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800503c:	4618      	mov	r0, r3
 800503e:	3738      	adds	r7, #56	@ 0x38
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005050:	2b00      	cmp	r3, #0
 8005052:	d006      	beq.n	8005062 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f1c3 0307 	rsb	r3, r3, #7
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	e001      	b.n	8005066 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005062:	2300      	movs	r3, #0
 8005064:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005066:	68fb      	ldr	r3, [r7, #12]
	}
 8005068:	4618      	mov	r0, r3
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005080:	2300      	movs	r3, #0
 8005082:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005088:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10d      	bne.n	80050ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d14d      	bne.n	8005136 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	4618      	mov	r0, r3
 80050a0:	f001 f816 	bl	80060d0 <xTaskPriorityDisinherit>
 80050a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	609a      	str	r2, [r3, #8]
 80050ac:	e043      	b.n	8005136 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d119      	bne.n	80050e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6858      	ldr	r0, [r3, #4]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050bc:	461a      	mov	r2, r3
 80050be:	68b9      	ldr	r1, [r7, #8]
 80050c0:	f002 f946 	bl	8007350 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	685a      	ldr	r2, [r3, #4]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050cc:	441a      	add	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d32b      	bcc.n	8005136 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	605a      	str	r2, [r3, #4]
 80050e6:	e026      	b.n	8005136 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	68d8      	ldr	r0, [r3, #12]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f0:	461a      	mov	r2, r3
 80050f2:	68b9      	ldr	r1, [r7, #8]
 80050f4:	f002 f92c 	bl	8007350 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005100:	425b      	negs	r3, r3
 8005102:	441a      	add	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d207      	bcs.n	8005124 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511c:	425b      	negs	r3, r3
 800511e:	441a      	add	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b02      	cmp	r3, #2
 8005128:	d105      	bne.n	8005136 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d002      	beq.n	8005136 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	3b01      	subs	r3, #1
 8005134:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800513e:	697b      	ldr	r3, [r7, #20]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3718      	adds	r7, #24
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005156:	2b00      	cmp	r3, #0
 8005158:	d018      	beq.n	800518c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005162:	441a      	add	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	429a      	cmp	r2, r3
 8005172:	d303      	bcc.n	800517c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68d9      	ldr	r1, [r3, #12]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005184:	461a      	mov	r2, r3
 8005186:	6838      	ldr	r0, [r7, #0]
 8005188:	f002 f8e2 	bl	8007350 <memcpy>
	}
}
 800518c:	bf00      	nop
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800519c:	f001 fd9c 	bl	8006cd8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051a8:	e011      	b.n	80051ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d012      	beq.n	80051d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	3324      	adds	r3, #36	@ 0x24
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fd36 	bl	8005c28 <xTaskRemoveFromEventList>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80051c2:	f000 fe0f 	bl	8005de4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	dce9      	bgt.n	80051aa <prvUnlockQueue+0x16>
 80051d6:	e000      	b.n	80051da <prvUnlockQueue+0x46>
					break;
 80051d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	22ff      	movs	r2, #255	@ 0xff
 80051de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80051e2:	f001 fdab 	bl	8006d3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80051e6:	f001 fd77 	bl	8006cd8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051f2:	e011      	b.n	8005218 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d012      	beq.n	8005222 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3310      	adds	r3, #16
 8005200:	4618      	mov	r0, r3
 8005202:	f000 fd11 	bl	8005c28 <xTaskRemoveFromEventList>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800520c:	f000 fdea 	bl	8005de4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005210:	7bbb      	ldrb	r3, [r7, #14]
 8005212:	3b01      	subs	r3, #1
 8005214:	b2db      	uxtb	r3, r3
 8005216:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800521c:	2b00      	cmp	r3, #0
 800521e:	dce9      	bgt.n	80051f4 <prvUnlockQueue+0x60>
 8005220:	e000      	b.n	8005224 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005222:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	22ff      	movs	r2, #255	@ 0xff
 8005228:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800522c:	f001 fd86 	bl	8006d3c <vPortExitCritical>
}
 8005230:	bf00      	nop
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005240:	f001 fd4a 	bl	8006cd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005248:	2b00      	cmp	r3, #0
 800524a:	d102      	bne.n	8005252 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800524c:	2301      	movs	r3, #1
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	e001      	b.n	8005256 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005252:	2300      	movs	r3, #0
 8005254:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005256:	f001 fd71 	bl	8006d3c <vPortExitCritical>

	return xReturn;
 800525a:	68fb      	ldr	r3, [r7, #12]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800526c:	f001 fd34 	bl	8006cd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005278:	429a      	cmp	r2, r3
 800527a:	d102      	bne.n	8005282 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800527c:	2301      	movs	r3, #1
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	e001      	b.n	8005286 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005282:	2300      	movs	r3, #0
 8005284:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005286:	f001 fd59 	bl	8006d3c <vPortExitCritical>

	return xReturn;
 800528a:	68fb      	ldr	r3, [r7, #12]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	e014      	b.n	80052ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80052a4:	4a0f      	ldr	r2, [pc, #60]	@ (80052e4 <vQueueAddToRegistry+0x50>)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10b      	bne.n	80052c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80052b0:	490c      	ldr	r1, [pc, #48]	@ (80052e4 <vQueueAddToRegistry+0x50>)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80052ba:	4a0a      	ldr	r2, [pc, #40]	@ (80052e4 <vQueueAddToRegistry+0x50>)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	4413      	add	r3, r2
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80052c6:	e006      	b.n	80052d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3301      	adds	r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2b07      	cmp	r3, #7
 80052d2:	d9e7      	bls.n	80052a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80052d4:	bf00      	nop
 80052d6:	bf00      	nop
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	200007ec 	.word	0x200007ec

080052e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80052f8:	f001 fcee 	bl	8006cd8 <vPortEnterCritical>
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005302:	b25b      	sxtb	r3, r3
 8005304:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005308:	d103      	bne.n	8005312 <vQueueWaitForMessageRestricted+0x2a>
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005318:	b25b      	sxtb	r3, r3
 800531a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800531e:	d103      	bne.n	8005328 <vQueueWaitForMessageRestricted+0x40>
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005328:	f001 fd08 	bl	8006d3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005330:	2b00      	cmp	r3, #0
 8005332:	d106      	bne.n	8005342 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	3324      	adds	r3, #36	@ 0x24
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	68b9      	ldr	r1, [r7, #8]
 800533c:	4618      	mov	r0, r3
 800533e:	f000 fc47 	bl	8005bd0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005342:	6978      	ldr	r0, [r7, #20]
 8005344:	f7ff ff26 	bl	8005194 <prvUnlockQueue>
	}
 8005348:	bf00      	nop
 800534a:	3718      	adds	r7, #24
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005350:	b580      	push	{r7, lr}
 8005352:	b08e      	sub	sp, #56	@ 0x38
 8005354:	af04      	add	r7, sp, #16
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800535e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10b      	bne.n	800537c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005368:	f383 8811 	msr	BASEPRI, r3
 800536c:	f3bf 8f6f 	isb	sy
 8005370:	f3bf 8f4f 	dsb	sy
 8005374:	623b      	str	r3, [r7, #32]
}
 8005376:	bf00      	nop
 8005378:	bf00      	nop
 800537a:	e7fd      	b.n	8005378 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800537c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10b      	bne.n	800539a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005386:	f383 8811 	msr	BASEPRI, r3
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	61fb      	str	r3, [r7, #28]
}
 8005394:	bf00      	nop
 8005396:	bf00      	nop
 8005398:	e7fd      	b.n	8005396 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800539a:	2354      	movs	r3, #84	@ 0x54
 800539c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	2b54      	cmp	r3, #84	@ 0x54
 80053a2:	d00b      	beq.n	80053bc <xTaskCreateStatic+0x6c>
	__asm volatile
 80053a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	61bb      	str	r3, [r7, #24]
}
 80053b6:	bf00      	nop
 80053b8:	bf00      	nop
 80053ba:	e7fd      	b.n	80053b8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80053bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d01e      	beq.n	8005402 <xTaskCreateStatic+0xb2>
 80053c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d01b      	beq.n	8005402 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053cc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80053ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053d2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053dc:	2300      	movs	r3, #0
 80053de:	9303      	str	r3, [sp, #12]
 80053e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e2:	9302      	str	r3, [sp, #8]
 80053e4:	f107 0314 	add.w	r3, r7, #20
 80053e8:	9301      	str	r3, [sp, #4]
 80053ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	68b9      	ldr	r1, [r7, #8]
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 f850 	bl	800549a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80053fc:	f000 f8d6 	bl	80055ac <prvAddNewTaskToReadyList>
 8005400:	e001      	b.n	8005406 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005402:	2300      	movs	r3, #0
 8005404:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005406:	697b      	ldr	r3, [r7, #20]
	}
 8005408:	4618      	mov	r0, r3
 800540a:	3728      	adds	r7, #40	@ 0x28
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005410:	b580      	push	{r7, lr}
 8005412:	b08c      	sub	sp, #48	@ 0x30
 8005414:	af04      	add	r7, sp, #16
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	603b      	str	r3, [r7, #0]
 800541c:	4613      	mov	r3, r2
 800541e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005420:	88fb      	ldrh	r3, [r7, #6]
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4618      	mov	r0, r3
 8005426:	f001 fd79 	bl	8006f1c <pvPortMalloc>
 800542a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00e      	beq.n	8005450 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005432:	2054      	movs	r0, #84	@ 0x54
 8005434:	f001 fd72 	bl	8006f1c <pvPortMalloc>
 8005438:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d003      	beq.n	8005448 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	631a      	str	r2, [r3, #48]	@ 0x30
 8005446:	e005      	b.n	8005454 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005448:	6978      	ldr	r0, [r7, #20]
 800544a:	f001 fe35 	bl	80070b8 <vPortFree>
 800544e:	e001      	b.n	8005454 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005450:	2300      	movs	r3, #0
 8005452:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d017      	beq.n	800548a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005462:	88fa      	ldrh	r2, [r7, #6]
 8005464:	2300      	movs	r3, #0
 8005466:	9303      	str	r3, [sp, #12]
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	9302      	str	r3, [sp, #8]
 800546c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800546e:	9301      	str	r3, [sp, #4]
 8005470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	68b9      	ldr	r1, [r7, #8]
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 f80e 	bl	800549a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800547e:	69f8      	ldr	r0, [r7, #28]
 8005480:	f000 f894 	bl	80055ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005484:	2301      	movs	r3, #1
 8005486:	61bb      	str	r3, [r7, #24]
 8005488:	e002      	b.n	8005490 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800548a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800548e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005490:	69bb      	ldr	r3, [r7, #24]
	}
 8005492:	4618      	mov	r0, r3
 8005494:	3720      	adds	r7, #32
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b088      	sub	sp, #32
 800549e:	af00      	add	r7, sp, #0
 80054a0:	60f8      	str	r0, [r7, #12]
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	607a      	str	r2, [r7, #4]
 80054a6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80054b2:	3b01      	subs	r3, #1
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	f023 0307 	bic.w	r3, r3, #7
 80054c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00b      	beq.n	80054e4 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80054cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d0:	f383 8811 	msr	BASEPRI, r3
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	617b      	str	r3, [r7, #20]
}
 80054de:	bf00      	nop
 80054e0:	bf00      	nop
 80054e2:	e7fd      	b.n	80054e0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d01f      	beq.n	800552a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054ea:	2300      	movs	r3, #0
 80054ec:	61fb      	str	r3, [r7, #28]
 80054ee:	e012      	b.n	8005516 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	4413      	add	r3, r2
 80054f6:	7819      	ldrb	r1, [r3, #0]
 80054f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	4413      	add	r3, r2
 80054fe:	3334      	adds	r3, #52	@ 0x34
 8005500:	460a      	mov	r2, r1
 8005502:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	4413      	add	r3, r2
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d006      	beq.n	800551e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	3301      	adds	r3, #1
 8005514:	61fb      	str	r3, [r7, #28]
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	2b0f      	cmp	r3, #15
 800551a:	d9e9      	bls.n	80054f0 <prvInitialiseNewTask+0x56>
 800551c:	e000      	b.n	8005520 <prvInitialiseNewTask+0x86>
			{
				break;
 800551e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005522:	2200      	movs	r2, #0
 8005524:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005528:	e003      	b.n	8005532 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800552a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005534:	2b06      	cmp	r3, #6
 8005536:	d901      	bls.n	800553c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005538:	2306      	movs	r3, #6
 800553a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800553c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005540:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005544:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005546:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554a:	2200      	movs	r2, #0
 800554c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800554e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005550:	3304      	adds	r3, #4
 8005552:	4618      	mov	r0, r3
 8005554:	f7fe feb0 	bl	80042b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555a:	3318      	adds	r3, #24
 800555c:	4618      	mov	r0, r3
 800555e:	f7fe feab 	bl	80042b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005564:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005566:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800556a:	f1c3 0207 	rsb	r2, r3, #7
 800556e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005570:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005574:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005576:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557a:	2200      	movs	r2, #0
 800557c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800557e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	68f9      	ldr	r1, [r7, #12]
 800558a:	69b8      	ldr	r0, [r7, #24]
 800558c:	f001 fa70 	bl	8006a70 <pxPortInitialiseStack>
 8005590:	4602      	mov	r2, r0
 8005592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005594:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005598:	2b00      	cmp	r3, #0
 800559a:	d002      	beq.n	80055a2 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800559c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800559e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055a2:	bf00      	nop
 80055a4:	3720      	adds	r7, #32
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
	...

080055ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055b4:	f001 fb90 	bl	8006cd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055b8:	4b2a      	ldr	r3, [pc, #168]	@ (8005664 <prvAddNewTaskToReadyList+0xb8>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3301      	adds	r3, #1
 80055be:	4a29      	ldr	r2, [pc, #164]	@ (8005664 <prvAddNewTaskToReadyList+0xb8>)
 80055c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055c2:	4b29      	ldr	r3, [pc, #164]	@ (8005668 <prvAddNewTaskToReadyList+0xbc>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d109      	bne.n	80055de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055ca:	4a27      	ldr	r2, [pc, #156]	@ (8005668 <prvAddNewTaskToReadyList+0xbc>)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055d0:	4b24      	ldr	r3, [pc, #144]	@ (8005664 <prvAddNewTaskToReadyList+0xb8>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d110      	bne.n	80055fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80055d8:	f000 fc28 	bl	8005e2c <prvInitialiseTaskLists>
 80055dc:	e00d      	b.n	80055fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80055de:	4b23      	ldr	r3, [pc, #140]	@ (800566c <prvAddNewTaskToReadyList+0xc0>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d109      	bne.n	80055fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80055e6:	4b20      	ldr	r3, [pc, #128]	@ (8005668 <prvAddNewTaskToReadyList+0xbc>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d802      	bhi.n	80055fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80055f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005668 <prvAddNewTaskToReadyList+0xbc>)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80055fa:	4b1d      	ldr	r3, [pc, #116]	@ (8005670 <prvAddNewTaskToReadyList+0xc4>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3301      	adds	r3, #1
 8005600:	4a1b      	ldr	r2, [pc, #108]	@ (8005670 <prvAddNewTaskToReadyList+0xc4>)
 8005602:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005608:	2201      	movs	r2, #1
 800560a:	409a      	lsls	r2, r3
 800560c:	4b19      	ldr	r3, [pc, #100]	@ (8005674 <prvAddNewTaskToReadyList+0xc8>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4313      	orrs	r3, r2
 8005612:	4a18      	ldr	r2, [pc, #96]	@ (8005674 <prvAddNewTaskToReadyList+0xc8>)
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800561a:	4613      	mov	r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4a15      	ldr	r2, [pc, #84]	@ (8005678 <prvAddNewTaskToReadyList+0xcc>)
 8005624:	441a      	add	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	3304      	adds	r3, #4
 800562a:	4619      	mov	r1, r3
 800562c:	4610      	mov	r0, r2
 800562e:	f7fe fe50 	bl	80042d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005632:	f001 fb83 	bl	8006d3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005636:	4b0d      	ldr	r3, [pc, #52]	@ (800566c <prvAddNewTaskToReadyList+0xc0>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00e      	beq.n	800565c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800563e:	4b0a      	ldr	r3, [pc, #40]	@ (8005668 <prvAddNewTaskToReadyList+0xbc>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005648:	429a      	cmp	r2, r3
 800564a:	d207      	bcs.n	800565c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800564c:	4b0b      	ldr	r3, [pc, #44]	@ (800567c <prvAddNewTaskToReadyList+0xd0>)
 800564e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800565c:	bf00      	nop
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	2000092c 	.word	0x2000092c
 8005668:	2000082c 	.word	0x2000082c
 800566c:	20000938 	.word	0x20000938
 8005670:	20000948 	.word	0x20000948
 8005674:	20000934 	.word	0x20000934
 8005678:	20000830 	.word	0x20000830
 800567c:	e000ed04 	.word	0xe000ed04

08005680 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005688:	2300      	movs	r3, #0
 800568a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d018      	beq.n	80056c4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005692:	4b14      	ldr	r3, [pc, #80]	@ (80056e4 <vTaskDelay+0x64>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00b      	beq.n	80056b2 <vTaskDelay+0x32>
	__asm volatile
 800569a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800569e:	f383 8811 	msr	BASEPRI, r3
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	60bb      	str	r3, [r7, #8]
}
 80056ac:	bf00      	nop
 80056ae:	bf00      	nop
 80056b0:	e7fd      	b.n	80056ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80056b2:	f000 f883 	bl	80057bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80056b6:	2100      	movs	r1, #0
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 fe35 	bl	8006328 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80056be:	f000 f88b 	bl	80057d8 <xTaskResumeAll>
 80056c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d107      	bne.n	80056da <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80056ca:	4b07      	ldr	r3, [pc, #28]	@ (80056e8 <vTaskDelay+0x68>)
 80056cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056da:	bf00      	nop
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	20000954 	.word	0x20000954
 80056e8:	e000ed04 	.word	0xe000ed04

080056ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b08a      	sub	sp, #40	@ 0x28
 80056f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80056f2:	2300      	movs	r3, #0
 80056f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80056f6:	2300      	movs	r3, #0
 80056f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80056fa:	463a      	mov	r2, r7
 80056fc:	1d39      	adds	r1, r7, #4
 80056fe:	f107 0308 	add.w	r3, r7, #8
 8005702:	4618      	mov	r0, r3
 8005704:	f7fa fefa 	bl	80004fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005708:	6839      	ldr	r1, [r7, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	9202      	str	r2, [sp, #8]
 8005710:	9301      	str	r3, [sp, #4]
 8005712:	2300      	movs	r3, #0
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	2300      	movs	r3, #0
 8005718:	460a      	mov	r2, r1
 800571a:	4922      	ldr	r1, [pc, #136]	@ (80057a4 <vTaskStartScheduler+0xb8>)
 800571c:	4822      	ldr	r0, [pc, #136]	@ (80057a8 <vTaskStartScheduler+0xbc>)
 800571e:	f7ff fe17 	bl	8005350 <xTaskCreateStatic>
 8005722:	4603      	mov	r3, r0
 8005724:	4a21      	ldr	r2, [pc, #132]	@ (80057ac <vTaskStartScheduler+0xc0>)
 8005726:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005728:	4b20      	ldr	r3, [pc, #128]	@ (80057ac <vTaskStartScheduler+0xc0>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005730:	2301      	movs	r3, #1
 8005732:	617b      	str	r3, [r7, #20]
 8005734:	e001      	b.n	800573a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005736:	2300      	movs	r3, #0
 8005738:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d102      	bne.n	8005746 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005740:	f000 fe58 	bl	80063f4 <xTimerCreateTimerTask>
 8005744:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d116      	bne.n	800577a <vTaskStartScheduler+0x8e>
	__asm volatile
 800574c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	613b      	str	r3, [r7, #16]
}
 800575e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005760:	4b13      	ldr	r3, [pc, #76]	@ (80057b0 <vTaskStartScheduler+0xc4>)
 8005762:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005766:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005768:	4b12      	ldr	r3, [pc, #72]	@ (80057b4 <vTaskStartScheduler+0xc8>)
 800576a:	2201      	movs	r2, #1
 800576c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800576e:	4b12      	ldr	r3, [pc, #72]	@ (80057b8 <vTaskStartScheduler+0xcc>)
 8005770:	2200      	movs	r2, #0
 8005772:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005774:	f001 fa0c 	bl	8006b90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005778:	e00f      	b.n	800579a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005780:	d10b      	bne.n	800579a <vTaskStartScheduler+0xae>
	__asm volatile
 8005782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005786:	f383 8811 	msr	BASEPRI, r3
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	60fb      	str	r3, [r7, #12]
}
 8005794:	bf00      	nop
 8005796:	bf00      	nop
 8005798:	e7fd      	b.n	8005796 <vTaskStartScheduler+0xaa>
}
 800579a:	bf00      	nop
 800579c:	3718      	adds	r7, #24
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	08007470 	.word	0x08007470
 80057a8:	08005dfd 	.word	0x08005dfd
 80057ac:	20000950 	.word	0x20000950
 80057b0:	2000094c 	.word	0x2000094c
 80057b4:	20000938 	.word	0x20000938
 80057b8:	20000930 	.word	0x20000930

080057bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057bc:	b480      	push	{r7}
 80057be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80057c0:	4b04      	ldr	r3, [pc, #16]	@ (80057d4 <vTaskSuspendAll+0x18>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3301      	adds	r3, #1
 80057c6:	4a03      	ldr	r2, [pc, #12]	@ (80057d4 <vTaskSuspendAll+0x18>)
 80057c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80057ca:	bf00      	nop
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	20000954 	.word	0x20000954

080057d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80057de:	2300      	movs	r3, #0
 80057e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80057e2:	2300      	movs	r3, #0
 80057e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80057e6:	4b42      	ldr	r3, [pc, #264]	@ (80058f0 <xTaskResumeAll+0x118>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10b      	bne.n	8005806 <xTaskResumeAll+0x2e>
	__asm volatile
 80057ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	603b      	str	r3, [r7, #0]
}
 8005800:	bf00      	nop
 8005802:	bf00      	nop
 8005804:	e7fd      	b.n	8005802 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005806:	f001 fa67 	bl	8006cd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800580a:	4b39      	ldr	r3, [pc, #228]	@ (80058f0 <xTaskResumeAll+0x118>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	3b01      	subs	r3, #1
 8005810:	4a37      	ldr	r2, [pc, #220]	@ (80058f0 <xTaskResumeAll+0x118>)
 8005812:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005814:	4b36      	ldr	r3, [pc, #216]	@ (80058f0 <xTaskResumeAll+0x118>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d161      	bne.n	80058e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800581c:	4b35      	ldr	r3, [pc, #212]	@ (80058f4 <xTaskResumeAll+0x11c>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d05d      	beq.n	80058e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005824:	e02e      	b.n	8005884 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005826:	4b34      	ldr	r3, [pc, #208]	@ (80058f8 <xTaskResumeAll+0x120>)
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	3318      	adds	r3, #24
 8005832:	4618      	mov	r0, r3
 8005834:	f7fe fdaa 	bl	800438c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	3304      	adds	r3, #4
 800583c:	4618      	mov	r0, r3
 800583e:	f7fe fda5 	bl	800438c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005846:	2201      	movs	r2, #1
 8005848:	409a      	lsls	r2, r3
 800584a:	4b2c      	ldr	r3, [pc, #176]	@ (80058fc <xTaskResumeAll+0x124>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4313      	orrs	r3, r2
 8005850:	4a2a      	ldr	r2, [pc, #168]	@ (80058fc <xTaskResumeAll+0x124>)
 8005852:	6013      	str	r3, [r2, #0]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005858:	4613      	mov	r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	4413      	add	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4a27      	ldr	r2, [pc, #156]	@ (8005900 <xTaskResumeAll+0x128>)
 8005862:	441a      	add	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	3304      	adds	r3, #4
 8005868:	4619      	mov	r1, r3
 800586a:	4610      	mov	r0, r2
 800586c:	f7fe fd31 	bl	80042d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005874:	4b23      	ldr	r3, [pc, #140]	@ (8005904 <xTaskResumeAll+0x12c>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800587a:	429a      	cmp	r2, r3
 800587c:	d302      	bcc.n	8005884 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800587e:	4b22      	ldr	r3, [pc, #136]	@ (8005908 <xTaskResumeAll+0x130>)
 8005880:	2201      	movs	r2, #1
 8005882:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005884:	4b1c      	ldr	r3, [pc, #112]	@ (80058f8 <xTaskResumeAll+0x120>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1cc      	bne.n	8005826 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005892:	f000 fb69 	bl	8005f68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005896:	4b1d      	ldr	r3, [pc, #116]	@ (800590c <xTaskResumeAll+0x134>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d010      	beq.n	80058c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058a2:	f000 f859 	bl	8005958 <xTaskIncrementTick>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d002      	beq.n	80058b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80058ac:	4b16      	ldr	r3, [pc, #88]	@ (8005908 <xTaskResumeAll+0x130>)
 80058ae:	2201      	movs	r2, #1
 80058b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	3b01      	subs	r3, #1
 80058b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1f1      	bne.n	80058a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80058be:	4b13      	ldr	r3, [pc, #76]	@ (800590c <xTaskResumeAll+0x134>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058c4:	4b10      	ldr	r3, [pc, #64]	@ (8005908 <xTaskResumeAll+0x130>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d009      	beq.n	80058e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80058cc:	2301      	movs	r3, #1
 80058ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80058d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005910 <xTaskResumeAll+0x138>)
 80058d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058e0:	f001 fa2c 	bl	8006d3c <vPortExitCritical>

	return xAlreadyYielded;
 80058e4:	68bb      	ldr	r3, [r7, #8]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	20000954 	.word	0x20000954
 80058f4:	2000092c 	.word	0x2000092c
 80058f8:	200008ec 	.word	0x200008ec
 80058fc:	20000934 	.word	0x20000934
 8005900:	20000830 	.word	0x20000830
 8005904:	2000082c 	.word	0x2000082c
 8005908:	20000940 	.word	0x20000940
 800590c:	2000093c 	.word	0x2000093c
 8005910:	e000ed04 	.word	0xe000ed04

08005914 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800591a:	4b05      	ldr	r3, [pc, #20]	@ (8005930 <xTaskGetTickCount+0x1c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005920:	687b      	ldr	r3, [r7, #4]
}
 8005922:	4618      	mov	r0, r3
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	20000930 	.word	0x20000930

08005934 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800593a:	f001 faad 	bl	8006e98 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800593e:	2300      	movs	r3, #0
 8005940:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005942:	4b04      	ldr	r3, [pc, #16]	@ (8005954 <xTaskGetTickCountFromISR+0x20>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005948:	683b      	ldr	r3, [r7, #0]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	20000930 	.word	0x20000930

08005958 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800595e:	2300      	movs	r3, #0
 8005960:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005962:	4b4f      	ldr	r3, [pc, #316]	@ (8005aa0 <xTaskIncrementTick+0x148>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	f040 808f 	bne.w	8005a8a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800596c:	4b4d      	ldr	r3, [pc, #308]	@ (8005aa4 <xTaskIncrementTick+0x14c>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	3301      	adds	r3, #1
 8005972:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005974:	4a4b      	ldr	r2, [pc, #300]	@ (8005aa4 <xTaskIncrementTick+0x14c>)
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d121      	bne.n	80059c4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005980:	4b49      	ldr	r3, [pc, #292]	@ (8005aa8 <xTaskIncrementTick+0x150>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00b      	beq.n	80059a2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	603b      	str	r3, [r7, #0]
}
 800599c:	bf00      	nop
 800599e:	bf00      	nop
 80059a0:	e7fd      	b.n	800599e <xTaskIncrementTick+0x46>
 80059a2:	4b41      	ldr	r3, [pc, #260]	@ (8005aa8 <xTaskIncrementTick+0x150>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	4b40      	ldr	r3, [pc, #256]	@ (8005aac <xTaskIncrementTick+0x154>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a3e      	ldr	r2, [pc, #248]	@ (8005aa8 <xTaskIncrementTick+0x150>)
 80059ae:	6013      	str	r3, [r2, #0]
 80059b0:	4a3e      	ldr	r2, [pc, #248]	@ (8005aac <xTaskIncrementTick+0x154>)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6013      	str	r3, [r2, #0]
 80059b6:	4b3e      	ldr	r3, [pc, #248]	@ (8005ab0 <xTaskIncrementTick+0x158>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3301      	adds	r3, #1
 80059bc:	4a3c      	ldr	r2, [pc, #240]	@ (8005ab0 <xTaskIncrementTick+0x158>)
 80059be:	6013      	str	r3, [r2, #0]
 80059c0:	f000 fad2 	bl	8005f68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059c4:	4b3b      	ldr	r3, [pc, #236]	@ (8005ab4 <xTaskIncrementTick+0x15c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d348      	bcc.n	8005a60 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059ce:	4b36      	ldr	r3, [pc, #216]	@ (8005aa8 <xTaskIncrementTick+0x150>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d104      	bne.n	80059e2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059d8:	4b36      	ldr	r3, [pc, #216]	@ (8005ab4 <xTaskIncrementTick+0x15c>)
 80059da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80059de:	601a      	str	r2, [r3, #0]
					break;
 80059e0:	e03e      	b.n	8005a60 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059e2:	4b31      	ldr	r3, [pc, #196]	@ (8005aa8 <xTaskIncrementTick+0x150>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d203      	bcs.n	8005a02 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80059fa:	4a2e      	ldr	r2, [pc, #184]	@ (8005ab4 <xTaskIncrementTick+0x15c>)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a00:	e02e      	b.n	8005a60 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	3304      	adds	r3, #4
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fe fcc0 	bl	800438c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d004      	beq.n	8005a1e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	3318      	adds	r3, #24
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7fe fcb7 	bl	800438c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a22:	2201      	movs	r2, #1
 8005a24:	409a      	lsls	r2, r3
 8005a26:	4b24      	ldr	r3, [pc, #144]	@ (8005ab8 <xTaskIncrementTick+0x160>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	4a22      	ldr	r2, [pc, #136]	@ (8005ab8 <xTaskIncrementTick+0x160>)
 8005a2e:	6013      	str	r3, [r2, #0]
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a34:	4613      	mov	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4a1f      	ldr	r2, [pc, #124]	@ (8005abc <xTaskIncrementTick+0x164>)
 8005a3e:	441a      	add	r2, r3
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	3304      	adds	r3, #4
 8005a44:	4619      	mov	r1, r3
 8005a46:	4610      	mov	r0, r2
 8005a48:	f7fe fc43 	bl	80042d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a50:	4b1b      	ldr	r3, [pc, #108]	@ (8005ac0 <xTaskIncrementTick+0x168>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d3b9      	bcc.n	80059ce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a5e:	e7b6      	b.n	80059ce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a60:	4b17      	ldr	r3, [pc, #92]	@ (8005ac0 <xTaskIncrementTick+0x168>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a66:	4915      	ldr	r1, [pc, #84]	@ (8005abc <xTaskIncrementTick+0x164>)
 8005a68:	4613      	mov	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	440b      	add	r3, r1
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d901      	bls.n	8005a7c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005a7c:	4b11      	ldr	r3, [pc, #68]	@ (8005ac4 <xTaskIncrementTick+0x16c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d007      	beq.n	8005a94 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005a84:	2301      	movs	r3, #1
 8005a86:	617b      	str	r3, [r7, #20]
 8005a88:	e004      	b.n	8005a94 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8005ac8 <xTaskIncrementTick+0x170>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	4a0d      	ldr	r2, [pc, #52]	@ (8005ac8 <xTaskIncrementTick+0x170>)
 8005a92:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005a94:	697b      	ldr	r3, [r7, #20]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20000954 	.word	0x20000954
 8005aa4:	20000930 	.word	0x20000930
 8005aa8:	200008e4 	.word	0x200008e4
 8005aac:	200008e8 	.word	0x200008e8
 8005ab0:	20000944 	.word	0x20000944
 8005ab4:	2000094c 	.word	0x2000094c
 8005ab8:	20000934 	.word	0x20000934
 8005abc:	20000830 	.word	0x20000830
 8005ac0:	2000082c 	.word	0x2000082c
 8005ac4:	20000940 	.word	0x20000940
 8005ac8:	2000093c 	.word	0x2000093c

08005acc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005acc:	b480      	push	{r7}
 8005ace:	b087      	sub	sp, #28
 8005ad0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ad2:	4b27      	ldr	r3, [pc, #156]	@ (8005b70 <vTaskSwitchContext+0xa4>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ada:	4b26      	ldr	r3, [pc, #152]	@ (8005b74 <vTaskSwitchContext+0xa8>)
 8005adc:	2201      	movs	r2, #1
 8005ade:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ae0:	e040      	b.n	8005b64 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005ae2:	4b24      	ldr	r3, [pc, #144]	@ (8005b74 <vTaskSwitchContext+0xa8>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ae8:	4b23      	ldr	r3, [pc, #140]	@ (8005b78 <vTaskSwitchContext+0xac>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	fab3 f383 	clz	r3, r3
 8005af4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005af6:	7afb      	ldrb	r3, [r7, #11]
 8005af8:	f1c3 031f 	rsb	r3, r3, #31
 8005afc:	617b      	str	r3, [r7, #20]
 8005afe:	491f      	ldr	r1, [pc, #124]	@ (8005b7c <vTaskSwitchContext+0xb0>)
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	4613      	mov	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	440b      	add	r3, r1
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10b      	bne.n	8005b2a <vTaskSwitchContext+0x5e>
	__asm volatile
 8005b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	607b      	str	r3, [r7, #4]
}
 8005b24:	bf00      	nop
 8005b26:	bf00      	nop
 8005b28:	e7fd      	b.n	8005b26 <vTaskSwitchContext+0x5a>
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4a11      	ldr	r2, [pc, #68]	@ (8005b7c <vTaskSwitchContext+0xb0>)
 8005b36:	4413      	add	r3, r2
 8005b38:	613b      	str	r3, [r7, #16]
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	605a      	str	r2, [r3, #4]
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	3308      	adds	r3, #8
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d104      	bne.n	8005b5a <vTaskSwitchContext+0x8e>
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	605a      	str	r2, [r3, #4]
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	4a07      	ldr	r2, [pc, #28]	@ (8005b80 <vTaskSwitchContext+0xb4>)
 8005b62:	6013      	str	r3, [r2, #0]
}
 8005b64:	bf00      	nop
 8005b66:	371c      	adds	r7, #28
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	20000954 	.word	0x20000954
 8005b74:	20000940 	.word	0x20000940
 8005b78:	20000934 	.word	0x20000934
 8005b7c:	20000830 	.word	0x20000830
 8005b80:	2000082c 	.word	0x2000082c

08005b84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10b      	bne.n	8005bac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b98:	f383 8811 	msr	BASEPRI, r3
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	60fb      	str	r3, [r7, #12]
}
 8005ba6:	bf00      	nop
 8005ba8:	bf00      	nop
 8005baa:	e7fd      	b.n	8005ba8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bac:	4b07      	ldr	r3, [pc, #28]	@ (8005bcc <vTaskPlaceOnEventList+0x48>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	3318      	adds	r3, #24
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f7fe fbb0 	bl	800431a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bba:	2101      	movs	r1, #1
 8005bbc:	6838      	ldr	r0, [r7, #0]
 8005bbe:	f000 fbb3 	bl	8006328 <prvAddCurrentTaskToDelayedList>
}
 8005bc2:	bf00      	nop
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	2000082c 	.word	0x2000082c

08005bd0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10b      	bne.n	8005bfa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	617b      	str	r3, [r7, #20]
}
 8005bf4:	bf00      	nop
 8005bf6:	bf00      	nop
 8005bf8:	e7fd      	b.n	8005bf6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8005c24 <vTaskPlaceOnEventListRestricted+0x54>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	3318      	adds	r3, #24
 8005c00:	4619      	mov	r1, r3
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f7fe fb65 	bl	80042d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d002      	beq.n	8005c14 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005c0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c12:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	68b8      	ldr	r0, [r7, #8]
 8005c18:	f000 fb86 	bl	8006328 <prvAddCurrentTaskToDelayedList>
	}
 8005c1c:	bf00      	nop
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	2000082c 	.word	0x2000082c

08005c28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10b      	bne.n	8005c56 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	60fb      	str	r3, [r7, #12]
}
 8005c50:	bf00      	nop
 8005c52:	bf00      	nop
 8005c54:	e7fd      	b.n	8005c52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	3318      	adds	r3, #24
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fe fb96 	bl	800438c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c60:	4b1d      	ldr	r3, [pc, #116]	@ (8005cd8 <xTaskRemoveFromEventList+0xb0>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d11c      	bne.n	8005ca2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	3304      	adds	r3, #4
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7fe fb8d 	bl	800438c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c76:	2201      	movs	r2, #1
 8005c78:	409a      	lsls	r2, r3
 8005c7a:	4b18      	ldr	r3, [pc, #96]	@ (8005cdc <xTaskRemoveFromEventList+0xb4>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	4a16      	ldr	r2, [pc, #88]	@ (8005cdc <xTaskRemoveFromEventList+0xb4>)
 8005c82:	6013      	str	r3, [r2, #0]
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c88:	4613      	mov	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4a13      	ldr	r2, [pc, #76]	@ (8005ce0 <xTaskRemoveFromEventList+0xb8>)
 8005c92:	441a      	add	r2, r3
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	3304      	adds	r3, #4
 8005c98:	4619      	mov	r1, r3
 8005c9a:	4610      	mov	r0, r2
 8005c9c:	f7fe fb19 	bl	80042d2 <vListInsertEnd>
 8005ca0:	e005      	b.n	8005cae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	3318      	adds	r3, #24
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	480e      	ldr	r0, [pc, #56]	@ (8005ce4 <xTaskRemoveFromEventList+0xbc>)
 8005caa:	f7fe fb12 	bl	80042d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce8 <xTaskRemoveFromEventList+0xc0>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d905      	bls.n	8005cc8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8005cec <xTaskRemoveFromEventList+0xc4>)
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	601a      	str	r2, [r3, #0]
 8005cc6:	e001      	b.n	8005ccc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005ccc:	697b      	ldr	r3, [r7, #20]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3718      	adds	r7, #24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	20000954 	.word	0x20000954
 8005cdc:	20000934 	.word	0x20000934
 8005ce0:	20000830 	.word	0x20000830
 8005ce4:	200008ec 	.word	0x200008ec
 8005ce8:	2000082c 	.word	0x2000082c
 8005cec:	20000940 	.word	0x20000940

08005cf0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005cf8:	4b06      	ldr	r3, [pc, #24]	@ (8005d14 <vTaskInternalSetTimeOutState+0x24>)
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d00:	4b05      	ldr	r3, [pc, #20]	@ (8005d18 <vTaskInternalSetTimeOutState+0x28>)
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	605a      	str	r2, [r3, #4]
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	20000944 	.word	0x20000944
 8005d18:	20000930 	.word	0x20000930

08005d1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b088      	sub	sp, #32
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10b      	bne.n	8005d44 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d30:	f383 8811 	msr	BASEPRI, r3
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	613b      	str	r3, [r7, #16]
}
 8005d3e:	bf00      	nop
 8005d40:	bf00      	nop
 8005d42:	e7fd      	b.n	8005d40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10b      	bne.n	8005d62 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	60fb      	str	r3, [r7, #12]
}
 8005d5c:	bf00      	nop
 8005d5e:	bf00      	nop
 8005d60:	e7fd      	b.n	8005d5e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005d62:	f000 ffb9 	bl	8006cd8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d66:	4b1d      	ldr	r3, [pc, #116]	@ (8005ddc <xTaskCheckForTimeOut+0xc0>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d7e:	d102      	bne.n	8005d86 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d80:	2300      	movs	r3, #0
 8005d82:	61fb      	str	r3, [r7, #28]
 8005d84:	e023      	b.n	8005dce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	4b15      	ldr	r3, [pc, #84]	@ (8005de0 <xTaskCheckForTimeOut+0xc4>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d007      	beq.n	8005da2 <xTaskCheckForTimeOut+0x86>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	69ba      	ldr	r2, [r7, #24]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d302      	bcc.n	8005da2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	61fb      	str	r3, [r7, #28]
 8005da0:	e015      	b.n	8005dce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d20b      	bcs.n	8005dc4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	1ad2      	subs	r2, r2, r3
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f7ff ff99 	bl	8005cf0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	61fb      	str	r3, [r7, #28]
 8005dc2:	e004      	b.n	8005dce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005dce:	f000 ffb5 	bl	8006d3c <vPortExitCritical>

	return xReturn;
 8005dd2:	69fb      	ldr	r3, [r7, #28]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3720      	adds	r7, #32
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	20000930 	.word	0x20000930
 8005de0:	20000944 	.word	0x20000944

08005de4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005de8:	4b03      	ldr	r3, [pc, #12]	@ (8005df8 <vTaskMissedYield+0x14>)
 8005dea:	2201      	movs	r2, #1
 8005dec:	601a      	str	r2, [r3, #0]
}
 8005dee:	bf00      	nop
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	20000940 	.word	0x20000940

08005dfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e04:	f000 f852 	bl	8005eac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e08:	4b06      	ldr	r3, [pc, #24]	@ (8005e24 <prvIdleTask+0x28>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d9f9      	bls.n	8005e04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e10:	4b05      	ldr	r3, [pc, #20]	@ (8005e28 <prvIdleTask+0x2c>)
 8005e12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e20:	e7f0      	b.n	8005e04 <prvIdleTask+0x8>
 8005e22:	bf00      	nop
 8005e24:	20000830 	.word	0x20000830
 8005e28:	e000ed04 	.word	0xe000ed04

08005e2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e32:	2300      	movs	r3, #0
 8005e34:	607b      	str	r3, [r7, #4]
 8005e36:	e00c      	b.n	8005e52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4a12      	ldr	r2, [pc, #72]	@ (8005e8c <prvInitialiseTaskLists+0x60>)
 8005e44:	4413      	add	r3, r2
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fe fa16 	bl	8004278 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	607b      	str	r3, [r7, #4]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b06      	cmp	r3, #6
 8005e56:	d9ef      	bls.n	8005e38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e58:	480d      	ldr	r0, [pc, #52]	@ (8005e90 <prvInitialiseTaskLists+0x64>)
 8005e5a:	f7fe fa0d 	bl	8004278 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e5e:	480d      	ldr	r0, [pc, #52]	@ (8005e94 <prvInitialiseTaskLists+0x68>)
 8005e60:	f7fe fa0a 	bl	8004278 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e64:	480c      	ldr	r0, [pc, #48]	@ (8005e98 <prvInitialiseTaskLists+0x6c>)
 8005e66:	f7fe fa07 	bl	8004278 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e6a:	480c      	ldr	r0, [pc, #48]	@ (8005e9c <prvInitialiseTaskLists+0x70>)
 8005e6c:	f7fe fa04 	bl	8004278 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e70:	480b      	ldr	r0, [pc, #44]	@ (8005ea0 <prvInitialiseTaskLists+0x74>)
 8005e72:	f7fe fa01 	bl	8004278 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e76:	4b0b      	ldr	r3, [pc, #44]	@ (8005ea4 <prvInitialiseTaskLists+0x78>)
 8005e78:	4a05      	ldr	r2, [pc, #20]	@ (8005e90 <prvInitialiseTaskLists+0x64>)
 8005e7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ea8 <prvInitialiseTaskLists+0x7c>)
 8005e7e:	4a05      	ldr	r2, [pc, #20]	@ (8005e94 <prvInitialiseTaskLists+0x68>)
 8005e80:	601a      	str	r2, [r3, #0]
}
 8005e82:	bf00      	nop
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20000830 	.word	0x20000830
 8005e90:	200008bc 	.word	0x200008bc
 8005e94:	200008d0 	.word	0x200008d0
 8005e98:	200008ec 	.word	0x200008ec
 8005e9c:	20000900 	.word	0x20000900
 8005ea0:	20000918 	.word	0x20000918
 8005ea4:	200008e4 	.word	0x200008e4
 8005ea8:	200008e8 	.word	0x200008e8

08005eac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005eb2:	e019      	b.n	8005ee8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005eb4:	f000 ff10 	bl	8006cd8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eb8:	4b10      	ldr	r3, [pc, #64]	@ (8005efc <prvCheckTasksWaitingTermination+0x50>)
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7fe fa61 	bl	800438c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005eca:	4b0d      	ldr	r3, [pc, #52]	@ (8005f00 <prvCheckTasksWaitingTermination+0x54>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	4a0b      	ldr	r2, [pc, #44]	@ (8005f00 <prvCheckTasksWaitingTermination+0x54>)
 8005ed2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8005f04 <prvCheckTasksWaitingTermination+0x58>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	4a0a      	ldr	r2, [pc, #40]	@ (8005f04 <prvCheckTasksWaitingTermination+0x58>)
 8005edc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ede:	f000 ff2d 	bl	8006d3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f810 	bl	8005f08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ee8:	4b06      	ldr	r3, [pc, #24]	@ (8005f04 <prvCheckTasksWaitingTermination+0x58>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1e1      	bne.n	8005eb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ef0:	bf00      	nop
 8005ef2:	bf00      	nop
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	20000900 	.word	0x20000900
 8005f00:	2000092c 	.word	0x2000092c
 8005f04:	20000914 	.word	0x20000914

08005f08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d108      	bne.n	8005f2c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f001 f8ca 	bl	80070b8 <vPortFree>
				vPortFree( pxTCB );
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f001 f8c7 	bl	80070b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f2a:	e019      	b.n	8005f60 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d103      	bne.n	8005f3e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f001 f8be 	bl	80070b8 <vPortFree>
	}
 8005f3c:	e010      	b.n	8005f60 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d00b      	beq.n	8005f60 <prvDeleteTCB+0x58>
	__asm volatile
 8005f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f4c:	f383 8811 	msr	BASEPRI, r3
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	60fb      	str	r3, [r7, #12]
}
 8005f5a:	bf00      	nop
 8005f5c:	bf00      	nop
 8005f5e:	e7fd      	b.n	8005f5c <prvDeleteTCB+0x54>
	}
 8005f60:	bf00      	nop
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa0 <prvResetNextTaskUnblockTime+0x38>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d104      	bne.n	8005f82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f78:	4b0a      	ldr	r3, [pc, #40]	@ (8005fa4 <prvResetNextTaskUnblockTime+0x3c>)
 8005f7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f80:	e008      	b.n	8005f94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f82:	4b07      	ldr	r3, [pc, #28]	@ (8005fa0 <prvResetNextTaskUnblockTime+0x38>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	4a04      	ldr	r2, [pc, #16]	@ (8005fa4 <prvResetNextTaskUnblockTime+0x3c>)
 8005f92:	6013      	str	r3, [r2, #0]
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	200008e4 	.word	0x200008e4
 8005fa4:	2000094c 	.word	0x2000094c

08005fa8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005fae:	4b0b      	ldr	r3, [pc, #44]	@ (8005fdc <xTaskGetSchedulerState+0x34>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d102      	bne.n	8005fbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	607b      	str	r3, [r7, #4]
 8005fba:	e008      	b.n	8005fce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fbc:	4b08      	ldr	r3, [pc, #32]	@ (8005fe0 <xTaskGetSchedulerState+0x38>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d102      	bne.n	8005fca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	607b      	str	r3, [r7, #4]
 8005fc8:	e001      	b.n	8005fce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005fce:	687b      	ldr	r3, [r7, #4]
	}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	20000938 	.word	0x20000938
 8005fe0:	20000954 	.word	0x20000954

08005fe4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d05e      	beq.n	80060b8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ffe:	4b31      	ldr	r3, [pc, #196]	@ (80060c4 <xTaskPriorityInherit+0xe0>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006004:	429a      	cmp	r2, r3
 8006006:	d24e      	bcs.n	80060a6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	2b00      	cmp	r3, #0
 800600e:	db06      	blt.n	800601e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006010:	4b2c      	ldr	r3, [pc, #176]	@ (80060c4 <xTaskPriorityInherit+0xe0>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006016:	f1c3 0207 	rsb	r2, r3, #7
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	6959      	ldr	r1, [r3, #20]
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006026:	4613      	mov	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4a26      	ldr	r2, [pc, #152]	@ (80060c8 <xTaskPriorityInherit+0xe4>)
 8006030:	4413      	add	r3, r2
 8006032:	4299      	cmp	r1, r3
 8006034:	d12f      	bne.n	8006096 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	3304      	adds	r3, #4
 800603a:	4618      	mov	r0, r3
 800603c:	f7fe f9a6 	bl	800438c <uxListRemove>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10a      	bne.n	800605c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800604a:	2201      	movs	r2, #1
 800604c:	fa02 f303 	lsl.w	r3, r2, r3
 8006050:	43da      	mvns	r2, r3
 8006052:	4b1e      	ldr	r3, [pc, #120]	@ (80060cc <xTaskPriorityInherit+0xe8>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4013      	ands	r3, r2
 8006058:	4a1c      	ldr	r2, [pc, #112]	@ (80060cc <xTaskPriorityInherit+0xe8>)
 800605a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800605c:	4b19      	ldr	r3, [pc, #100]	@ (80060c4 <xTaskPriorityInherit+0xe0>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606a:	2201      	movs	r2, #1
 800606c:	409a      	lsls	r2, r3
 800606e:	4b17      	ldr	r3, [pc, #92]	@ (80060cc <xTaskPriorityInherit+0xe8>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4313      	orrs	r3, r2
 8006074:	4a15      	ldr	r2, [pc, #84]	@ (80060cc <xTaskPriorityInherit+0xe8>)
 8006076:	6013      	str	r3, [r2, #0]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800607c:	4613      	mov	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4a10      	ldr	r2, [pc, #64]	@ (80060c8 <xTaskPriorityInherit+0xe4>)
 8006086:	441a      	add	r2, r3
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	3304      	adds	r3, #4
 800608c:	4619      	mov	r1, r3
 800608e:	4610      	mov	r0, r2
 8006090:	f7fe f91f 	bl	80042d2 <vListInsertEnd>
 8006094:	e004      	b.n	80060a0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006096:	4b0b      	ldr	r3, [pc, #44]	@ (80060c4 <xTaskPriorityInherit+0xe0>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80060a0:	2301      	movs	r3, #1
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	e008      	b.n	80060b8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060aa:	4b06      	ldr	r3, [pc, #24]	@ (80060c4 <xTaskPriorityInherit+0xe0>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d201      	bcs.n	80060b8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80060b4:	2301      	movs	r3, #1
 80060b6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060b8:	68fb      	ldr	r3, [r7, #12]
	}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	2000082c 	.word	0x2000082c
 80060c8:	20000830 	.word	0x20000830
 80060cc:	20000934 	.word	0x20000934

080060d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80060dc:	2300      	movs	r3, #0
 80060de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d070      	beq.n	80061c8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80060e6:	4b3b      	ldr	r3, [pc, #236]	@ (80061d4 <xTaskPriorityDisinherit+0x104>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d00b      	beq.n	8006108 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80060f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	60fb      	str	r3, [r7, #12]
}
 8006102:	bf00      	nop
 8006104:	bf00      	nop
 8006106:	e7fd      	b.n	8006104 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10b      	bne.n	8006128 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006114:	f383 8811 	msr	BASEPRI, r3
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	60bb      	str	r3, [r7, #8]
}
 8006122:	bf00      	nop
 8006124:	bf00      	nop
 8006126:	e7fd      	b.n	8006124 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800612c:	1e5a      	subs	r2, r3, #1
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800613a:	429a      	cmp	r2, r3
 800613c:	d044      	beq.n	80061c8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006142:	2b00      	cmp	r3, #0
 8006144:	d140      	bne.n	80061c8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	3304      	adds	r3, #4
 800614a:	4618      	mov	r0, r3
 800614c:	f7fe f91e 	bl	800438c <uxListRemove>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d115      	bne.n	8006182 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800615a:	491f      	ldr	r1, [pc, #124]	@ (80061d8 <xTaskPriorityDisinherit+0x108>)
 800615c:	4613      	mov	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	440b      	add	r3, r1
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10a      	bne.n	8006182 <xTaskPriorityDisinherit+0xb2>
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006170:	2201      	movs	r2, #1
 8006172:	fa02 f303 	lsl.w	r3, r2, r3
 8006176:	43da      	mvns	r2, r3
 8006178:	4b18      	ldr	r3, [pc, #96]	@ (80061dc <xTaskPriorityDisinherit+0x10c>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4013      	ands	r3, r2
 800617e:	4a17      	ldr	r2, [pc, #92]	@ (80061dc <xTaskPriorityDisinherit+0x10c>)
 8006180:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800618e:	f1c3 0207 	rsb	r2, r3, #7
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619a:	2201      	movs	r2, #1
 800619c:	409a      	lsls	r2, r3
 800619e:	4b0f      	ldr	r3, [pc, #60]	@ (80061dc <xTaskPriorityDisinherit+0x10c>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	4a0d      	ldr	r2, [pc, #52]	@ (80061dc <xTaskPriorityDisinherit+0x10c>)
 80061a6:	6013      	str	r3, [r2, #0]
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ac:	4613      	mov	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4a08      	ldr	r2, [pc, #32]	@ (80061d8 <xTaskPriorityDisinherit+0x108>)
 80061b6:	441a      	add	r2, r3
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	3304      	adds	r3, #4
 80061bc:	4619      	mov	r1, r3
 80061be:	4610      	mov	r0, r2
 80061c0:	f7fe f887 	bl	80042d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80061c4:	2301      	movs	r3, #1
 80061c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80061c8:	697b      	ldr	r3, [r7, #20]
	}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3718      	adds	r7, #24
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	2000082c 	.word	0x2000082c
 80061d8:	20000830 	.word	0x20000830
 80061dc:	20000934 	.word	0x20000934

080061e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b088      	sub	sp, #32
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80061ee:	2301      	movs	r3, #1
 80061f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d079      	beq.n	80062ec <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10b      	bne.n	8006218 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006204:	f383 8811 	msr	BASEPRI, r3
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	60fb      	str	r3, [r7, #12]
}
 8006212:	bf00      	nop
 8006214:	bf00      	nop
 8006216:	e7fd      	b.n	8006214 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	429a      	cmp	r2, r3
 8006220:	d902      	bls.n	8006228 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	61fb      	str	r3, [r7, #28]
 8006226:	e002      	b.n	800622e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800622c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006232:	69fa      	ldr	r2, [r7, #28]
 8006234:	429a      	cmp	r2, r3
 8006236:	d059      	beq.n	80062ec <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	429a      	cmp	r2, r3
 8006240:	d154      	bne.n	80062ec <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006242:	4b2c      	ldr	r3, [pc, #176]	@ (80062f4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	69ba      	ldr	r2, [r7, #24]
 8006248:	429a      	cmp	r2, r3
 800624a:	d10b      	bne.n	8006264 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800624c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006250:	f383 8811 	msr	BASEPRI, r3
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	60bb      	str	r3, [r7, #8]
}
 800625e:	bf00      	nop
 8006260:	bf00      	nop
 8006262:	e7fd      	b.n	8006260 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006268:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	69fa      	ldr	r2, [r7, #28]
 800626e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	2b00      	cmp	r3, #0
 8006276:	db04      	blt.n	8006282 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	f1c3 0207 	rsb	r2, r3, #7
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	6959      	ldr	r1, [r3, #20]
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	4613      	mov	r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4a19      	ldr	r2, [pc, #100]	@ (80062f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006292:	4413      	add	r3, r2
 8006294:	4299      	cmp	r1, r3
 8006296:	d129      	bne.n	80062ec <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	3304      	adds	r3, #4
 800629c:	4618      	mov	r0, r3
 800629e:	f7fe f875 	bl	800438c <uxListRemove>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10a      	bne.n	80062be <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ac:	2201      	movs	r2, #1
 80062ae:	fa02 f303 	lsl.w	r3, r2, r3
 80062b2:	43da      	mvns	r2, r3
 80062b4:	4b11      	ldr	r3, [pc, #68]	@ (80062fc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4013      	ands	r3, r2
 80062ba:	4a10      	ldr	r2, [pc, #64]	@ (80062fc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80062bc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c2:	2201      	movs	r2, #1
 80062c4:	409a      	lsls	r2, r3
 80062c6:	4b0d      	ldr	r3, [pc, #52]	@ (80062fc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	4a0b      	ldr	r2, [pc, #44]	@ (80062fc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80062ce:	6013      	str	r3, [r2, #0]
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062d4:	4613      	mov	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4a06      	ldr	r2, [pc, #24]	@ (80062f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80062de:	441a      	add	r2, r3
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	3304      	adds	r3, #4
 80062e4:	4619      	mov	r1, r3
 80062e6:	4610      	mov	r0, r2
 80062e8:	f7fd fff3 	bl	80042d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062ec:	bf00      	nop
 80062ee:	3720      	adds	r7, #32
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	2000082c 	.word	0x2000082c
 80062f8:	20000830 	.word	0x20000830
 80062fc:	20000934 	.word	0x20000934

08006300 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006300:	b480      	push	{r7}
 8006302:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006304:	4b07      	ldr	r3, [pc, #28]	@ (8006324 <pvTaskIncrementMutexHeldCount+0x24>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d004      	beq.n	8006316 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800630c:	4b05      	ldr	r3, [pc, #20]	@ (8006324 <pvTaskIncrementMutexHeldCount+0x24>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006312:	3201      	adds	r2, #1
 8006314:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8006316:	4b03      	ldr	r3, [pc, #12]	@ (8006324 <pvTaskIncrementMutexHeldCount+0x24>)
 8006318:	681b      	ldr	r3, [r3, #0]
	}
 800631a:	4618      	mov	r0, r3
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	2000082c 	.word	0x2000082c

08006328 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006332:	4b29      	ldr	r3, [pc, #164]	@ (80063d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006338:	4b28      	ldr	r3, [pc, #160]	@ (80063dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3304      	adds	r3, #4
 800633e:	4618      	mov	r0, r3
 8006340:	f7fe f824 	bl	800438c <uxListRemove>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10b      	bne.n	8006362 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800634a:	4b24      	ldr	r3, [pc, #144]	@ (80063dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006350:	2201      	movs	r2, #1
 8006352:	fa02 f303 	lsl.w	r3, r2, r3
 8006356:	43da      	mvns	r2, r3
 8006358:	4b21      	ldr	r3, [pc, #132]	@ (80063e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4013      	ands	r3, r2
 800635e:	4a20      	ldr	r2, [pc, #128]	@ (80063e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006360:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006368:	d10a      	bne.n	8006380 <prvAddCurrentTaskToDelayedList+0x58>
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d007      	beq.n	8006380 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006370:	4b1a      	ldr	r3, [pc, #104]	@ (80063dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	3304      	adds	r3, #4
 8006376:	4619      	mov	r1, r3
 8006378:	481a      	ldr	r0, [pc, #104]	@ (80063e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800637a:	f7fd ffaa 	bl	80042d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800637e:	e026      	b.n	80063ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4413      	add	r3, r2
 8006386:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006388:	4b14      	ldr	r3, [pc, #80]	@ (80063dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	429a      	cmp	r2, r3
 8006396:	d209      	bcs.n	80063ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006398:	4b13      	ldr	r3, [pc, #76]	@ (80063e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	4b0f      	ldr	r3, [pc, #60]	@ (80063dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	3304      	adds	r3, #4
 80063a2:	4619      	mov	r1, r3
 80063a4:	4610      	mov	r0, r2
 80063a6:	f7fd ffb8 	bl	800431a <vListInsert>
}
 80063aa:	e010      	b.n	80063ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063ac:	4b0f      	ldr	r3, [pc, #60]	@ (80063ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	4b0a      	ldr	r3, [pc, #40]	@ (80063dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3304      	adds	r3, #4
 80063b6:	4619      	mov	r1, r3
 80063b8:	4610      	mov	r0, r2
 80063ba:	f7fd ffae 	bl	800431a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80063be:	4b0c      	ldr	r3, [pc, #48]	@ (80063f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d202      	bcs.n	80063ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80063c8:	4a09      	ldr	r2, [pc, #36]	@ (80063f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	6013      	str	r3, [r2, #0]
}
 80063ce:	bf00      	nop
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20000930 	.word	0x20000930
 80063dc:	2000082c 	.word	0x2000082c
 80063e0:	20000934 	.word	0x20000934
 80063e4:	20000918 	.word	0x20000918
 80063e8:	200008e8 	.word	0x200008e8
 80063ec:	200008e4 	.word	0x200008e4
 80063f0:	2000094c 	.word	0x2000094c

080063f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b08a      	sub	sp, #40	@ 0x28
 80063f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80063fa:	2300      	movs	r3, #0
 80063fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80063fe:	f000 faf7 	bl	80069f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006402:	4b1d      	ldr	r3, [pc, #116]	@ (8006478 <xTimerCreateTimerTask+0x84>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d021      	beq.n	800644e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800640a:	2300      	movs	r3, #0
 800640c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800640e:	2300      	movs	r3, #0
 8006410:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006412:	1d3a      	adds	r2, r7, #4
 8006414:	f107 0108 	add.w	r1, r7, #8
 8006418:	f107 030c 	add.w	r3, r7, #12
 800641c:	4618      	mov	r0, r3
 800641e:	f7fa f887 	bl	8000530 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006422:	6879      	ldr	r1, [r7, #4]
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	9202      	str	r2, [sp, #8]
 800642a:	9301      	str	r3, [sp, #4]
 800642c:	2302      	movs	r3, #2
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	2300      	movs	r3, #0
 8006432:	460a      	mov	r2, r1
 8006434:	4911      	ldr	r1, [pc, #68]	@ (800647c <xTimerCreateTimerTask+0x88>)
 8006436:	4812      	ldr	r0, [pc, #72]	@ (8006480 <xTimerCreateTimerTask+0x8c>)
 8006438:	f7fe ff8a 	bl	8005350 <xTaskCreateStatic>
 800643c:	4603      	mov	r3, r0
 800643e:	4a11      	ldr	r2, [pc, #68]	@ (8006484 <xTimerCreateTimerTask+0x90>)
 8006440:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006442:	4b10      	ldr	r3, [pc, #64]	@ (8006484 <xTimerCreateTimerTask+0x90>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800644a:	2301      	movs	r3, #1
 800644c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10b      	bne.n	800646c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	613b      	str	r3, [r7, #16]
}
 8006466:	bf00      	nop
 8006468:	bf00      	nop
 800646a:	e7fd      	b.n	8006468 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800646c:	697b      	ldr	r3, [r7, #20]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3718      	adds	r7, #24
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	20000988 	.word	0x20000988
 800647c:	08007478 	.word	0x08007478
 8006480:	080065c1 	.word	0x080065c1
 8006484:	2000098c 	.word	0x2000098c

08006488 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08a      	sub	sp, #40	@ 0x28
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
 8006494:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006496:	2300      	movs	r3, #0
 8006498:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10b      	bne.n	80064b8 <xTimerGenericCommand+0x30>
	__asm volatile
 80064a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	623b      	str	r3, [r7, #32]
}
 80064b2:	bf00      	nop
 80064b4:	bf00      	nop
 80064b6:	e7fd      	b.n	80064b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80064b8:	4b19      	ldr	r3, [pc, #100]	@ (8006520 <xTimerGenericCommand+0x98>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d02a      	beq.n	8006516 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	2b05      	cmp	r3, #5
 80064d0:	dc18      	bgt.n	8006504 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80064d2:	f7ff fd69 	bl	8005fa8 <xTaskGetSchedulerState>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d109      	bne.n	80064f0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80064dc:	4b10      	ldr	r3, [pc, #64]	@ (8006520 <xTimerGenericCommand+0x98>)
 80064de:	6818      	ldr	r0, [r3, #0]
 80064e0:	f107 0114 	add.w	r1, r7, #20
 80064e4:	2300      	movs	r3, #0
 80064e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064e8:	f7fe f908 	bl	80046fc <xQueueGenericSend>
 80064ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80064ee:	e012      	b.n	8006516 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80064f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006520 <xTimerGenericCommand+0x98>)
 80064f2:	6818      	ldr	r0, [r3, #0]
 80064f4:	f107 0114 	add.w	r1, r7, #20
 80064f8:	2300      	movs	r3, #0
 80064fa:	2200      	movs	r2, #0
 80064fc:	f7fe f8fe 	bl	80046fc <xQueueGenericSend>
 8006500:	6278      	str	r0, [r7, #36]	@ 0x24
 8006502:	e008      	b.n	8006516 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006504:	4b06      	ldr	r3, [pc, #24]	@ (8006520 <xTimerGenericCommand+0x98>)
 8006506:	6818      	ldr	r0, [r3, #0]
 8006508:	f107 0114 	add.w	r1, r7, #20
 800650c:	2300      	movs	r3, #0
 800650e:	683a      	ldr	r2, [r7, #0]
 8006510:	f7fe f9f6 	bl	8004900 <xQueueGenericSendFromISR>
 8006514:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006518:	4618      	mov	r0, r3
 800651a:	3728      	adds	r7, #40	@ 0x28
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	20000988 	.word	0x20000988

08006524 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b088      	sub	sp, #32
 8006528:	af02      	add	r7, sp, #8
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800652e:	4b23      	ldr	r3, [pc, #140]	@ (80065bc <prvProcessExpiredTimer+0x98>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	3304      	adds	r3, #4
 800653c:	4618      	mov	r0, r3
 800653e:	f7fd ff25 	bl	800438c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006548:	f003 0304 	and.w	r3, r3, #4
 800654c:	2b00      	cmp	r3, #0
 800654e:	d023      	beq.n	8006598 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	699a      	ldr	r2, [r3, #24]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	18d1      	adds	r1, r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	6978      	ldr	r0, [r7, #20]
 800655e:	f000 f8d5 	bl	800670c <prvInsertTimerInActiveList>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d020      	beq.n	80065aa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006568:	2300      	movs	r3, #0
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	2300      	movs	r3, #0
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	2100      	movs	r1, #0
 8006572:	6978      	ldr	r0, [r7, #20]
 8006574:	f7ff ff88 	bl	8006488 <xTimerGenericCommand>
 8006578:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d114      	bne.n	80065aa <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	60fb      	str	r3, [r7, #12]
}
 8006592:	bf00      	nop
 8006594:	bf00      	nop
 8006596:	e7fd      	b.n	8006594 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800659e:	f023 0301 	bic.w	r3, r3, #1
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	6978      	ldr	r0, [r7, #20]
 80065b0:	4798      	blx	r3
}
 80065b2:	bf00      	nop
 80065b4:	3718      	adds	r7, #24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	20000980 	.word	0x20000980

080065c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80065c8:	f107 0308 	add.w	r3, r7, #8
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 f859 	bl	8006684 <prvGetNextExpireTime>
 80065d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	4619      	mov	r1, r3
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f000 f805 	bl	80065e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80065de:	f000 f8d7 	bl	8006790 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80065e2:	bf00      	nop
 80065e4:	e7f0      	b.n	80065c8 <prvTimerTask+0x8>
	...

080065e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80065f2:	f7ff f8e3 	bl	80057bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065f6:	f107 0308 	add.w	r3, r7, #8
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 f866 	bl	80066cc <prvSampleTimeNow>
 8006600:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d130      	bne.n	800666a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10a      	bne.n	8006624 <prvProcessTimerOrBlockTask+0x3c>
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	429a      	cmp	r2, r3
 8006614:	d806      	bhi.n	8006624 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006616:	f7ff f8df 	bl	80057d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800661a:	68f9      	ldr	r1, [r7, #12]
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7ff ff81 	bl	8006524 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006622:	e024      	b.n	800666e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d008      	beq.n	800663c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800662a:	4b13      	ldr	r3, [pc, #76]	@ (8006678 <prvProcessTimerOrBlockTask+0x90>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <prvProcessTimerOrBlockTask+0x50>
 8006634:	2301      	movs	r3, #1
 8006636:	e000      	b.n	800663a <prvProcessTimerOrBlockTask+0x52>
 8006638:	2300      	movs	r3, #0
 800663a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800663c:	4b0f      	ldr	r3, [pc, #60]	@ (800667c <prvProcessTimerOrBlockTask+0x94>)
 800663e:	6818      	ldr	r0, [r3, #0]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	4619      	mov	r1, r3
 800664a:	f7fe fe4d 	bl	80052e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800664e:	f7ff f8c3 	bl	80057d8 <xTaskResumeAll>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10a      	bne.n	800666e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006658:	4b09      	ldr	r3, [pc, #36]	@ (8006680 <prvProcessTimerOrBlockTask+0x98>)
 800665a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800665e:	601a      	str	r2, [r3, #0]
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	f3bf 8f6f 	isb	sy
}
 8006668:	e001      	b.n	800666e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800666a:	f7ff f8b5 	bl	80057d8 <xTaskResumeAll>
}
 800666e:	bf00      	nop
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	20000984 	.word	0x20000984
 800667c:	20000988 	.word	0x20000988
 8006680:	e000ed04 	.word	0xe000ed04

08006684 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800668c:	4b0e      	ldr	r3, [pc, #56]	@ (80066c8 <prvGetNextExpireTime+0x44>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d101      	bne.n	800669a <prvGetNextExpireTime+0x16>
 8006696:	2201      	movs	r2, #1
 8006698:	e000      	b.n	800669c <prvGetNextExpireTime+0x18>
 800669a:	2200      	movs	r2, #0
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d105      	bne.n	80066b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066a8:	4b07      	ldr	r3, [pc, #28]	@ (80066c8 <prvGetNextExpireTime+0x44>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	60fb      	str	r3, [r7, #12]
 80066b2:	e001      	b.n	80066b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80066b4:	2300      	movs	r3, #0
 80066b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80066b8:	68fb      	ldr	r3, [r7, #12]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	20000980 	.word	0x20000980

080066cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80066d4:	f7ff f91e 	bl	8005914 <xTaskGetTickCount>
 80066d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80066da:	4b0b      	ldr	r3, [pc, #44]	@ (8006708 <prvSampleTimeNow+0x3c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d205      	bcs.n	80066f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80066e4:	f000 f91e 	bl	8006924 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	e002      	b.n	80066f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80066f6:	4a04      	ldr	r2, [pc, #16]	@ (8006708 <prvSampleTimeNow+0x3c>)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80066fc:	68fb      	ldr	r3, [r7, #12]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	20000990 	.word	0x20000990

0800670c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
 8006718:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800671a:	2300      	movs	r3, #0
 800671c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	429a      	cmp	r2, r3
 8006730:	d812      	bhi.n	8006758 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	1ad2      	subs	r2, r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	429a      	cmp	r2, r3
 800673e:	d302      	bcc.n	8006746 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006740:	2301      	movs	r3, #1
 8006742:	617b      	str	r3, [r7, #20]
 8006744:	e01b      	b.n	800677e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006746:	4b10      	ldr	r3, [pc, #64]	@ (8006788 <prvInsertTimerInActiveList+0x7c>)
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	3304      	adds	r3, #4
 800674e:	4619      	mov	r1, r3
 8006750:	4610      	mov	r0, r2
 8006752:	f7fd fde2 	bl	800431a <vListInsert>
 8006756:	e012      	b.n	800677e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	429a      	cmp	r2, r3
 800675e:	d206      	bcs.n	800676e <prvInsertTimerInActiveList+0x62>
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	429a      	cmp	r2, r3
 8006766:	d302      	bcc.n	800676e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006768:	2301      	movs	r3, #1
 800676a:	617b      	str	r3, [r7, #20]
 800676c:	e007      	b.n	800677e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800676e:	4b07      	ldr	r3, [pc, #28]	@ (800678c <prvInsertTimerInActiveList+0x80>)
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	3304      	adds	r3, #4
 8006776:	4619      	mov	r1, r3
 8006778:	4610      	mov	r0, r2
 800677a:	f7fd fdce 	bl	800431a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800677e:	697b      	ldr	r3, [r7, #20]
}
 8006780:	4618      	mov	r0, r3
 8006782:	3718      	adds	r7, #24
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	20000984 	.word	0x20000984
 800678c:	20000980 	.word	0x20000980

08006790 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b08c      	sub	sp, #48	@ 0x30
 8006794:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006796:	e0b2      	b.n	80068fe <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	2b00      	cmp	r3, #0
 800679c:	f2c0 80af 	blt.w	80068fe <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80067a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d004      	beq.n	80067b6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ae:	3304      	adds	r3, #4
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7fd fdeb 	bl	800438c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067b6:	1d3b      	adds	r3, r7, #4
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7ff ff87 	bl	80066cc <prvSampleTimeNow>
 80067be:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	2b09      	cmp	r3, #9
 80067c4:	f200 8098 	bhi.w	80068f8 <prvProcessReceivedCommands+0x168>
 80067c8:	a201      	add	r2, pc, #4	@ (adr r2, 80067d0 <prvProcessReceivedCommands+0x40>)
 80067ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ce:	bf00      	nop
 80067d0:	080067f9 	.word	0x080067f9
 80067d4:	080067f9 	.word	0x080067f9
 80067d8:	080067f9 	.word	0x080067f9
 80067dc:	0800686f 	.word	0x0800686f
 80067e0:	08006883 	.word	0x08006883
 80067e4:	080068cf 	.word	0x080068cf
 80067e8:	080067f9 	.word	0x080067f9
 80067ec:	080067f9 	.word	0x080067f9
 80067f0:	0800686f 	.word	0x0800686f
 80067f4:	08006883 	.word	0x08006883
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80067f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80067fe:	f043 0301 	orr.w	r3, r3, #1
 8006802:	b2da      	uxtb	r2, r3
 8006804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006806:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	18d1      	adds	r1, r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6a3a      	ldr	r2, [r7, #32]
 8006816:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006818:	f7ff ff78 	bl	800670c <prvInsertTimerInActiveList>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d06c      	beq.n	80068fc <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006828:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800682a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	2b00      	cmp	r3, #0
 8006836:	d061      	beq.n	80068fc <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	441a      	add	r2, r3
 8006840:	2300      	movs	r3, #0
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	2300      	movs	r3, #0
 8006846:	2100      	movs	r1, #0
 8006848:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800684a:	f7ff fe1d 	bl	8006488 <xTimerGenericCommand>
 800684e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d152      	bne.n	80068fc <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8006856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685a:	f383 8811 	msr	BASEPRI, r3
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	61bb      	str	r3, [r7, #24]
}
 8006868:	bf00      	nop
 800686a:	bf00      	nop
 800686c:	e7fd      	b.n	800686a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800686e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006870:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006874:	f023 0301 	bic.w	r3, r3, #1
 8006878:	b2da      	uxtb	r2, r3
 800687a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8006880:	e03d      	b.n	80068fe <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006884:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006888:	f043 0301 	orr.w	r3, r3, #1
 800688c:	b2da      	uxtb	r2, r3
 800688e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006890:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006898:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800689a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10b      	bne.n	80068ba <prvProcessReceivedCommands+0x12a>
	__asm volatile
 80068a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a6:	f383 8811 	msr	BASEPRI, r3
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	617b      	str	r3, [r7, #20]
}
 80068b4:	bf00      	nop
 80068b6:	bf00      	nop
 80068b8:	e7fd      	b.n	80068b6 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80068ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068bc:	699a      	ldr	r2, [r3, #24]
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	18d1      	adds	r1, r2, r3
 80068c2:	6a3b      	ldr	r3, [r7, #32]
 80068c4:	6a3a      	ldr	r2, [r7, #32]
 80068c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80068c8:	f7ff ff20 	bl	800670c <prvInsertTimerInActiveList>
					break;
 80068cc:	e017      	b.n	80068fe <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80068ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80068d4:	f003 0302 	and.w	r3, r3, #2
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d103      	bne.n	80068e4 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 80068dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80068de:	f000 fbeb 	bl	80070b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80068e2:	e00c      	b.n	80068fe <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80068ea:	f023 0301 	bic.w	r3, r3, #1
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 80068f6:	e002      	b.n	80068fe <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 80068f8:	bf00      	nop
 80068fa:	e000      	b.n	80068fe <prvProcessReceivedCommands+0x16e>
					break;
 80068fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068fe:	4b08      	ldr	r3, [pc, #32]	@ (8006920 <prvProcessReceivedCommands+0x190>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f107 0108 	add.w	r1, r7, #8
 8006906:	2200      	movs	r2, #0
 8006908:	4618      	mov	r0, r3
 800690a:	f7fe f927 	bl	8004b5c <xQueueReceive>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	f47f af41 	bne.w	8006798 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006916:	bf00      	nop
 8006918:	bf00      	nop
 800691a:	3728      	adds	r7, #40	@ 0x28
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	20000988 	.word	0x20000988

08006924 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b088      	sub	sp, #32
 8006928:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800692a:	e049      	b.n	80069c0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800692c:	4b2e      	ldr	r3, [pc, #184]	@ (80069e8 <prvSwitchTimerLists+0xc4>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006936:	4b2c      	ldr	r3, [pc, #176]	@ (80069e8 <prvSwitchTimerLists+0xc4>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	3304      	adds	r3, #4
 8006944:	4618      	mov	r0, r3
 8006946:	f7fd fd21 	bl	800438c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006958:	f003 0304 	and.w	r3, r3, #4
 800695c:	2b00      	cmp	r3, #0
 800695e:	d02f      	beq.n	80069c0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	4413      	add	r3, r2
 8006968:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	429a      	cmp	r2, r3
 8006970:	d90e      	bls.n	8006990 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800697e:	4b1a      	ldr	r3, [pc, #104]	@ (80069e8 <prvSwitchTimerLists+0xc4>)
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	3304      	adds	r3, #4
 8006986:	4619      	mov	r1, r3
 8006988:	4610      	mov	r0, r2
 800698a:	f7fd fcc6 	bl	800431a <vListInsert>
 800698e:	e017      	b.n	80069c0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006990:	2300      	movs	r3, #0
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	2300      	movs	r3, #0
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	2100      	movs	r1, #0
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f7ff fd74 	bl	8006488 <xTimerGenericCommand>
 80069a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d10b      	bne.n	80069c0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80069a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ac:	f383 8811 	msr	BASEPRI, r3
 80069b0:	f3bf 8f6f 	isb	sy
 80069b4:	f3bf 8f4f 	dsb	sy
 80069b8:	603b      	str	r3, [r7, #0]
}
 80069ba:	bf00      	nop
 80069bc:	bf00      	nop
 80069be:	e7fd      	b.n	80069bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069c0:	4b09      	ldr	r3, [pc, #36]	@ (80069e8 <prvSwitchTimerLists+0xc4>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1b0      	bne.n	800692c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80069ca:	4b07      	ldr	r3, [pc, #28]	@ (80069e8 <prvSwitchTimerLists+0xc4>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80069d0:	4b06      	ldr	r3, [pc, #24]	@ (80069ec <prvSwitchTimerLists+0xc8>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a04      	ldr	r2, [pc, #16]	@ (80069e8 <prvSwitchTimerLists+0xc4>)
 80069d6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80069d8:	4a04      	ldr	r2, [pc, #16]	@ (80069ec <prvSwitchTimerLists+0xc8>)
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	6013      	str	r3, [r2, #0]
}
 80069de:	bf00      	nop
 80069e0:	3718      	adds	r7, #24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	20000980 	.word	0x20000980
 80069ec:	20000984 	.word	0x20000984

080069f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80069f6:	f000 f96f 	bl	8006cd8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80069fa:	4b15      	ldr	r3, [pc, #84]	@ (8006a50 <prvCheckForValidListAndQueue+0x60>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d120      	bne.n	8006a44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006a02:	4814      	ldr	r0, [pc, #80]	@ (8006a54 <prvCheckForValidListAndQueue+0x64>)
 8006a04:	f7fd fc38 	bl	8004278 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006a08:	4813      	ldr	r0, [pc, #76]	@ (8006a58 <prvCheckForValidListAndQueue+0x68>)
 8006a0a:	f7fd fc35 	bl	8004278 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006a0e:	4b13      	ldr	r3, [pc, #76]	@ (8006a5c <prvCheckForValidListAndQueue+0x6c>)
 8006a10:	4a10      	ldr	r2, [pc, #64]	@ (8006a54 <prvCheckForValidListAndQueue+0x64>)
 8006a12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006a14:	4b12      	ldr	r3, [pc, #72]	@ (8006a60 <prvCheckForValidListAndQueue+0x70>)
 8006a16:	4a10      	ldr	r2, [pc, #64]	@ (8006a58 <prvCheckForValidListAndQueue+0x68>)
 8006a18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	4b11      	ldr	r3, [pc, #68]	@ (8006a64 <prvCheckForValidListAndQueue+0x74>)
 8006a20:	4a11      	ldr	r2, [pc, #68]	@ (8006a68 <prvCheckForValidListAndQueue+0x78>)
 8006a22:	210c      	movs	r1, #12
 8006a24:	200a      	movs	r0, #10
 8006a26:	f7fd fd45 	bl	80044b4 <xQueueGenericCreateStatic>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	4a08      	ldr	r2, [pc, #32]	@ (8006a50 <prvCheckForValidListAndQueue+0x60>)
 8006a2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006a30:	4b07      	ldr	r3, [pc, #28]	@ (8006a50 <prvCheckForValidListAndQueue+0x60>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d005      	beq.n	8006a44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006a38:	4b05      	ldr	r3, [pc, #20]	@ (8006a50 <prvCheckForValidListAndQueue+0x60>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	490b      	ldr	r1, [pc, #44]	@ (8006a6c <prvCheckForValidListAndQueue+0x7c>)
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7fe fc28 	bl	8005294 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a44:	f000 f97a 	bl	8006d3c <vPortExitCritical>
}
 8006a48:	bf00      	nop
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	20000988 	.word	0x20000988
 8006a54:	20000958 	.word	0x20000958
 8006a58:	2000096c 	.word	0x2000096c
 8006a5c:	20000980 	.word	0x20000980
 8006a60:	20000984 	.word	0x20000984
 8006a64:	20000a0c 	.word	0x20000a0c
 8006a68:	20000994 	.word	0x20000994
 8006a6c:	08007480 	.word	0x08007480

08006a70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	3b04      	subs	r3, #4
 8006a80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006a88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	3b04      	subs	r3, #4
 8006a8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	f023 0201 	bic.w	r2, r3, #1
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	3b04      	subs	r3, #4
 8006a9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006aa0:	4a0c      	ldr	r2, [pc, #48]	@ (8006ad4 <pxPortInitialiseStack+0x64>)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	3b14      	subs	r3, #20
 8006aaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	3b04      	subs	r3, #4
 8006ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f06f 0202 	mvn.w	r2, #2
 8006abe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	3b20      	subs	r3, #32
 8006ac4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	08006ad9 	.word	0x08006ad9

08006ad8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ae2:	4b13      	ldr	r3, [pc, #76]	@ (8006b30 <prvTaskExitError+0x58>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006aea:	d00b      	beq.n	8006b04 <prvTaskExitError+0x2c>
	__asm volatile
 8006aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	60fb      	str	r3, [r7, #12]
}
 8006afe:	bf00      	nop
 8006b00:	bf00      	nop
 8006b02:	e7fd      	b.n	8006b00 <prvTaskExitError+0x28>
	__asm volatile
 8006b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b08:	f383 8811 	msr	BASEPRI, r3
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f3bf 8f4f 	dsb	sy
 8006b14:	60bb      	str	r3, [r7, #8]
}
 8006b16:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006b18:	bf00      	nop
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d0fc      	beq.n	8006b1a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006b20:	bf00      	nop
 8006b22:	bf00      	nop
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	2000000c 	.word	0x2000000c
	...

08006b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006b40:	4b07      	ldr	r3, [pc, #28]	@ (8006b60 <pxCurrentTCBConst2>)
 8006b42:	6819      	ldr	r1, [r3, #0]
 8006b44:	6808      	ldr	r0, [r1, #0]
 8006b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b4a:	f380 8809 	msr	PSP, r0
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f04f 0000 	mov.w	r0, #0
 8006b56:	f380 8811 	msr	BASEPRI, r0
 8006b5a:	4770      	bx	lr
 8006b5c:	f3af 8000 	nop.w

08006b60 <pxCurrentTCBConst2>:
 8006b60:	2000082c 	.word	0x2000082c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b64:	bf00      	nop
 8006b66:	bf00      	nop

08006b68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006b68:	4808      	ldr	r0, [pc, #32]	@ (8006b8c <prvPortStartFirstTask+0x24>)
 8006b6a:	6800      	ldr	r0, [r0, #0]
 8006b6c:	6800      	ldr	r0, [r0, #0]
 8006b6e:	f380 8808 	msr	MSP, r0
 8006b72:	f04f 0000 	mov.w	r0, #0
 8006b76:	f380 8814 	msr	CONTROL, r0
 8006b7a:	b662      	cpsie	i
 8006b7c:	b661      	cpsie	f
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	df00      	svc	0
 8006b88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006b8a:	bf00      	nop
 8006b8c:	e000ed08 	.word	0xe000ed08

08006b90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b086      	sub	sp, #24
 8006b94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b96:	4b47      	ldr	r3, [pc, #284]	@ (8006cb4 <xPortStartScheduler+0x124>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a47      	ldr	r2, [pc, #284]	@ (8006cb8 <xPortStartScheduler+0x128>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d10b      	bne.n	8006bb8 <xPortStartScheduler+0x28>
	__asm volatile
 8006ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba4:	f383 8811 	msr	BASEPRI, r3
 8006ba8:	f3bf 8f6f 	isb	sy
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	60fb      	str	r3, [r7, #12]
}
 8006bb2:	bf00      	nop
 8006bb4:	bf00      	nop
 8006bb6:	e7fd      	b.n	8006bb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006bb8:	4b3e      	ldr	r3, [pc, #248]	@ (8006cb4 <xPortStartScheduler+0x124>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a3f      	ldr	r2, [pc, #252]	@ (8006cbc <xPortStartScheduler+0x12c>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d10b      	bne.n	8006bda <xPortStartScheduler+0x4a>
	__asm volatile
 8006bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	613b      	str	r3, [r7, #16]
}
 8006bd4:	bf00      	nop
 8006bd6:	bf00      	nop
 8006bd8:	e7fd      	b.n	8006bd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006bda:	4b39      	ldr	r3, [pc, #228]	@ (8006cc0 <xPortStartScheduler+0x130>)
 8006bdc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	22ff      	movs	r2, #255	@ 0xff
 8006bea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006bf4:	78fb      	ldrb	r3, [r7, #3]
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	4b31      	ldr	r3, [pc, #196]	@ (8006cc4 <xPortStartScheduler+0x134>)
 8006c00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c02:	4b31      	ldr	r3, [pc, #196]	@ (8006cc8 <xPortStartScheduler+0x138>)
 8006c04:	2207      	movs	r2, #7
 8006c06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c08:	e009      	b.n	8006c1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006c0a:	4b2f      	ldr	r3, [pc, #188]	@ (8006cc8 <xPortStartScheduler+0x138>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	4a2d      	ldr	r2, [pc, #180]	@ (8006cc8 <xPortStartScheduler+0x138>)
 8006c12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c14:	78fb      	ldrb	r3, [r7, #3]
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	005b      	lsls	r3, r3, #1
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c1e:	78fb      	ldrb	r3, [r7, #3]
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c26:	2b80      	cmp	r3, #128	@ 0x80
 8006c28:	d0ef      	beq.n	8006c0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c2a:	4b27      	ldr	r3, [pc, #156]	@ (8006cc8 <xPortStartScheduler+0x138>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f1c3 0307 	rsb	r3, r3, #7
 8006c32:	2b04      	cmp	r3, #4
 8006c34:	d00b      	beq.n	8006c4e <xPortStartScheduler+0xbe>
	__asm volatile
 8006c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c3a:	f383 8811 	msr	BASEPRI, r3
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	60bb      	str	r3, [r7, #8]
}
 8006c48:	bf00      	nop
 8006c4a:	bf00      	nop
 8006c4c:	e7fd      	b.n	8006c4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8006cc8 <xPortStartScheduler+0x138>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	021b      	lsls	r3, r3, #8
 8006c54:	4a1c      	ldr	r2, [pc, #112]	@ (8006cc8 <xPortStartScheduler+0x138>)
 8006c56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c58:	4b1b      	ldr	r3, [pc, #108]	@ (8006cc8 <xPortStartScheduler+0x138>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006c60:	4a19      	ldr	r2, [pc, #100]	@ (8006cc8 <xPortStartScheduler+0x138>)
 8006c62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	b2da      	uxtb	r2, r3
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c6c:	4b17      	ldr	r3, [pc, #92]	@ (8006ccc <xPortStartScheduler+0x13c>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a16      	ldr	r2, [pc, #88]	@ (8006ccc <xPortStartScheduler+0x13c>)
 8006c72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006c76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c78:	4b14      	ldr	r3, [pc, #80]	@ (8006ccc <xPortStartScheduler+0x13c>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a13      	ldr	r2, [pc, #76]	@ (8006ccc <xPortStartScheduler+0x13c>)
 8006c7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006c82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c84:	f000 f8da 	bl	8006e3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c88:	4b11      	ldr	r3, [pc, #68]	@ (8006cd0 <xPortStartScheduler+0x140>)
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006c8e:	f000 f8f9 	bl	8006e84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006c92:	4b10      	ldr	r3, [pc, #64]	@ (8006cd4 <xPortStartScheduler+0x144>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a0f      	ldr	r2, [pc, #60]	@ (8006cd4 <xPortStartScheduler+0x144>)
 8006c98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006c9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c9e:	f7ff ff63 	bl	8006b68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ca2:	f7fe ff13 	bl	8005acc <vTaskSwitchContext>
	prvTaskExitError();
 8006ca6:	f7ff ff17 	bl	8006ad8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3718      	adds	r7, #24
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	e000ed00 	.word	0xe000ed00
 8006cb8:	410fc271 	.word	0x410fc271
 8006cbc:	410fc270 	.word	0x410fc270
 8006cc0:	e000e400 	.word	0xe000e400
 8006cc4:	20000a54 	.word	0x20000a54
 8006cc8:	20000a58 	.word	0x20000a58
 8006ccc:	e000ed20 	.word	0xe000ed20
 8006cd0:	2000000c 	.word	0x2000000c
 8006cd4:	e000ef34 	.word	0xe000ef34

08006cd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	607b      	str	r3, [r7, #4]
}
 8006cf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006cf2:	4b10      	ldr	r3, [pc, #64]	@ (8006d34 <vPortEnterCritical+0x5c>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	4a0e      	ldr	r2, [pc, #56]	@ (8006d34 <vPortEnterCritical+0x5c>)
 8006cfa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8006d34 <vPortEnterCritical+0x5c>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d110      	bne.n	8006d26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d04:	4b0c      	ldr	r3, [pc, #48]	@ (8006d38 <vPortEnterCritical+0x60>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00b      	beq.n	8006d26 <vPortEnterCritical+0x4e>
	__asm volatile
 8006d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	603b      	str	r3, [r7, #0]
}
 8006d20:	bf00      	nop
 8006d22:	bf00      	nop
 8006d24:	e7fd      	b.n	8006d22 <vPortEnterCritical+0x4a>
	}
}
 8006d26:	bf00      	nop
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	2000000c 	.word	0x2000000c
 8006d38:	e000ed04 	.word	0xe000ed04

08006d3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006d42:	4b12      	ldr	r3, [pc, #72]	@ (8006d8c <vPortExitCritical+0x50>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10b      	bne.n	8006d62 <vPortExitCritical+0x26>
	__asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	607b      	str	r3, [r7, #4]
}
 8006d5c:	bf00      	nop
 8006d5e:	bf00      	nop
 8006d60:	e7fd      	b.n	8006d5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006d62:	4b0a      	ldr	r3, [pc, #40]	@ (8006d8c <vPortExitCritical+0x50>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	3b01      	subs	r3, #1
 8006d68:	4a08      	ldr	r2, [pc, #32]	@ (8006d8c <vPortExitCritical+0x50>)
 8006d6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d6c:	4b07      	ldr	r3, [pc, #28]	@ (8006d8c <vPortExitCritical+0x50>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d105      	bne.n	8006d80 <vPortExitCritical+0x44>
 8006d74:	2300      	movs	r3, #0
 8006d76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	f383 8811 	msr	BASEPRI, r3
}
 8006d7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr
 8006d8c:	2000000c 	.word	0x2000000c

08006d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d90:	f3ef 8009 	mrs	r0, PSP
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	4b15      	ldr	r3, [pc, #84]	@ (8006df0 <pxCurrentTCBConst>)
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	f01e 0f10 	tst.w	lr, #16
 8006da0:	bf08      	it	eq
 8006da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006daa:	6010      	str	r0, [r2, #0]
 8006dac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006db0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006db4:	f380 8811 	msr	BASEPRI, r0
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	f3bf 8f6f 	isb	sy
 8006dc0:	f7fe fe84 	bl	8005acc <vTaskSwitchContext>
 8006dc4:	f04f 0000 	mov.w	r0, #0
 8006dc8:	f380 8811 	msr	BASEPRI, r0
 8006dcc:	bc09      	pop	{r0, r3}
 8006dce:	6819      	ldr	r1, [r3, #0]
 8006dd0:	6808      	ldr	r0, [r1, #0]
 8006dd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd6:	f01e 0f10 	tst.w	lr, #16
 8006dda:	bf08      	it	eq
 8006ddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006de0:	f380 8809 	msr	PSP, r0
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	f3af 8000 	nop.w

08006df0 <pxCurrentTCBConst>:
 8006df0:	2000082c 	.word	0x2000082c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006df4:	bf00      	nop
 8006df6:	bf00      	nop

08006df8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8006dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e02:	f383 8811 	msr	BASEPRI, r3
 8006e06:	f3bf 8f6f 	isb	sy
 8006e0a:	f3bf 8f4f 	dsb	sy
 8006e0e:	607b      	str	r3, [r7, #4]
}
 8006e10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e12:	f7fe fda1 	bl	8005958 <xTaskIncrementTick>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d003      	beq.n	8006e24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e1c:	4b06      	ldr	r3, [pc, #24]	@ (8006e38 <xPortSysTickHandler+0x40>)
 8006e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e22:	601a      	str	r2, [r3, #0]
 8006e24:	2300      	movs	r3, #0
 8006e26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	f383 8811 	msr	BASEPRI, r3
}
 8006e2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e30:	bf00      	nop
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	e000ed04 	.word	0xe000ed04

08006e3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e40:	4b0b      	ldr	r3, [pc, #44]	@ (8006e70 <vPortSetupTimerInterrupt+0x34>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006e46:	4b0b      	ldr	r3, [pc, #44]	@ (8006e74 <vPortSetupTimerInterrupt+0x38>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006e78 <vPortSetupTimerInterrupt+0x3c>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a0a      	ldr	r2, [pc, #40]	@ (8006e7c <vPortSetupTimerInterrupt+0x40>)
 8006e52:	fba2 2303 	umull	r2, r3, r2, r3
 8006e56:	099b      	lsrs	r3, r3, #6
 8006e58:	4a09      	ldr	r2, [pc, #36]	@ (8006e80 <vPortSetupTimerInterrupt+0x44>)
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006e5e:	4b04      	ldr	r3, [pc, #16]	@ (8006e70 <vPortSetupTimerInterrupt+0x34>)
 8006e60:	2207      	movs	r2, #7
 8006e62:	601a      	str	r2, [r3, #0]
}
 8006e64:	bf00      	nop
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	e000e010 	.word	0xe000e010
 8006e74:	e000e018 	.word	0xe000e018
 8006e78:	20000000 	.word	0x20000000
 8006e7c:	10624dd3 	.word	0x10624dd3
 8006e80:	e000e014 	.word	0xe000e014

08006e84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006e84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006e94 <vPortEnableVFP+0x10>
 8006e88:	6801      	ldr	r1, [r0, #0]
 8006e8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006e8e:	6001      	str	r1, [r0, #0]
 8006e90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006e92:	bf00      	nop
 8006e94:	e000ed88 	.word	0xe000ed88

08006e98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006e9e:	f3ef 8305 	mrs	r3, IPSR
 8006ea2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2b0f      	cmp	r3, #15
 8006ea8:	d915      	bls.n	8006ed6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006eaa:	4a18      	ldr	r2, [pc, #96]	@ (8006f0c <vPortValidateInterruptPriority+0x74>)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	4413      	add	r3, r2
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006eb4:	4b16      	ldr	r3, [pc, #88]	@ (8006f10 <vPortValidateInterruptPriority+0x78>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	7afa      	ldrb	r2, [r7, #11]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d20b      	bcs.n	8006ed6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	607b      	str	r3, [r7, #4]
}
 8006ed0:	bf00      	nop
 8006ed2:	bf00      	nop
 8006ed4:	e7fd      	b.n	8006ed2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8006f14 <vPortValidateInterruptPriority+0x7c>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006ede:	4b0e      	ldr	r3, [pc, #56]	@ (8006f18 <vPortValidateInterruptPriority+0x80>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d90b      	bls.n	8006efe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eea:	f383 8811 	msr	BASEPRI, r3
 8006eee:	f3bf 8f6f 	isb	sy
 8006ef2:	f3bf 8f4f 	dsb	sy
 8006ef6:	603b      	str	r3, [r7, #0]
}
 8006ef8:	bf00      	nop
 8006efa:	bf00      	nop
 8006efc:	e7fd      	b.n	8006efa <vPortValidateInterruptPriority+0x62>
	}
 8006efe:	bf00      	nop
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	e000e3f0 	.word	0xe000e3f0
 8006f10:	20000a54 	.word	0x20000a54
 8006f14:	e000ed0c 	.word	0xe000ed0c
 8006f18:	20000a58 	.word	0x20000a58

08006f1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b08a      	sub	sp, #40	@ 0x28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f24:	2300      	movs	r3, #0
 8006f26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f28:	f7fe fc48 	bl	80057bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f2c:	4b5c      	ldr	r3, [pc, #368]	@ (80070a0 <pvPortMalloc+0x184>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f34:	f000 f924 	bl	8007180 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f38:	4b5a      	ldr	r3, [pc, #360]	@ (80070a4 <pvPortMalloc+0x188>)
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4013      	ands	r3, r2
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f040 8095 	bne.w	8007070 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d01e      	beq.n	8006f8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006f4c:	2208      	movs	r2, #8
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4413      	add	r3, r2
 8006f52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f003 0307 	and.w	r3, r3, #7
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d015      	beq.n	8006f8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f023 0307 	bic.w	r3, r3, #7
 8006f64:	3308      	adds	r3, #8
 8006f66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f003 0307 	and.w	r3, r3, #7
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00b      	beq.n	8006f8a <pvPortMalloc+0x6e>
	__asm volatile
 8006f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	617b      	str	r3, [r7, #20]
}
 8006f84:	bf00      	nop
 8006f86:	bf00      	nop
 8006f88:	e7fd      	b.n	8006f86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d06f      	beq.n	8007070 <pvPortMalloc+0x154>
 8006f90:	4b45      	ldr	r3, [pc, #276]	@ (80070a8 <pvPortMalloc+0x18c>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d86a      	bhi.n	8007070 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f9a:	4b44      	ldr	r3, [pc, #272]	@ (80070ac <pvPortMalloc+0x190>)
 8006f9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f9e:	4b43      	ldr	r3, [pc, #268]	@ (80070ac <pvPortMalloc+0x190>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fa4:	e004      	b.n	8006fb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d903      	bls.n	8006fc2 <pvPortMalloc+0xa6>
 8006fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1f1      	bne.n	8006fa6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006fc2:	4b37      	ldr	r3, [pc, #220]	@ (80070a0 <pvPortMalloc+0x184>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d051      	beq.n	8007070 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006fcc:	6a3b      	ldr	r3, [r7, #32]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2208      	movs	r2, #8
 8006fd2:	4413      	add	r3, r2
 8006fd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	1ad2      	subs	r2, r2, r3
 8006fe6:	2308      	movs	r3, #8
 8006fe8:	005b      	lsls	r3, r3, #1
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d920      	bls.n	8007030 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	f003 0307 	and.w	r3, r3, #7
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00b      	beq.n	8007018 <pvPortMalloc+0xfc>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	613b      	str	r3, [r7, #16]
}
 8007012:	bf00      	nop
 8007014:	bf00      	nop
 8007016:	e7fd      	b.n	8007014 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	1ad2      	subs	r2, r2, r3
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800702a:	69b8      	ldr	r0, [r7, #24]
 800702c:	f000 f90a 	bl	8007244 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007030:	4b1d      	ldr	r3, [pc, #116]	@ (80070a8 <pvPortMalloc+0x18c>)
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	4a1b      	ldr	r2, [pc, #108]	@ (80070a8 <pvPortMalloc+0x18c>)
 800703c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800703e:	4b1a      	ldr	r3, [pc, #104]	@ (80070a8 <pvPortMalloc+0x18c>)
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	4b1b      	ldr	r3, [pc, #108]	@ (80070b0 <pvPortMalloc+0x194>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	429a      	cmp	r2, r3
 8007048:	d203      	bcs.n	8007052 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800704a:	4b17      	ldr	r3, [pc, #92]	@ (80070a8 <pvPortMalloc+0x18c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a18      	ldr	r2, [pc, #96]	@ (80070b0 <pvPortMalloc+0x194>)
 8007050:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	4b13      	ldr	r3, [pc, #76]	@ (80070a4 <pvPortMalloc+0x188>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	431a      	orrs	r2, r3
 800705c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007062:	2200      	movs	r2, #0
 8007064:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007066:	4b13      	ldr	r3, [pc, #76]	@ (80070b4 <pvPortMalloc+0x198>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3301      	adds	r3, #1
 800706c:	4a11      	ldr	r2, [pc, #68]	@ (80070b4 <pvPortMalloc+0x198>)
 800706e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007070:	f7fe fbb2 	bl	80057d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	f003 0307 	and.w	r3, r3, #7
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00b      	beq.n	8007096 <pvPortMalloc+0x17a>
	__asm volatile
 800707e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	60fb      	str	r3, [r7, #12]
}
 8007090:	bf00      	nop
 8007092:	bf00      	nop
 8007094:	e7fd      	b.n	8007092 <pvPortMalloc+0x176>
	return pvReturn;
 8007096:	69fb      	ldr	r3, [r7, #28]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3728      	adds	r7, #40	@ 0x28
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	20008a64 	.word	0x20008a64
 80070a4:	20008a78 	.word	0x20008a78
 80070a8:	20008a68 	.word	0x20008a68
 80070ac:	20008a5c 	.word	0x20008a5c
 80070b0:	20008a6c 	.word	0x20008a6c
 80070b4:	20008a70 	.word	0x20008a70

080070b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d04f      	beq.n	800716a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80070ca:	2308      	movs	r3, #8
 80070cc:	425b      	negs	r3, r3
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	4413      	add	r3, r2
 80070d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	685a      	ldr	r2, [r3, #4]
 80070dc:	4b25      	ldr	r3, [pc, #148]	@ (8007174 <vPortFree+0xbc>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4013      	ands	r3, r2
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10b      	bne.n	80070fe <vPortFree+0x46>
	__asm volatile
 80070e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ea:	f383 8811 	msr	BASEPRI, r3
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f3bf 8f4f 	dsb	sy
 80070f6:	60fb      	str	r3, [r7, #12]
}
 80070f8:	bf00      	nop
 80070fa:	bf00      	nop
 80070fc:	e7fd      	b.n	80070fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00b      	beq.n	800711e <vPortFree+0x66>
	__asm volatile
 8007106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800710a:	f383 8811 	msr	BASEPRI, r3
 800710e:	f3bf 8f6f 	isb	sy
 8007112:	f3bf 8f4f 	dsb	sy
 8007116:	60bb      	str	r3, [r7, #8]
}
 8007118:	bf00      	nop
 800711a:	bf00      	nop
 800711c:	e7fd      	b.n	800711a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	4b14      	ldr	r3, [pc, #80]	@ (8007174 <vPortFree+0xbc>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4013      	ands	r3, r2
 8007128:	2b00      	cmp	r3, #0
 800712a:	d01e      	beq.n	800716a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d11a      	bne.n	800716a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	685a      	ldr	r2, [r3, #4]
 8007138:	4b0e      	ldr	r3, [pc, #56]	@ (8007174 <vPortFree+0xbc>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	43db      	mvns	r3, r3
 800713e:	401a      	ands	r2, r3
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007144:	f7fe fb3a 	bl	80057bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	4b0a      	ldr	r3, [pc, #40]	@ (8007178 <vPortFree+0xc0>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4413      	add	r3, r2
 8007152:	4a09      	ldr	r2, [pc, #36]	@ (8007178 <vPortFree+0xc0>)
 8007154:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007156:	6938      	ldr	r0, [r7, #16]
 8007158:	f000 f874 	bl	8007244 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800715c:	4b07      	ldr	r3, [pc, #28]	@ (800717c <vPortFree+0xc4>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	3301      	adds	r3, #1
 8007162:	4a06      	ldr	r2, [pc, #24]	@ (800717c <vPortFree+0xc4>)
 8007164:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007166:	f7fe fb37 	bl	80057d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800716a:	bf00      	nop
 800716c:	3718      	adds	r7, #24
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	20008a78 	.word	0x20008a78
 8007178:	20008a68 	.word	0x20008a68
 800717c:	20008a74 	.word	0x20008a74

08007180 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007186:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800718a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800718c:	4b27      	ldr	r3, [pc, #156]	@ (800722c <prvHeapInit+0xac>)
 800718e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f003 0307 	and.w	r3, r3, #7
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00c      	beq.n	80071b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	3307      	adds	r3, #7
 800719e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f023 0307 	bic.w	r3, r3, #7
 80071a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	4a1f      	ldr	r2, [pc, #124]	@ (800722c <prvHeapInit+0xac>)
 80071b0:	4413      	add	r3, r2
 80071b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80071b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007230 <prvHeapInit+0xb0>)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80071be:	4b1c      	ldr	r3, [pc, #112]	@ (8007230 <prvHeapInit+0xb0>)
 80071c0:	2200      	movs	r2, #0
 80071c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	4413      	add	r3, r2
 80071ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80071cc:	2208      	movs	r2, #8
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	1a9b      	subs	r3, r3, r2
 80071d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f023 0307 	bic.w	r3, r3, #7
 80071da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	4a15      	ldr	r2, [pc, #84]	@ (8007234 <prvHeapInit+0xb4>)
 80071e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80071e2:	4b14      	ldr	r3, [pc, #80]	@ (8007234 <prvHeapInit+0xb4>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2200      	movs	r2, #0
 80071e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80071ea:	4b12      	ldr	r3, [pc, #72]	@ (8007234 <prvHeapInit+0xb4>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2200      	movs	r2, #0
 80071f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	1ad2      	subs	r2, r2, r3
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007200:	4b0c      	ldr	r3, [pc, #48]	@ (8007234 <prvHeapInit+0xb4>)
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	4a0a      	ldr	r2, [pc, #40]	@ (8007238 <prvHeapInit+0xb8>)
 800720e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	4a09      	ldr	r2, [pc, #36]	@ (800723c <prvHeapInit+0xbc>)
 8007216:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007218:	4b09      	ldr	r3, [pc, #36]	@ (8007240 <prvHeapInit+0xc0>)
 800721a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800721e:	601a      	str	r2, [r3, #0]
}
 8007220:	bf00      	nop
 8007222:	3714      	adds	r7, #20
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	20000a5c 	.word	0x20000a5c
 8007230:	20008a5c 	.word	0x20008a5c
 8007234:	20008a64 	.word	0x20008a64
 8007238:	20008a6c 	.word	0x20008a6c
 800723c:	20008a68 	.word	0x20008a68
 8007240:	20008a78 	.word	0x20008a78

08007244 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800724c:	4b28      	ldr	r3, [pc, #160]	@ (80072f0 <prvInsertBlockIntoFreeList+0xac>)
 800724e:	60fb      	str	r3, [r7, #12]
 8007250:	e002      	b.n	8007258 <prvInsertBlockIntoFreeList+0x14>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	60fb      	str	r3, [r7, #12]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	429a      	cmp	r2, r3
 8007260:	d8f7      	bhi.n	8007252 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	4413      	add	r3, r2
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	429a      	cmp	r2, r3
 8007272:	d108      	bne.n	8007286 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	685a      	ldr	r2, [r3, #4]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	441a      	add	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	68ba      	ldr	r2, [r7, #8]
 8007290:	441a      	add	r2, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	429a      	cmp	r2, r3
 8007298:	d118      	bne.n	80072cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	4b15      	ldr	r3, [pc, #84]	@ (80072f4 <prvInsertBlockIntoFreeList+0xb0>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d00d      	beq.n	80072c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	685a      	ldr	r2, [r3, #4]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	441a      	add	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	601a      	str	r2, [r3, #0]
 80072c0:	e008      	b.n	80072d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80072c2:	4b0c      	ldr	r3, [pc, #48]	@ (80072f4 <prvInsertBlockIntoFreeList+0xb0>)
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	601a      	str	r2, [r3, #0]
 80072ca:	e003      	b.n	80072d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d002      	beq.n	80072e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072e2:	bf00      	nop
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	20008a5c 	.word	0x20008a5c
 80072f4:	20008a64 	.word	0x20008a64

080072f8 <memset>:
 80072f8:	4402      	add	r2, r0
 80072fa:	4603      	mov	r3, r0
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d100      	bne.n	8007302 <memset+0xa>
 8007300:	4770      	bx	lr
 8007302:	f803 1b01 	strb.w	r1, [r3], #1
 8007306:	e7f9      	b.n	80072fc <memset+0x4>

08007308 <__libc_init_array>:
 8007308:	b570      	push	{r4, r5, r6, lr}
 800730a:	4d0d      	ldr	r5, [pc, #52]	@ (8007340 <__libc_init_array+0x38>)
 800730c:	4c0d      	ldr	r4, [pc, #52]	@ (8007344 <__libc_init_array+0x3c>)
 800730e:	1b64      	subs	r4, r4, r5
 8007310:	10a4      	asrs	r4, r4, #2
 8007312:	2600      	movs	r6, #0
 8007314:	42a6      	cmp	r6, r4
 8007316:	d109      	bne.n	800732c <__libc_init_array+0x24>
 8007318:	4d0b      	ldr	r5, [pc, #44]	@ (8007348 <__libc_init_array+0x40>)
 800731a:	4c0c      	ldr	r4, [pc, #48]	@ (800734c <__libc_init_array+0x44>)
 800731c:	f000 f826 	bl	800736c <_init>
 8007320:	1b64      	subs	r4, r4, r5
 8007322:	10a4      	asrs	r4, r4, #2
 8007324:	2600      	movs	r6, #0
 8007326:	42a6      	cmp	r6, r4
 8007328:	d105      	bne.n	8007336 <__libc_init_array+0x2e>
 800732a:	bd70      	pop	{r4, r5, r6, pc}
 800732c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007330:	4798      	blx	r3
 8007332:	3601      	adds	r6, #1
 8007334:	e7ee      	b.n	8007314 <__libc_init_array+0xc>
 8007336:	f855 3b04 	ldr.w	r3, [r5], #4
 800733a:	4798      	blx	r3
 800733c:	3601      	adds	r6, #1
 800733e:	e7f2      	b.n	8007326 <__libc_init_array+0x1e>
 8007340:	080074a0 	.word	0x080074a0
 8007344:	080074a0 	.word	0x080074a0
 8007348:	080074a0 	.word	0x080074a0
 800734c:	080074a4 	.word	0x080074a4

08007350 <memcpy>:
 8007350:	440a      	add	r2, r1
 8007352:	4291      	cmp	r1, r2
 8007354:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007358:	d100      	bne.n	800735c <memcpy+0xc>
 800735a:	4770      	bx	lr
 800735c:	b510      	push	{r4, lr}
 800735e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007362:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007366:	4291      	cmp	r1, r2
 8007368:	d1f9      	bne.n	800735e <memcpy+0xe>
 800736a:	bd10      	pop	{r4, pc}

0800736c <_init>:
 800736c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800736e:	bf00      	nop
 8007370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007372:	bc08      	pop	{r3}
 8007374:	469e      	mov	lr, r3
 8007376:	4770      	bx	lr

08007378 <_fini>:
 8007378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800737a:	bf00      	nop
 800737c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800737e:	bc08      	pop	{r3}
 8007380:	469e      	mov	lr, r3
 8007382:	4770      	bx	lr
