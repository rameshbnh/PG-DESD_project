
Node-2_Battery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008350  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080084e0  080084e0  000094e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085b0  080085b0  0000a01c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080085b0  080085b0  000095b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085b8  080085b8  0000a01c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085b8  080085b8  000095b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080085bc  080085bc  000095bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080085c0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a01c  2**0
                  CONTENTS
 10 .bss          000040c8  2000001c  2000001c  0000a01c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200040e4  200040e4  0000a01c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a01c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010df9  00000000  00000000  0000a04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ce6  00000000  00000000  0001ae45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc8  00000000  00000000  0001db30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c22  00000000  00000000  0001eaf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002397e  00000000  00000000  0001f71a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012062  00000000  00000000  00043098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db297  00000000  00000000  000550fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00130391  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000422c  00000000  00000000  001303d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  00134600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080084c8 	.word	0x080084c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	080084c8 	.word	0x080084c8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	4a07      	ldr	r2, [pc, #28]	@ (8000528 <vApplicationGetIdleTaskMemory+0x2c>)
 800050c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	4a06      	ldr	r2, [pc, #24]	@ (800052c <vApplicationGetIdleTaskMemory+0x30>)
 8000512:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2280      	movs	r2, #128	@ 0x80
 8000518:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800051a:	bf00      	nop
 800051c:	3714      	adds	r7, #20
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	20000038 	.word	0x20000038
 800052c:	2000008c 	.word	0x2000008c

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b5b0      	push	{r4, r5, r7, lr}
 8000532:	b0a6      	sub	sp, #152	@ 0x98
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f001 f83b 	bl	80015b0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f8ab 	bl	8000694 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053e:	f000 f9c9 	bl	80008d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000542:	f000 f999 	bl	8000878 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000546:	f000 f90f 	bl	8000768 <MX_ADC1_Init>
  MX_CAN1_Init();
 800054a:	f000 f95f 	bl	800080c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  // Initialize INA219
  INA219_Init();
 800054e:	f000 fac7 	bl	8000ae0 <INA219_Init>

  // Calibrate ADC with dummy reads
  for(uint8_t i=0; i<5; i++) {
 8000552:	2300      	movs	r3, #0
 8000554:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8000558:	e011      	b.n	800057e <main+0x4e>
    HAL_ADC_Start(&hadc1);
 800055a:	4842      	ldr	r0, [pc, #264]	@ (8000664 <main+0x134>)
 800055c:	f001 f902 	bl	8001764 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 10);
 8000560:	210a      	movs	r1, #10
 8000562:	4840      	ldr	r0, [pc, #256]	@ (8000664 <main+0x134>)
 8000564:	f001 f9d0 	bl	8001908 <HAL_ADC_PollForConversion>
    HAL_ADC_GetValue(&hadc1);
 8000568:	483e      	ldr	r0, [pc, #248]	@ (8000664 <main+0x134>)
 800056a:	f001 fa58 	bl	8001a1e <HAL_ADC_GetValue>
    HAL_Delay(10);
 800056e:	200a      	movs	r0, #10
 8000570:	f001 f890 	bl	8001694 <HAL_Delay>
  for(uint8_t i=0; i<5; i++) {
 8000574:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000578:	3301      	adds	r3, #1
 800057a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800057e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000582:	2b04      	cmp	r3, #4
 8000584:	d9e9      	bls.n	800055a <main+0x2a>
  }
  // Initialize CAN filter (accept all messages)
  CAN_FilterTypeDef can_filter = {
 8000586:	4b38      	ldr	r3, [pc, #224]	@ (8000668 <main+0x138>)
 8000588:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 800058c:	461d      	mov	r5, r3
 800058e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000596:	e895 0003 	ldmia.w	r5, {r0, r1}
 800059a:	e884 0003 	stmia.w	r4, {r0, r1}
      .FilterMaskIdLow = 0x0000,
      .FilterFIFOAssignment = CAN_RX_FIFO0,
      .FilterActivation = ENABLE,
      .SlaveStartFilterBank = 14
  };
  HAL_CAN_ConfigFilter(&hcan1, &can_filter);
 800059e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80005a2:	4619      	mov	r1, r3
 80005a4:	4831      	ldr	r0, [pc, #196]	@ (800066c <main+0x13c>)
 80005a6:	f001 fd61 	bl	800206c <HAL_CAN_ConfigFilter>

  // Start CAN
  HAL_CAN_Start(&hcan1);
 80005aa:	4830      	ldr	r0, [pc, #192]	@ (800066c <main+0x13c>)
 80005ac:	f001 fe3e 	bl	800222c <HAL_CAN_Start>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of batteryDataMutex */
  osMutexDef(batteryDataMutex);
 80005b0:	2300      	movs	r3, #0
 80005b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80005b4:	2300      	movs	r3, #0
 80005b6:	66bb      	str	r3, [r7, #104]	@ 0x68
  batteryDataMutexHandle = osMutexCreate(osMutex(batteryDataMutex));
 80005b8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80005bc:	4618      	mov	r0, r3
 80005be:	f005 fb62 	bl	8005c86 <osMutexCreate>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a2a      	ldr	r2, [pc, #168]	@ (8000670 <main+0x140>)
 80005c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of BatterQueue */
  osMessageQDef(BatterQueue, 8, uint16_t);
 80005c8:	4b2a      	ldr	r3, [pc, #168]	@ (8000674 <main+0x144>)
 80005ca:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80005ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  BatterQueueHandle = osMessageCreate(osMessageQ(BatterQueue), NULL);
 80005d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f005 fbf0 	bl	8005dc0 <osMessageCreate>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a25      	ldr	r2, [pc, #148]	@ (8000678 <main+0x148>)
 80005e4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80005e6:	4b25      	ldr	r3, [pc, #148]	@ (800067c <main+0x14c>)
 80005e8:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80005ec:	461d      	mov	r5, r3
 80005ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005fa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f005 fae0 	bl	8005bc6 <osThreadCreate>
 8000606:	4603      	mov	r3, r0
 8000608:	4a1d      	ldr	r2, [pc, #116]	@ (8000680 <main+0x150>)
 800060a:	6013      	str	r3, [r2, #0]

  /* definition and creation of batteryMonitorT */
  osThreadDef(batteryMonitorT, StartBatteryMonitorTask, osPriorityAboveNormal, 0, 256);
 800060c:	4b1d      	ldr	r3, [pc, #116]	@ (8000684 <main+0x154>)
 800060e:	f107 041c 	add.w	r4, r7, #28
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  batteryMonitorTHandle = osThreadCreate(osThread(batteryMonitorT), NULL);
 8000620:	f107 031c 	add.w	r3, r7, #28
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f005 facd 	bl	8005bc6 <osThreadCreate>
 800062c:	4603      	mov	r3, r0
 800062e:	4a16      	ldr	r2, [pc, #88]	@ (8000688 <main+0x158>)
 8000630:	6013      	str	r3, [r2, #0]

  /* definition and creation of canTask */
  osThreadDef(canTask, StartCANTask, osPriorityNormal, 0, 256);
 8000632:	4b16      	ldr	r3, [pc, #88]	@ (800068c <main+0x15c>)
 8000634:	463c      	mov	r4, r7
 8000636:	461d      	mov	r5, r3
 8000638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000640:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canTaskHandle = osThreadCreate(osThread(canTask), NULL);
 8000644:	463b      	mov	r3, r7
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f005 fabc 	bl	8005bc6 <osThreadCreate>
 800064e:	4603      	mov	r3, r0
 8000650:	4a0f      	ldr	r2, [pc, #60]	@ (8000690 <main+0x160>)
 8000652:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000654:	f005 fab0 	bl	8005bb8 <osKernelStart>
 8000658:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 800065a:	4618      	mov	r0, r3
 800065c:	3798      	adds	r7, #152	@ 0x98
 800065e:	46bd      	mov	sp, r7
 8000660:	bdb0      	pop	{r4, r5, r7, pc}
 8000662:	bf00      	nop
 8000664:	2000028c 	.word	0x2000028c
 8000668:	080084e0 	.word	0x080084e0
 800066c:	200002d4 	.word	0x200002d4
 8000670:	20000360 	.word	0x20000360
 8000674:	08008508 	.word	0x08008508
 8000678:	2000035c 	.word	0x2000035c
 800067c:	08008524 	.word	0x08008524
 8000680:	20000350 	.word	0x20000350
 8000684:	08008550 	.word	0x08008550
 8000688:	20000354 	.word	0x20000354
 800068c:	08008574 	.word	0x08008574
 8000690:	20000358 	.word	0x20000358

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	@ 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	@ 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f007 fe80 	bl	80083a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b28      	ldr	r3, [pc, #160]	@ (8000760 <SystemClock_Config+0xcc>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c0:	4a27      	ldr	r2, [pc, #156]	@ (8000760 <SystemClock_Config+0xcc>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c8:	4b25      	ldr	r3, [pc, #148]	@ (8000760 <SystemClock_Config+0xcc>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b22      	ldr	r3, [pc, #136]	@ (8000764 <SystemClock_Config+0xd0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a21      	ldr	r2, [pc, #132]	@ (8000764 <SystemClock_Config+0xd0>)
 80006de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000764 <SystemClock_Config+0xd0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f0:	2301      	movs	r3, #1
 80006f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	2302      	movs	r3, #2
 80006fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000702:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000704:	2308      	movs	r3, #8
 8000706:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000708:	23c0      	movs	r3, #192	@ 0xc0
 800070a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070c:	2302      	movs	r3, #2
 800070e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000710:	2304      	movs	r3, #4
 8000712:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 0320 	add.w	r3, r7, #32
 8000718:	4618      	mov	r0, r3
 800071a:	f004 fd9f 	bl	800525c <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000724:	f000 fdc6 	bl	80012b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000728:	230f      	movs	r3, #15
 800072a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072c:	2302      	movs	r3, #2
 800072e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000734:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000738:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800073e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2103      	movs	r1, #3
 8000746:	4618      	mov	r0, r3
 8000748:	f005 f800 	bl	800574c <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000752:	f000 fdaf 	bl	80012b4 <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3750      	adds	r7, #80	@ 0x50
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800076e:	463b      	mov	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800077a:	4b21      	ldr	r3, [pc, #132]	@ (8000800 <MX_ADC1_Init+0x98>)
 800077c:	4a21      	ldr	r2, [pc, #132]	@ (8000804 <MX_ADC1_Init+0x9c>)
 800077e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000780:	4b1f      	ldr	r3, [pc, #124]	@ (8000800 <MX_ADC1_Init+0x98>)
 8000782:	2200      	movs	r2, #0
 8000784:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000786:	4b1e      	ldr	r3, [pc, #120]	@ (8000800 <MX_ADC1_Init+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800078c:	4b1c      	ldr	r3, [pc, #112]	@ (8000800 <MX_ADC1_Init+0x98>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000792:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <MX_ADC1_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000798:	4b19      	ldr	r3, [pc, #100]	@ (8000800 <MX_ADC1_Init+0x98>)
 800079a:	2200      	movs	r2, #0
 800079c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a0:	4b17      	ldr	r3, [pc, #92]	@ (8000800 <MX_ADC1_Init+0x98>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a6:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <MX_ADC1_Init+0x98>)
 80007a8:	4a17      	ldr	r2, [pc, #92]	@ (8000808 <MX_ADC1_Init+0xa0>)
 80007aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ac:	4b14      	ldr	r3, [pc, #80]	@ (8000800 <MX_ADC1_Init+0x98>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007b2:	4b13      	ldr	r3, [pc, #76]	@ (8000800 <MX_ADC1_Init+0x98>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007b8:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <MX_ADC1_Init+0x98>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <MX_ADC1_Init+0x98>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c6:	480e      	ldr	r0, [pc, #56]	@ (8000800 <MX_ADC1_Init+0x98>)
 80007c8:	f000 ff88 	bl	80016dc <HAL_ADC_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007d2:	f000 fd6f 	bl	80012b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007d6:	2301      	movs	r3, #1
 80007d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007da:	2301      	movs	r3, #1
 80007dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e2:	463b      	mov	r3, r7
 80007e4:	4619      	mov	r1, r3
 80007e6:	4806      	ldr	r0, [pc, #24]	@ (8000800 <MX_ADC1_Init+0x98>)
 80007e8:	f001 f926 	bl	8001a38 <HAL_ADC_ConfigChannel>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007f2:	f000 fd5f 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	2000028c 	.word	0x2000028c
 8000804:	40012000 	.word	0x40012000
 8000808:	0f000001 	.word	0x0f000001

0800080c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_Init 0 */
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */
  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000810:	4b17      	ldr	r3, [pc, #92]	@ (8000870 <MX_CAN1_Init+0x64>)
 8000812:	4a18      	ldr	r2, [pc, #96]	@ (8000874 <MX_CAN1_Init+0x68>)
 8000814:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000816:	4b16      	ldr	r3, [pc, #88]	@ (8000870 <MX_CAN1_Init+0x64>)
 8000818:	2203      	movs	r2, #3
 800081a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800081c:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <MX_CAN1_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000822:	4b13      	ldr	r3, [pc, #76]	@ (8000870 <MX_CAN1_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000828:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <MX_CAN1_Init+0x64>)
 800082a:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 800082e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000830:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <MX_CAN1_Init+0x64>)
 8000832:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000836:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000838:	4b0d      	ldr	r3, [pc, #52]	@ (8000870 <MX_CAN1_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800083e:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <MX_CAN1_Init+0x64>)
 8000840:	2200      	movs	r2, #0
 8000842:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000844:	4b0a      	ldr	r3, [pc, #40]	@ (8000870 <MX_CAN1_Init+0x64>)
 8000846:	2200      	movs	r2, #0
 8000848:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800084a:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <MX_CAN1_Init+0x64>)
 800084c:	2200      	movs	r2, #0
 800084e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000850:	4b07      	ldr	r3, [pc, #28]	@ (8000870 <MX_CAN1_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000856:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <MX_CAN1_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800085c:	4804      	ldr	r0, [pc, #16]	@ (8000870 <MX_CAN1_Init+0x64>)
 800085e:	f001 fb09 	bl	8001e74 <HAL_CAN_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000868:	f000 fd24 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  /* USER CODE END CAN1_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200002d4 	.word	0x200002d4
 8000874:	40006400 	.word	0x40006400

08000878 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800087c:	4b12      	ldr	r3, [pc, #72]	@ (80008c8 <MX_I2C1_Init+0x50>)
 800087e:	4a13      	ldr	r2, [pc, #76]	@ (80008cc <MX_I2C1_Init+0x54>)
 8000880:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000882:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <MX_I2C1_Init+0x50>)
 8000884:	4a12      	ldr	r2, [pc, #72]	@ (80008d0 <MX_I2C1_Init+0x58>)
 8000886:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000888:	4b0f      	ldr	r3, [pc, #60]	@ (80008c8 <MX_I2C1_Init+0x50>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <MX_I2C1_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000894:	4b0c      	ldr	r3, [pc, #48]	@ (80008c8 <MX_I2C1_Init+0x50>)
 8000896:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800089a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800089c:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <MX_I2C1_Init+0x50>)
 800089e:	2200      	movs	r2, #0
 80008a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008a2:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <MX_I2C1_Init+0x50>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a8:	4b07      	ldr	r3, [pc, #28]	@ (80008c8 <MX_I2C1_Init+0x50>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ae:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <MX_I2C1_Init+0x50>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	@ (80008c8 <MX_I2C1_Init+0x50>)
 80008b6:	f002 f8df 	bl	8002a78 <HAL_I2C_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008c0:	f000 fcf8 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200002fc 	.word	0x200002fc
 80008cc:	40005400 	.word	0x40005400
 80008d0:	000186a0 	.word	0x000186a0

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	@ 0x28
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

	// Add in MX_GPIO_Init():
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	4b34      	ldr	r3, [pc, #208]	@ (80009c0 <MX_GPIO_Init+0xec>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a33      	ldr	r2, [pc, #204]	@ (80009c0 <MX_GPIO_Init+0xec>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b31      	ldr	r3, [pc, #196]	@ (80009c0 <MX_GPIO_Init+0xec>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000906:	2302      	movs	r3, #2
 8000908:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800090a:	2303      	movs	r3, #3
 800090c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	482a      	ldr	r0, [pc, #168]	@ (80009c4 <MX_GPIO_Init+0xf0>)
 800091a:	f001 fedd 	bl	80026d8 <HAL_GPIO_Init>

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	4b27      	ldr	r3, [pc, #156]	@ (80009c0 <MX_GPIO_Init+0xec>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a26      	ldr	r2, [pc, #152]	@ (80009c0 <MX_GPIO_Init+0xec>)
 8000928:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b24      	ldr	r3, [pc, #144]	@ (80009c0 <MX_GPIO_Init+0xec>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	4b20      	ldr	r3, [pc, #128]	@ (80009c0 <MX_GPIO_Init+0xec>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a1f      	ldr	r2, [pc, #124]	@ (80009c0 <MX_GPIO_Init+0xec>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b1d      	ldr	r3, [pc, #116]	@ (80009c0 <MX_GPIO_Init+0xec>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b19      	ldr	r3, [pc, #100]	@ (80009c0 <MX_GPIO_Init+0xec>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a18      	ldr	r2, [pc, #96]	@ (80009c0 <MX_GPIO_Init+0xec>)
 8000960:	f043 0308 	orr.w	r3, r3, #8
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b16      	ldr	r3, [pc, #88]	@ (80009c0 <MX_GPIO_Init+0xec>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0308 	and.w	r3, r3, #8
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <MX_GPIO_Init+0xec>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a11      	ldr	r2, [pc, #68]	@ (80009c0 <MX_GPIO_Init+0xec>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <MX_GPIO_Init+0xec>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0302 	and.w	r3, r3, #2
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000994:	480c      	ldr	r0, [pc, #48]	@ (80009c8 <MX_GPIO_Init+0xf4>)
 8000996:	f002 f83b 	bl	8002a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800099a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4619      	mov	r1, r3
 80009b2:	4805      	ldr	r0, [pc, #20]	@ (80009c8 <MX_GPIO_Init+0xf4>)
 80009b4:	f001 fe90 	bl	80026d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80009b8:	bf00      	nop
 80009ba:	3728      	adds	r7, #40	@ 0x28
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020000 	.word	0x40020000
 80009c8:	40020c00 	.word	0x40020c00

080009cc <Update_Battery_Parameters>:

/* USER CODE BEGIN 4 */
void Update_Battery_Parameters(void) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
	 // Read voltage with validation
	    float measured_voltage = INA219_ReadBusVoltage();
 80009d2:	f000 f903 	bl	8000bdc <INA219_ReadBusVoltage>
 80009d6:	ed87 0a01 	vstr	s0, [r7, #4]
	    if (measured_voltage < 5.0f || measured_voltage > 15.0f) { // Sanity check
 80009da:	edd7 7a01 	vldr	s15, [r7, #4]
 80009de:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80009e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ea:	d408      	bmi.n	80009fe <Update_Battery_Parameters+0x32>
 80009ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80009f0:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80009f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009fc:	dd04      	ble.n	8000a08 <Update_Battery_Parameters+0x3c>
	        g_voltage = 0;
 80009fe:	4b32      	ldr	r3, [pc, #200]	@ (8000ac8 <Update_Battery_Parameters+0xfc>)
 8000a00:	f04f 0200 	mov.w	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	e002      	b.n	8000a0e <Update_Battery_Parameters+0x42>
	    } else {
	        g_voltage = measured_voltage;
 8000a08:	4a2f      	ldr	r2, [pc, #188]	@ (8000ac8 <Update_Battery_Parameters+0xfc>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6013      	str	r3, [r2, #0]
	    }
  g_current = INA219_ReadCurrent();
 8000a0e:	f000 f903 	bl	8000c18 <INA219_ReadCurrent>
 8000a12:	eef0 7a40 	vmov.f32	s15, s0
 8000a16:	4b2d      	ldr	r3, [pc, #180]	@ (8000acc <Update_Battery_Parameters+0x100>)
 8000a18:	edc3 7a00 	vstr	s15, [r3]
  // Read LM35 for battery temperature
  g_temperature = Read_LM35_Temperature();
 8000a1c:	f000 f928 	bl	8000c70 <Read_LM35_Temperature>
 8000a20:	eef0 7a40 	vmov.f32	s15, s0
 8000a24:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad0 <Update_Battery_Parameters+0x104>)
 8000a26:	edc3 7a00 	vstr	s15, [r3]
  // Calculate SOC and SOH
  g_soc = Calculate_SOC(g_current, g_voltage);
 8000a2a:	4b28      	ldr	r3, [pc, #160]	@ (8000acc <Update_Battery_Parameters+0x100>)
 8000a2c:	edd3 7a00 	vldr	s15, [r3]
 8000a30:	4b25      	ldr	r3, [pc, #148]	@ (8000ac8 <Update_Battery_Parameters+0xfc>)
 8000a32:	ed93 7a00 	vldr	s14, [r3]
 8000a36:	eef0 0a47 	vmov.f32	s1, s14
 8000a3a:	eeb0 0a67 	vmov.f32	s0, s15
 8000a3e:	f000 f9bd 	bl	8000dbc <Calculate_SOC>
 8000a42:	eef0 7a40 	vmov.f32	s15, s0
 8000a46:	4b23      	ldr	r3, [pc, #140]	@ (8000ad4 <Update_Battery_Parameters+0x108>)
 8000a48:	edc3 7a00 	vstr	s15, [r3]
  g_soh = Calculate_SOH();
 8000a4c:	f000 fb2a 	bl	80010a4 <Calculate_SOH>
 8000a50:	eef0 7a40 	vmov.f32	s15, s0
 8000a54:	4b20      	ldr	r3, [pc, #128]	@ (8000ad8 <Update_Battery_Parameters+0x10c>)
 8000a56:	edc3 7a00 	vstr	s15, [r3]

  // Update the battery data structure
  batteryData.soc = g_soc;
 8000a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad4 <Update_Battery_Parameters+0x108>)
 8000a5c:	edd3 7a00 	vldr	s15, [r3]
 8000a60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a64:	ee17 3a90 	vmov	r3, s15
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000adc <Update_Battery_Parameters+0x110>)
 8000a6c:	801a      	strh	r2, [r3, #0]
  batteryData.soh = g_soh;
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <Update_Battery_Parameters+0x10c>)
 8000a70:	edd3 7a00 	vldr	s15, [r3]
 8000a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a78:	ee17 3a90 	vmov	r3, s15
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	4b17      	ldr	r3, [pc, #92]	@ (8000adc <Update_Battery_Parameters+0x110>)
 8000a80:	805a      	strh	r2, [r3, #2]
  batteryData.temperature = g_temperature;
 8000a82:	4b13      	ldr	r3, [pc, #76]	@ (8000ad0 <Update_Battery_Parameters+0x104>)
 8000a84:	edd3 7a00 	vldr	s15, [r3]
 8000a88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a8c:	ee17 3a90 	vmov	r3, s15
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <Update_Battery_Parameters+0x110>)
 8000a94:	809a      	strh	r2, [r3, #4]
  batteryData.voltage = g_voltage;
 8000a96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <Update_Battery_Parameters+0xfc>)
 8000a98:	edd3 7a00 	vldr	s15, [r3]
 8000a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aa0:	ee17 3a90 	vmov	r3, s15
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8000adc <Update_Battery_Parameters+0x110>)
 8000aa8:	80da      	strh	r2, [r3, #6]
  batteryData.current = g_current;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <Update_Battery_Parameters+0x100>)
 8000aac:	edd3 7a00 	vldr	s15, [r3]
 8000ab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ab4:	ee17 3a90 	vmov	r3, s15
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <Update_Battery_Parameters+0x110>)
 8000abc:	811a      	strh	r2, [r3, #8]
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000364 	.word	0x20000364
 8000acc:	20000368 	.word	0x20000368
 8000ad0:	2000036c 	.word	0x2000036c
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	20000004 	.word	0x20000004
 8000adc:	20000374 	.word	0x20000374

08000ae0 <INA219_Init>:
/* INA219 Functions */
void INA219_Init(void) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
  // Reset the INA219
  INA219_WriteReg(INA219_CONFIG, 0x8000);
 8000ae6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000aea:	2000      	movs	r0, #0
 8000aec:	f000 f82c 	bl	8000b48 <INA219_WriteReg>
  HAL_Delay(10);
 8000af0:	200a      	movs	r0, #10
 8000af2:	f000 fdcf 	bl	8001694 <HAL_Delay>

  // Configure for 32V range, 12-bit ADC
  uint16_t config = 0x399F;
 8000af6:	f643 139f 	movw	r3, #14751	@ 0x399f
 8000afa:	81fb      	strh	r3, [r7, #14]
  INA219_WriteReg(INA219_CONFIG, config);
 8000afc:	89fb      	ldrh	r3, [r7, #14]
 8000afe:	4619      	mov	r1, r3
 8000b00:	2000      	movs	r0, #0
 8000b02:	f000 f821 	bl	8000b48 <INA219_WriteReg>

  // Calibration for 3.2A range, 0.1Ω shunt
  float current_LSB = 3.2f / 32768.0f;
 8000b06:	4b0d      	ldr	r3, [pc, #52]	@ (8000b3c <INA219_Init+0x5c>)
 8000b08:	60bb      	str	r3, [r7, #8]
  uint16_t cal = (uint16_t)(0.04096f / (current_LSB * 0.1f));
 8000b0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b0e:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8000b40 <INA219_Init+0x60>
 8000b12:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b16:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8000b44 <INA219_Init+0x64>
 8000b1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b22:	ee17 3a90 	vmov	r3, s15
 8000b26:	80fb      	strh	r3, [r7, #6]
  INA219_WriteReg(INA219_CAL, cal);
 8000b28:	88fb      	ldrh	r3, [r7, #6]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	2005      	movs	r0, #5
 8000b2e:	f000 f80b 	bl	8000b48 <INA219_WriteReg>
}
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	38cccccd 	.word	0x38cccccd
 8000b40:	3dcccccd 	.word	0x3dcccccd
 8000b44:	3d27c5ac 	.word	0x3d27c5ac

08000b48 <INA219_WriteReg>:

void INA219_WriteReg(uint8_t reg, uint16_t value) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af02      	add	r7, sp, #8
 8000b4e:	4603      	mov	r3, r0
 8000b50:	460a      	mov	r2, r1
 8000b52:	71fb      	strb	r3, [r7, #7]
 8000b54:	4613      	mov	r3, r2
 8000b56:	80bb      	strh	r3, [r7, #4]
  uint8_t data[3] = {reg, (uint8_t)(value >> 8), (uint8_t)(value & 0xFF)};
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	733b      	strb	r3, [r7, #12]
 8000b5c:	88bb      	ldrh	r3, [r7, #4]
 8000b5e:	0a1b      	lsrs	r3, r3, #8
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	737b      	strb	r3, [r7, #13]
 8000b66:	88bb      	ldrh	r3, [r7, #4]
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	73bb      	strb	r3, [r7, #14]
  HAL_I2C_Master_Transmit(&hi2c1, INA219_ADDRESS, data, 3, HAL_MAX_DELAY);
 8000b6c:	f107 020c 	add.w	r2, r7, #12
 8000b70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	2303      	movs	r3, #3
 8000b78:	2180      	movs	r1, #128	@ 0x80
 8000b7a:	4803      	ldr	r0, [pc, #12]	@ (8000b88 <INA219_WriteReg+0x40>)
 8000b7c:	f002 f8d6 	bl	8002d2c <HAL_I2C_Master_Transmit>
}
 8000b80:	bf00      	nop
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200002fc 	.word	0x200002fc

08000b8c <INA219_ReadReg>:

uint16_t INA219_ReadReg(uint8_t reg) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af02      	add	r7, sp, #8
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
  uint8_t data[2];
  HAL_I2C_Master_Transmit(&hi2c1, INA219_ADDRESS, &reg, 1, HAL_MAX_DELAY);
 8000b96:	1dfa      	adds	r2, r7, #7
 8000b98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	2180      	movs	r1, #128	@ 0x80
 8000ba2:	480d      	ldr	r0, [pc, #52]	@ (8000bd8 <INA219_ReadReg+0x4c>)
 8000ba4:	f002 f8c2 	bl	8002d2c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, INA219_ADDRESS, data, 2, HAL_MAX_DELAY);
 8000ba8:	f107 020c 	add.w	r2, r7, #12
 8000bac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	2180      	movs	r1, #128	@ 0x80
 8000bb6:	4808      	ldr	r0, [pc, #32]	@ (8000bd8 <INA219_ReadReg+0x4c>)
 8000bb8:	f002 f9b6 	bl	8002f28 <HAL_I2C_Master_Receive>
  return (data[0] << 8) | data[1];
 8000bbc:	7b3b      	ldrb	r3, [r7, #12]
 8000bbe:	b21b      	sxth	r3, r3
 8000bc0:	021b      	lsls	r3, r3, #8
 8000bc2:	b21a      	sxth	r2, r3
 8000bc4:	7b7b      	ldrb	r3, [r7, #13]
 8000bc6:	b21b      	sxth	r3, r3
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	b21b      	sxth	r3, r3
 8000bcc:	b29b      	uxth	r3, r3
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	200002fc 	.word	0x200002fc

08000bdc <INA219_ReadBusVoltage>:

float INA219_ReadBusVoltage(void) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
  uint16_t reg = INA219_ReadReg(INA219_BUS);
 8000be2:	2002      	movs	r0, #2
 8000be4:	f7ff ffd2 	bl	8000b8c <INA219_ReadReg>
 8000be8:	4603      	mov	r3, r0
 8000bea:	80fb      	strh	r3, [r7, #6]
  return (float)((reg >> 3) * 4) / 1000.0f;  // Convert to volts
 8000bec:	88fb      	ldrh	r3, [r7, #6]
 8000bee:	08db      	lsrs	r3, r3, #3
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	ee07 3a90 	vmov	s15, r3
 8000bf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bfc:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8000c14 <INA219_ReadBusVoltage+0x38>
 8000c00:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000c04:	eef0 7a66 	vmov.f32	s15, s13
}
 8000c08:	eeb0 0a67 	vmov.f32	s0, s15
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	447a0000 	.word	0x447a0000

08000c18 <INA219_ReadCurrent>:

float INA219_ReadCurrent(void) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
  int16_t reg = (int16_t)INA219_ReadReg(INA219_CURRENT);
 8000c1e:	2004      	movs	r0, #4
 8000c20:	f7ff ffb4 	bl	8000b8c <INA219_ReadReg>
 8000c24:	4603      	mov	r3, r0
 8000c26:	80fb      	strh	r3, [r7, #6]
  float current = (float)reg * 0.1f;  // 0.1mA per LSB
 8000c28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c2c:	ee07 3a90 	vmov	s15, r3
 8000c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c34:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000c6c <INA219_ReadCurrent+0x54>
 8000c38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c3c:	edc7 7a00 	vstr	s15, [r7]

  // Add deadzone for noise rejection
  if (fabs(current) < 5.0f) return 0.0f;  // Treat <5mA as 0
 8000c40:	edd7 7a00 	vldr	s15, [r7]
 8000c44:	eef0 7ae7 	vabs.f32	s15, s15
 8000c48:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000c4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c54:	d502      	bpl.n	8000c5c <INA219_ReadCurrent+0x44>
 8000c56:	f04f 0300 	mov.w	r3, #0
 8000c5a:	e000      	b.n	8000c5e <INA219_ReadCurrent+0x46>
  return current;
 8000c5c:	683b      	ldr	r3, [r7, #0]
}
 8000c5e:	ee07 3a90 	vmov	s15, r3
 8000c62:	eeb0 0a67 	vmov.f32	s0, s15
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	3dcccccd 	.word	0x3dcccccd

08000c70 <Read_LM35_Temperature>:

/* LM35 Temperature Sensor Function */
float Read_LM35_Temperature(void) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0

    static uint8_t invalid_count = 0;
    static float last_valid_temp = 0.0f;

    // Average over 5 samples
    float voltage_sum = 0.0f;
 8000c76:	f04f 0300 	mov.w	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
    const uint8_t samples = 5;
 8000c7c:	2305      	movs	r3, #5
 8000c7e:	74bb      	strb	r3, [r7, #18]
    for (uint8_t i = 0; i < samples; i++) {
 8000c80:	2300      	movs	r3, #0
 8000c82:	74fb      	strb	r3, [r7, #19]
 8000c84:	e02a      	b.n	8000cdc <Read_LM35_Temperature+0x6c>
        HAL_ADC_Start(&hadc1);
 8000c86:	4845      	ldr	r0, [pc, #276]	@ (8000d9c <Read_LM35_Temperature+0x12c>)
 8000c88:	f000 fd6c 	bl	8001764 <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8000c8c:	210a      	movs	r1, #10
 8000c8e:	4843      	ldr	r0, [pc, #268]	@ (8000d9c <Read_LM35_Temperature+0x12c>)
 8000c90:	f000 fe3a 	bl	8001908 <HAL_ADC_PollForConversion>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d11a      	bne.n	8000cd0 <Read_LM35_Temperature+0x60>
            uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 8000c9a:	4840      	ldr	r0, [pc, #256]	@ (8000d9c <Read_LM35_Temperature+0x12c>)
 8000c9c:	f000 febf 	bl	8001a1e <HAL_ADC_GetValue>
 8000ca0:	60b8      	str	r0, [r7, #8]
            float voltage = (adcValue * VREF) / 4095.0f;
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	ee07 3a90 	vmov	s15, r3
 8000ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cac:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8000da0 <Read_LM35_Temperature+0x130>
 8000cb0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cb4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8000da4 <Read_LM35_Temperature+0x134>
 8000cb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cbc:	edc7 7a01 	vstr	s15, [r7, #4]
            voltage_sum += voltage;
 8000cc0:	ed97 7a05 	vldr	s14, [r7, #20]
 8000cc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ccc:	edc7 7a05 	vstr	s15, [r7, #20]
        }
        HAL_Delay(2);
 8000cd0:	2002      	movs	r0, #2
 8000cd2:	f000 fcdf 	bl	8001694 <HAL_Delay>
    for (uint8_t i = 0; i < samples; i++) {
 8000cd6:	7cfb      	ldrb	r3, [r7, #19]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	74fb      	strb	r3, [r7, #19]
 8000cdc:	7cfa      	ldrb	r2, [r7, #19]
 8000cde:	7cbb      	ldrb	r3, [r7, #18]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d3d0      	bcc.n	8000c86 <Read_LM35_Temperature+0x16>
    }

    float avg_voltage = voltage_sum / samples;
 8000ce4:	7cbb      	ldrb	r3, [r7, #18]
 8000ce6:	ee07 3a90 	vmov	s15, r3
 8000cea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cee:	edd7 6a05 	vldr	s13, [r7, #20]
 8000cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cf6:	edc7 7a03 	vstr	s15, [r7, #12]

    // Disconnected check
    if (avg_voltage < DISCONNECTED_VOLTAGE) {
 8000cfa:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cfe:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8000da8 <Read_LM35_Temperature+0x138>
 8000d02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d0a:	d50f      	bpl.n	8000d2c <Read_LM35_Temperature+0xbc>
        invalid_count++;
 8000d0c:	4b27      	ldr	r3, [pc, #156]	@ (8000dac <Read_LM35_Temperature+0x13c>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	3301      	adds	r3, #1
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	4b25      	ldr	r3, [pc, #148]	@ (8000dac <Read_LM35_Temperature+0x13c>)
 8000d16:	701a      	strb	r2, [r3, #0]
        if (invalid_count >= INVALID_READING_THRESHOLD) {
 8000d18:	4b24      	ldr	r3, [pc, #144]	@ (8000dac <Read_LM35_Temperature+0x13c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b04      	cmp	r3, #4
 8000d1e:	d902      	bls.n	8000d26 <Read_LM35_Temperature+0xb6>
            return 0.0f;  // Confirmed disconnected
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	e032      	b.n	8000d8c <Read_LM35_Temperature+0x11c>
        }
        return last_valid_temp;
 8000d26:	4b22      	ldr	r3, [pc, #136]	@ (8000db0 <Read_LM35_Temperature+0x140>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	e02f      	b.n	8000d8c <Read_LM35_Temperature+0x11c>
    }

    // Valid voltage range check
    if (avg_voltage >= MIN_VALID_VOLTAGE && avg_voltage <= MAX_VALID_VOLTAGE) {
 8000d2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d30:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8000db4 <Read_LM35_Temperature+0x144>
 8000d34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d3c:	db17      	blt.n	8000d6e <Read_LM35_Temperature+0xfe>
 8000d3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d42:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8000d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d4e:	d80e      	bhi.n	8000d6e <Read_LM35_Temperature+0xfe>
        invalid_count = 0;
 8000d50:	4b16      	ldr	r3, [pc, #88]	@ (8000dac <Read_LM35_Temperature+0x13c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
        last_valid_temp = avg_voltage * 100.0f;  // LM35: 10mV/°C
 8000d56:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d5a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000db8 <Read_LM35_Temperature+0x148>
 8000d5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d62:	4b13      	ldr	r3, [pc, #76]	@ (8000db0 <Read_LM35_Temperature+0x140>)
 8000d64:	edc3 7a00 	vstr	s15, [r3]
        return last_valid_temp;
 8000d68:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <Read_LM35_Temperature+0x140>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	e00e      	b.n	8000d8c <Read_LM35_Temperature+0x11c>
    }

    // If out-of-range, keep last value temporarily
    invalid_count++;
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <Read_LM35_Temperature+0x13c>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	3301      	adds	r3, #1
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4b0d      	ldr	r3, [pc, #52]	@ (8000dac <Read_LM35_Temperature+0x13c>)
 8000d78:	701a      	strb	r2, [r3, #0]
    if (invalid_count >= INVALID_READING_THRESHOLD) {
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <Read_LM35_Temperature+0x13c>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	d902      	bls.n	8000d88 <Read_LM35_Temperature+0x118>
        return 0.0f;
 8000d82:	f04f 0300 	mov.w	r3, #0
 8000d86:	e001      	b.n	8000d8c <Read_LM35_Temperature+0x11c>
    }
    return last_valid_temp;
 8000d88:	4b09      	ldr	r3, [pc, #36]	@ (8000db0 <Read_LM35_Temperature+0x140>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
}
 8000d8c:	ee07 3a90 	vmov	s15, r3
 8000d90:	eeb0 0a67 	vmov.f32	s0, s15
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000028c 	.word	0x2000028c
 8000da0:	40533333 	.word	0x40533333
 8000da4:	457ff000 	.word	0x457ff000
 8000da8:	3cf5c28f 	.word	0x3cf5c28f
 8000dac:	2000037e 	.word	0x2000037e
 8000db0:	20000380 	.word	0x20000380
 8000db4:	3dcccccd 	.word	0x3dcccccd
 8000db8:	42c80000 	.word	0x42c80000

08000dbc <Calculate_SOC>:

/* Battery Calculations */
float Calculate_SOC(float current_mA, float voltage_V) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000dc6:	edc7 0a00 	vstr	s1, [r7]
    static bool initialized = false;
    static uint32_t lastTime = 0;

    if (!initialized || (HAL_GetTick() - lastTime > 3600000)) { // 1-hour timeout
 8000dca:	4b62      	ldr	r3, [pc, #392]	@ (8000f54 <Calculate_SOC+0x198>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	f083 0301 	eor.w	r3, r3, #1
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d108      	bne.n	8000dea <Calculate_SOC+0x2e>
 8000dd8:	f000 fc50 	bl	800167c <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	4b5e      	ldr	r3, [pc, #376]	@ (8000f58 <Calculate_SOC+0x19c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	4a5d      	ldr	r2, [pc, #372]	@ (8000f5c <Calculate_SOC+0x1a0>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d91f      	bls.n	8000e2a <Calculate_SOC+0x6e>
        g_remainingCapacity_mAh = VoltageBased_SOC(voltage_V)/100.0f * BATTERY_CAPACITY_mAh;
 8000dea:	ed97 0a00 	vldr	s0, [r7]
 8000dee:	f000 f8cb 	bl	8000f88 <VoltageBased_SOC>
 8000df2:	eeb0 7a40 	vmov.f32	s14, s0
 8000df6:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8000f60 <Calculate_SOC+0x1a4>
 8000dfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dfe:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8000f64 <Calculate_SOC+0x1a8>
 8000e02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e06:	4b58      	ldr	r3, [pc, #352]	@ (8000f68 <Calculate_SOC+0x1ac>)
 8000e08:	edc3 7a00 	vstr	s15, [r3]
        initialized = true;
 8000e0c:	4b51      	ldr	r3, [pc, #324]	@ (8000f54 <Calculate_SOC+0x198>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	701a      	strb	r2, [r3, #0]
        lastTime = HAL_GetTick();
 8000e12:	f000 fc33 	bl	800167c <HAL_GetTick>
 8000e16:	4603      	mov	r3, r0
 8000e18:	4a4f      	ldr	r2, [pc, #316]	@ (8000f58 <Calculate_SOC+0x19c>)
 8000e1a:	6013      	str	r3, [r2, #0]
        return VoltageBased_SOC(voltage_V);
 8000e1c:	ed97 0a00 	vldr	s0, [r7]
 8000e20:	f000 f8b2 	bl	8000f88 <VoltageBased_SOC>
 8000e24:	eef0 7a40 	vmov.f32	s15, s0
 8000e28:	e08e      	b.n	8000f48 <Calculate_SOC+0x18c>
    }

    // Calculate time difference in hours
    float delta_h = (HAL_GetTick() - lastTime) / 3600000.0f;
 8000e2a:	f000 fc27 	bl	800167c <HAL_GetTick>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	4b49      	ldr	r3, [pc, #292]	@ (8000f58 <Calculate_SOC+0x19c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	ee07 3a90 	vmov	s15, r3
 8000e3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e3e:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8000f6c <Calculate_SOC+0x1b0>
 8000e42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e46:	edc7 7a03 	vstr	s15, [r7, #12]
    lastTime = HAL_GetTick();
 8000e4a:	f000 fc17 	bl	800167c <HAL_GetTick>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	4a41      	ldr	r2, [pc, #260]	@ (8000f58 <Calculate_SOC+0x19c>)
 8000e52:	6013      	str	r3, [r2, #0]

    // Handle charging/discharging
    if (current_mA > 0.1f) { // Discharging (ignore noise < 0.1mA)
 8000e54:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e58:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8000f70 <Calculate_SOC+0x1b4>
 8000e5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e64:	dd1c      	ble.n	8000ea0 <Calculate_SOC+0xe4>
        g_remainingCapacity_mAh -= current_mA * delta_h;
 8000e66:	4b40      	ldr	r3, [pc, #256]	@ (8000f68 <Calculate_SOC+0x1ac>)
 8000e68:	ed93 7a00 	vldr	s14, [r3]
 8000e6c:	edd7 6a01 	vldr	s13, [r7, #4]
 8000e70:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e7c:	4b3a      	ldr	r3, [pc, #232]	@ (8000f68 <Calculate_SOC+0x1ac>)
 8000e7e:	edc3 7a00 	vstr	s15, [r3]
        g_totalDischarged_mAh += current_mA * delta_h;
 8000e82:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e86:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e8e:	4b39      	ldr	r3, [pc, #228]	@ (8000f74 <Calculate_SOC+0x1b8>)
 8000e90:	edd3 7a00 	vldr	s15, [r3]
 8000e94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e98:	4b36      	ldr	r3, [pc, #216]	@ (8000f74 <Calculate_SOC+0x1b8>)
 8000e9a:	edc3 7a00 	vstr	s15, [r3]
 8000e9e:	e018      	b.n	8000ed2 <Calculate_SOC+0x116>
    }
    else if (current_mA < -0.1f) { // Charging (ignore noise > -0.1mA)
 8000ea0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ea4:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8000f78 <Calculate_SOC+0x1bc>
 8000ea8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb0:	d50f      	bpl.n	8000ed2 <Calculate_SOC+0x116>
        g_remainingCapacity_mAh += fabsf(current_mA) * delta_h;
 8000eb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eb6:	eeb0 7ae7 	vabs.f32	s14, s15
 8000eba:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ebe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ec2:	4b29      	ldr	r3, [pc, #164]	@ (8000f68 <Calculate_SOC+0x1ac>)
 8000ec4:	edd3 7a00 	vldr	s15, [r3]
 8000ec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ecc:	4b26      	ldr	r3, [pc, #152]	@ (8000f68 <Calculate_SOC+0x1ac>)
 8000ece:	edc3 7a00 	vstr	s15, [r3]
    }

    // Clamp capacity
    g_remainingCapacity_mAh = fmaxf(0.0f, fminf(g_remainingCapacity_mAh, BATTERY_CAPACITY_mAh));
 8000ed2:	4b25      	ldr	r3, [pc, #148]	@ (8000f68 <Calculate_SOC+0x1ac>)
 8000ed4:	edd3 7a00 	vldr	s15, [r3]
 8000ed8:	eddf 0a22 	vldr	s1, [pc, #136]	@ 8000f64 <Calculate_SOC+0x1a8>
 8000edc:	eeb0 0a67 	vmov.f32	s0, s15
 8000ee0:	f007 fab9 	bl	8008456 <fminf>
 8000ee4:	eef0 7a40 	vmov.f32	s15, s0
 8000ee8:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8000f7c <Calculate_SOC+0x1c0>
 8000eec:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef0:	f007 fa94 	bl	800841c <fmaxf>
 8000ef4:	eef0 7a40 	vmov.f32	s15, s0
 8000ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f68 <Calculate_SOC+0x1ac>)
 8000efa:	edc3 7a00 	vstr	s15, [r3]

    // Voltage-based corrections
    if (voltage_V >= FULL_CHARGE_VOLTAGE) {
 8000efe:	edd7 7a00 	vldr	s15, [r7]
 8000f02:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000f80 <Calculate_SOC+0x1c4>
 8000f06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f0e:	db03      	blt.n	8000f18 <Calculate_SOC+0x15c>
        g_remainingCapacity_mAh = BATTERY_CAPACITY_mAh;
 8000f10:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <Calculate_SOC+0x1ac>)
 8000f12:	4a1c      	ldr	r2, [pc, #112]	@ (8000f84 <Calculate_SOC+0x1c8>)
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	e00c      	b.n	8000f32 <Calculate_SOC+0x176>
    }
    else if (voltage_V <= EMPTY_VOLTAGE) {
 8000f18:	edd7 7a00 	vldr	s15, [r7]
 8000f1c:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8000f20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f28:	d803      	bhi.n	8000f32 <Calculate_SOC+0x176>
        g_remainingCapacity_mAh = 0.0f;
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <Calculate_SOC+0x1ac>)
 8000f2c:	f04f 0200 	mov.w	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
    }

    return (g_remainingCapacity_mAh / BATTERY_CAPACITY_mAh) * 100.0f;
 8000f32:	4b0d      	ldr	r3, [pc, #52]	@ (8000f68 <Calculate_SOC+0x1ac>)
 8000f34:	ed93 7a00 	vldr	s14, [r3]
 8000f38:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8000f64 <Calculate_SOC+0x1a8>
 8000f3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f40:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000f60 <Calculate_SOC+0x1a4>
 8000f44:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000f48:	eeb0 0a67 	vmov.f32	s0, s15
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000384 	.word	0x20000384
 8000f58:	20000388 	.word	0x20000388
 8000f5c:	0036ee80 	.word	0x0036ee80
 8000f60:	42c80000 	.word	0x42c80000
 8000f64:	453b8000 	.word	0x453b8000
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	4a5bba00 	.word	0x4a5bba00
 8000f70:	3dcccccd 	.word	0x3dcccccd
 8000f74:	20000370 	.word	0x20000370
 8000f78:	bdcccccd 	.word	0xbdcccccd
 8000f7c:	00000000 	.word	0x00000000
 8000f80:	4149999a 	.word	0x4149999a
 8000f84:	453b8000 	.word	0x453b8000

08000f88 <VoltageBased_SOC>:
// Helper: Estimate SOC from voltage (when Coulomb counting is unreliable)
float VoltageBased_SOC(float voltage_V) {
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	ed87 0a01 	vstr	s0, [r7, #4]
    // More accurate 3S Li-ion voltage curve (adjust per your battery specs)
    if (voltage_V >= 12.6f) return 100.0f;
 8000f92:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f96:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8001074 <VoltageBased_SOC+0xec>
 8000f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa2:	db02      	blt.n	8000faa <VoltageBased_SOC+0x22>
 8000fa4:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8001078 <VoltageBased_SOC+0xf0>
 8000fa8:	e05d      	b.n	8001066 <VoltageBased_SOC+0xde>
    if (voltage_V <= 9.0f)  return 0.0f;
 8000faa:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fae:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8000fb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fba:	d802      	bhi.n	8000fc2 <VoltageBased_SOC+0x3a>
 8000fbc:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 800107c <VoltageBased_SOC+0xf4>
 8000fc0:	e051      	b.n	8001066 <VoltageBased_SOC+0xde>

    // Piecewise linear approximation
    if (voltage_V >= 12.3f) return 90.0f + (voltage_V - 12.3f) * 33.3f;  // 12.3-12.6V: 90-100%
 8000fc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fc6:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001080 <VoltageBased_SOC+0xf8>
 8000fca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd2:	db0e      	blt.n	8000ff2 <VoltageBased_SOC+0x6a>
 8000fd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd8:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001080 <VoltageBased_SOC+0xf8>
 8000fdc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fe0:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001084 <VoltageBased_SOC+0xfc>
 8000fe4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fe8:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001088 <VoltageBased_SOC+0x100>
 8000fec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ff0:	e039      	b.n	8001066 <VoltageBased_SOC+0xde>
    if (voltage_V >= 11.8f) return 70.0f + (voltage_V - 11.8f) * 40.0f;  // 11.8-12.3V: 70-90%
 8000ff2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff6:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800108c <VoltageBased_SOC+0x104>
 8000ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001002:	db0e      	blt.n	8001022 <VoltageBased_SOC+0x9a>
 8001004:	edd7 7a01 	vldr	s15, [r7, #4]
 8001008:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800108c <VoltageBased_SOC+0x104>
 800100c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001010:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001090 <VoltageBased_SOC+0x108>
 8001014:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001018:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001094 <VoltageBased_SOC+0x10c>
 800101c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001020:	e021      	b.n	8001066 <VoltageBased_SOC+0xde>
    if (voltage_V >= 11.1f) return 30.0f + (voltage_V - 11.1f) * 57.1f;  // 11.1-11.8V: 30-70%
 8001022:	edd7 7a01 	vldr	s15, [r7, #4]
 8001026:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001098 <VoltageBased_SOC+0x110>
 800102a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800102e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001032:	db0e      	blt.n	8001052 <VoltageBased_SOC+0xca>
 8001034:	edd7 7a01 	vldr	s15, [r7, #4]
 8001038:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001098 <VoltageBased_SOC+0x110>
 800103c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001040:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800109c <VoltageBased_SOC+0x114>
 8001044:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001048:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800104c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001050:	e009      	b.n	8001066 <VoltageBased_SOC+0xde>
    return (voltage_V - 9.0f) * 14.3f;                                   // 9.0-11.1V: 0-30%
 8001052:	edd7 7a01 	vldr	s15, [r7, #4]
 8001056:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 800105a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800105e:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80010a0 <VoltageBased_SOC+0x118>
 8001062:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001066:	eeb0 0a67 	vmov.f32	s0, s15
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	4149999a 	.word	0x4149999a
 8001078:	42c80000 	.word	0x42c80000
 800107c:	00000000 	.word	0x00000000
 8001080:	4144cccd 	.word	0x4144cccd
 8001084:	42053333 	.word	0x42053333
 8001088:	42b40000 	.word	0x42b40000
 800108c:	413ccccd 	.word	0x413ccccd
 8001090:	42200000 	.word	0x42200000
 8001094:	428c0000 	.word	0x428c0000
 8001098:	4131999a 	.word	0x4131999a
 800109c:	42646666 	.word	0x42646666
 80010a0:	4164cccd 	.word	0x4164cccd

080010a4 <Calculate_SOH>:

float Calculate_SOH(void) {
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return ((BATTERY_CAPACITY_mAh - g_totalDischarged_mAh) / BATTERY_CAPACITY_mAh) * 100.0f;
 80010a8:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <Calculate_SOH+0x30>)
 80010aa:	edd3 7a00 	vldr	s15, [r3]
 80010ae:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80010d8 <Calculate_SOH+0x34>
 80010b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010b6:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80010d8 <Calculate_SOH+0x34>
 80010ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010be:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80010dc <Calculate_SOH+0x38>
 80010c2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80010c6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000370 	.word	0x20000370
 80010d8:	453b8000 	.word	0x453b8000
 80010dc:	42c80000 	.word	0x42c80000

080010e0 <StartDefaultTask>:
/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartDefaultTask */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	  for(;;)
	  {
	    osDelay(1000);
 80010e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010ec:	f004 fdb7 	bl	8005c5e <osDelay>
 80010f0:	e7fa      	b.n	80010e8 <StartDefaultTask+0x8>
	...

080010f4 <StartBatteryMonitorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBatteryMonitorTask */
void StartBatteryMonitorTask(void const * argument)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBatteryMonitorTask */
	  /* Infinite loop */
	  for(;;)
	  {
	    osMutexWait(batteryDataMutexHandle, osWaitForever);
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <StartBatteryMonitorTask+0x30>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001104:	4618      	mov	r0, r3
 8001106:	f004 fdd7 	bl	8005cb8 <osMutexWait>
	    Update_Battery_Parameters();
 800110a:	f7ff fc5f 	bl	80009cc <Update_Battery_Parameters>
	    osMutexRelease(batteryDataMutexHandle);
 800110e:	4b05      	ldr	r3, [pc, #20]	@ (8001124 <StartBatteryMonitorTask+0x30>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f004 fe1e 	bl	8005d54 <osMutexRelease>
	    osDelay(1000);  // Update every second
 8001118:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800111c:	f004 fd9f 	bl	8005c5e <osDelay>
	    osMutexWait(batteryDataMutexHandle, osWaitForever);
 8001120:	bf00      	nop
 8001122:	e7eb      	b.n	80010fc <StartBatteryMonitorTask+0x8>
 8001124:	20000360 	.word	0x20000360

08001128 <StartCANTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCANTask */
void StartCANTask(void const * argument)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b092      	sub	sp, #72	@ 0x48
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	    CAN_TxHeaderTypeDef txHeader;
	    uint8_t canData[8];
	    uint32_t txMailbox;

	    // Configure CAN TX header
	    txHeader.StdId = CAN_TX_MSG_ID;       // Use defined message ID
 8001130:	f44f 7392 	mov.w	r3, #292	@ 0x124
 8001134:	61bb      	str	r3, [r7, #24]
	    txHeader.ExtId = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
	    txHeader.RTR = CAN_RTR_DATA;
 800113a:	2300      	movs	r3, #0
 800113c:	627b      	str	r3, [r7, #36]	@ 0x24
	    txHeader.IDE = CAN_ID_STD;
 800113e:	2300      	movs	r3, #0
 8001140:	623b      	str	r3, [r7, #32]
	    txHeader.DLC = 8;                     // Using 6 bytes (SOC, SOH, Temp)
 8001142:	2308      	movs	r3, #8
 8001144:	62bb      	str	r3, [r7, #40]	@ 0x28
	    txHeader.TransmitGlobalTime = DISABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	    for(;;) {
	        // Get the latest battery data (protected by mutex)
	        osMutexWait(batteryDataMutexHandle, osWaitForever);
 800114c:	4b55      	ldr	r3, [pc, #340]	@ (80012a4 <StartCANTask+0x17c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001154:	4618      	mov	r0, r3
 8001156:	f004 fdaf 	bl	8005cb8 <osMutexWait>
	        memcpy(&batteryDataToSend, &batteryData, sizeof(BatteryData_t));
 800115a:	4a53      	ldr	r2, [pc, #332]	@ (80012a8 <StartCANTask+0x180>)
 800115c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001160:	ca07      	ldmia	r2, {r0, r1, r2}
 8001162:	c303      	stmia	r3!, {r0, r1}
 8001164:	801a      	strh	r2, [r3, #0]
	        osMutexRelease(batteryDataMutexHandle);
 8001166:	4b4f      	ldr	r3, [pc, #316]	@ (80012a4 <StartCANTask+0x17c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f004 fdf2 	bl	8005d54 <osMutexRelease>

	        // Prepare CAN message data
	        // Bytes 0-1: SOC (uint16_t, scaled by 100 for 0.01% resolution)
	        uint16_t soc_scaled = (uint16_t)(batteryDataToSend.soc * 100);
 8001170:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001172:	461a      	mov	r2, r3
 8001174:	0092      	lsls	r2, r2, #2
 8001176:	4413      	add	r3, r2
 8001178:	461a      	mov	r2, r3
 800117a:	0091      	lsls	r1, r2, #2
 800117c:	461a      	mov	r2, r3
 800117e:	460b      	mov	r3, r1
 8001180:	4413      	add	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	        canData[0] = (soc_scaled >> 8) & 0xFF;
 8001188:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	b29b      	uxth	r3, r3
 8001190:	b2db      	uxtb	r3, r3
 8001192:	743b      	strb	r3, [r7, #16]
	        canData[1] = soc_scaled & 0xFF;
 8001194:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001198:	b2db      	uxtb	r3, r3
 800119a:	747b      	strb	r3, [r7, #17]

	        // Bytes 2-3: SOH (uint16_t, scaled by 100 for 0.01% resolution)
	        uint16_t soh_scaled = (uint16_t)(batteryDataToSend.soh * 100);
 800119c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800119e:	461a      	mov	r2, r3
 80011a0:	0092      	lsls	r2, r2, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	461a      	mov	r2, r3
 80011a6:	0091      	lsls	r1, r2, #2
 80011a8:	461a      	mov	r2, r3
 80011aa:	460b      	mov	r3, r1
 80011ac:	4413      	add	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	        canData[2] = (soh_scaled >> 8) & 0xFF;
 80011b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	74bb      	strb	r3, [r7, #18]
	        canData[3] = soh_scaled & 0xFF;
 80011c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	74fb      	strb	r3, [r7, #19]

	        // Bytes 4-5: Temperature (uint16_t, scaled by 100 for 0.01°C resolution)
	        uint16_t temp_scaled = (uint16_t)(batteryDataToSend.temperature * 100);
 80011c8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80011ca:	461a      	mov	r2, r3
 80011cc:	0092      	lsls	r2, r2, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	461a      	mov	r2, r3
 80011d2:	0091      	lsls	r1, r2, #2
 80011d4:	461a      	mov	r2, r3
 80011d6:	460b      	mov	r3, r1
 80011d8:	4413      	add	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	        canData[4] = (temp_scaled >> 8) & 0xFF;
 80011e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	753b      	strb	r3, [r7, #20]
	        canData[5] = temp_scaled & 0xFF;
 80011ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	757b      	strb	r3, [r7, #21]

	        // Bytes 6-7: FRAME Identifier bytes
	         canData[6] = 0xAA;  // Frame identifier
 80011f4:	23aa      	movs	r3, #170	@ 0xaa
 80011f6:	75bb      	strb	r3, [r7, #22]
	         canData[7] = 0x01;  // Frame 1 marker
 80011f8:	2301      	movs	r3, #1
 80011fa:	75fb      	strb	r3, [r7, #23]

	        // Send CAN message
	        HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan1, &txHeader, canData, &txMailbox);
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	f107 0210 	add.w	r2, r7, #16
 8001204:	f107 0118 	add.w	r1, r7, #24
 8001208:	4828      	ldr	r0, [pc, #160]	@ (80012ac <StartCANTask+0x184>)
 800120a:	f001 f853 	bl	80022b4 <HAL_CAN_AddTxMessage>
 800120e:	4603      	mov	r3, r0
 8001210:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

	        /* Frame 2: Voltage and Current (4 bytes) + padding + Frame identifier bytes*/
	        int16_t voltage_scaled = (int16_t)(batteryDataToSend.voltage * 100);  // 0.01V resolution
 8001214:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001216:	461a      	mov	r2, r3
 8001218:	0092      	lsls	r2, r2, #2
 800121a:	4413      	add	r3, r2
 800121c:	461a      	mov	r2, r3
 800121e:	0091      	lsls	r1, r2, #2
 8001220:	461a      	mov	r2, r3
 8001222:	460b      	mov	r3, r1
 8001224:	4413      	add	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	b29b      	uxth	r3, r3
 800122a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
	        int16_t current_scaled = (int16_t)(batteryDataToSend.current * 1000);   // 1mA resolution
 800122c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800122e:	461a      	mov	r2, r3
 8001230:	0152      	lsls	r2, r2, #5
 8001232:	1ad2      	subs	r2, r2, r3
 8001234:	0092      	lsls	r2, r2, #2
 8001236:	4413      	add	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	b29b      	uxth	r3, r3
 800123c:	87bb      	strh	r3, [r7, #60]	@ 0x3c

	        canData[0] = (voltage_scaled >> 8) & 0xFF;
 800123e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8001242:	121b      	asrs	r3, r3, #8
 8001244:	b21b      	sxth	r3, r3
 8001246:	b2db      	uxtb	r3, r3
 8001248:	743b      	strb	r3, [r7, #16]
	        canData[1] = voltage_scaled & 0xFF;
 800124a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800124c:	b2db      	uxtb	r3, r3
 800124e:	747b      	strb	r3, [r7, #17]
	        canData[2] = (current_scaled >> 8) & 0xFF;
 8001250:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001254:	121b      	asrs	r3, r3, #8
 8001256:	b21b      	sxth	r3, r3
 8001258:	b2db      	uxtb	r3, r3
 800125a:	74bb      	strb	r3, [r7, #18]
	        canData[3] = current_scaled & 0xFF;
 800125c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800125e:	b2db      	uxtb	r3, r3
 8001260:	74fb      	strb	r3, [r7, #19]
	        canData[4] = 0x00;  // Padding
 8001262:	2300      	movs	r3, #0
 8001264:	753b      	strb	r3, [r7, #20]
	        canData[5] = 0x00;  // Padding
 8001266:	2300      	movs	r3, #0
 8001268:	757b      	strb	r3, [r7, #21]
	        canData[6] = 0xAA;  // Frame identifier
 800126a:	23aa      	movs	r3, #170	@ 0xaa
 800126c:	75bb      	strb	r3, [r7, #22]
	        canData[7] = 0x02;  // Frame 2 marker
 800126e:	2302      	movs	r3, #2
 8001270:	75fb      	strb	r3, [r7, #23]

	        HAL_CAN_AddTxMessage(&hcan1, &txHeader, canData, &txMailbox);
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	f107 0210 	add.w	r2, r7, #16
 800127a:	f107 0118 	add.w	r1, r7, #24
 800127e:	480b      	ldr	r0, [pc, #44]	@ (80012ac <StartCANTask+0x184>)
 8001280:	f001 f818 	bl	80022b4 <HAL_CAN_AddTxMessage>

	        osDelay(100);  // Adjust delay as needed
 8001284:	2064      	movs	r0, #100	@ 0x64
 8001286:	f004 fcea 	bl	8005c5e <osDelay>
	        if (status != HAL_OK) {
 800128a:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800128e:	2b00      	cmp	r3, #0
 8001290:	d104      	bne.n	800129c <StartCANTask+0x174>
	            // Optional: Add error handling or retry logic here
	        }
	        else{
	        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001292:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001296:	4806      	ldr	r0, [pc, #24]	@ (80012b0 <StartCANTask+0x188>)
 8001298:	f001 fbd3 	bl	8002a42 <HAL_GPIO_TogglePin>
	        }

	        // Wait before sending next message (e.g., 100ms)
	        osDelay(100);
 800129c:	2064      	movs	r0, #100	@ 0x64
 800129e:	f004 fcde 	bl	8005c5e <osDelay>
	    for(;;) {
 80012a2:	e753      	b.n	800114c <StartCANTask+0x24>
 80012a4:	20000360 	.word	0x20000360
 80012a8:	20000374 	.word	0x20000374
 80012ac:	200002d4 	.word	0x200002d4
 80012b0:	40020c00 	.word	0x40020c00

080012b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	4b12      	ldr	r3, [pc, #72]	@ (8001318 <HAL_MspInit+0x54>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d2:	4a11      	ldr	r2, [pc, #68]	@ (8001318 <HAL_MspInit+0x54>)
 80012d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012da:	4b0f      	ldr	r3, [pc, #60]	@ (8001318 <HAL_MspInit+0x54>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	603b      	str	r3, [r7, #0]
 80012ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001318 <HAL_MspInit+0x54>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001318 <HAL_MspInit+0x54>)
 80012f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f6:	4b08      	ldr	r3, [pc, #32]	@ (8001318 <HAL_MspInit+0x54>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012fe:	603b      	str	r3, [r7, #0]
 8001300:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	210f      	movs	r1, #15
 8001306:	f06f 0001 	mvn.w	r0, #1
 800130a:	f001 f97e 	bl	800260a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800

0800131c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	@ 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a17      	ldr	r2, [pc, #92]	@ (8001398 <HAL_ADC_MspInit+0x7c>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d127      	bne.n	800138e <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	4b16      	ldr	r3, [pc, #88]	@ (800139c <HAL_ADC_MspInit+0x80>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001346:	4a15      	ldr	r2, [pc, #84]	@ (800139c <HAL_ADC_MspInit+0x80>)
 8001348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800134c:	6453      	str	r3, [r2, #68]	@ 0x44
 800134e:	4b13      	ldr	r3, [pc, #76]	@ (800139c <HAL_ADC_MspInit+0x80>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b0f      	ldr	r3, [pc, #60]	@ (800139c <HAL_ADC_MspInit+0x80>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	4a0e      	ldr	r2, [pc, #56]	@ (800139c <HAL_ADC_MspInit+0x80>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6313      	str	r3, [r2, #48]	@ 0x30
 800136a:	4b0c      	ldr	r3, [pc, #48]	@ (800139c <HAL_ADC_MspInit+0x80>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001376:	2302      	movs	r3, #2
 8001378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800137a:	2303      	movs	r3, #3
 800137c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4619      	mov	r1, r3
 8001388:	4805      	ldr	r0, [pc, #20]	@ (80013a0 <HAL_ADC_MspInit+0x84>)
 800138a:	f001 f9a5 	bl	80026d8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800138e:	bf00      	nop
 8001390:	3728      	adds	r7, #40	@ 0x28
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40012000 	.word	0x40012000
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020000 	.word	0x40020000

080013a4 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	@ 0x28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a19      	ldr	r2, [pc, #100]	@ (8001428 <HAL_CAN_MspInit+0x84>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d12c      	bne.n	8001420 <HAL_CAN_MspInit+0x7c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	4b18      	ldr	r3, [pc, #96]	@ (800142c <HAL_CAN_MspInit+0x88>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	4a17      	ldr	r2, [pc, #92]	@ (800142c <HAL_CAN_MspInit+0x88>)
 80013d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013d6:	4b15      	ldr	r3, [pc, #84]	@ (800142c <HAL_CAN_MspInit+0x88>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b11      	ldr	r3, [pc, #68]	@ (800142c <HAL_CAN_MspInit+0x88>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4a10      	ldr	r2, [pc, #64]	@ (800142c <HAL_CAN_MspInit+0x88>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4b0e      	ldr	r3, [pc, #56]	@ (800142c <HAL_CAN_MspInit+0x88>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140c:	2303      	movs	r3, #3
 800140e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001410:	2309      	movs	r3, #9
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	4619      	mov	r1, r3
 800141a:	4805      	ldr	r0, [pc, #20]	@ (8001430 <HAL_CAN_MspInit+0x8c>)
 800141c:	f001 f95c 	bl	80026d8 <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001420:	bf00      	nop
 8001422:	3728      	adds	r7, #40	@ 0x28
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40006400 	.word	0x40006400
 800142c:	40023800 	.word	0x40023800
 8001430:	40020400 	.word	0x40020400

08001434 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	@ 0x28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a1d      	ldr	r2, [pc, #116]	@ (80014c8 <HAL_I2C_MspInit+0x94>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d133      	bne.n	80014be <HAL_I2C_MspInit+0x8a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	4b1c      	ldr	r3, [pc, #112]	@ (80014cc <HAL_I2C_MspInit+0x98>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	4a1b      	ldr	r2, [pc, #108]	@ (80014cc <HAL_I2C_MspInit+0x98>)
 8001460:	f043 0302 	orr.w	r3, r3, #2
 8001464:	6313      	str	r3, [r2, #48]	@ 0x30
 8001466:	4b19      	ldr	r3, [pc, #100]	@ (80014cc <HAL_I2C_MspInit+0x98>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001472:	23c0      	movs	r3, #192	@ 0xc0
 8001474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001476:	2312      	movs	r3, #18
 8001478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001482:	2304      	movs	r3, #4
 8001484:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	4810      	ldr	r0, [pc, #64]	@ (80014d0 <HAL_I2C_MspInit+0x9c>)
 800148e:	f001 f923 	bl	80026d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	4b0d      	ldr	r3, [pc, #52]	@ (80014cc <HAL_I2C_MspInit+0x98>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149a:	4a0c      	ldr	r2, [pc, #48]	@ (80014cc <HAL_I2C_MspInit+0x98>)
 800149c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014a2:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <HAL_I2C_MspInit+0x98>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2105      	movs	r1, #5
 80014b2:	201f      	movs	r0, #31
 80014b4:	f001 f8a9 	bl	800260a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80014b8:	201f      	movs	r0, #31
 80014ba:	f001 f8c2 	bl	8002642 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80014be:	bf00      	nop
 80014c0:	3728      	adds	r7, #40	@ 0x28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40005400 	.word	0x40005400
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020400 	.word	0x40020400

080014d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <NMI_Handler+0x4>

080014dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <HardFault_Handler+0x4>

080014e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <MemManage_Handler+0x4>

080014ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <BusFault_Handler+0x4>

080014f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <UsageFault_Handler+0x4>

080014fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800150e:	f000 f8a1 	bl	8001654 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001512:	f006 f8e3 	bl	80076dc <xTaskGetSchedulerState>
 8001516:	4603      	mov	r3, r0
 8001518:	2b01      	cmp	r3, #1
 800151a:	d001      	beq.n	8001520 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800151c:	f006 fcc4 	bl	8007ea8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}

08001524 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001528:	4802      	ldr	r0, [pc, #8]	@ (8001534 <I2C1_EV_IRQHandler+0x10>)
 800152a:	f001 ff2f 	bl	800338c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200002fc 	.word	0x200002fc

08001538 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800153c:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <SystemInit+0x20>)
 800153e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001542:	4a05      	ldr	r2, [pc, #20]	@ (8001558 <SystemInit+0x20>)
 8001544:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001548:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800155c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001594 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001560:	f7ff ffea 	bl	8001538 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001564:	480c      	ldr	r0, [pc, #48]	@ (8001598 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001566:	490d      	ldr	r1, [pc, #52]	@ (800159c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001568:	4a0d      	ldr	r2, [pc, #52]	@ (80015a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800156a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800156c:	e002      	b.n	8001574 <LoopCopyDataInit>

0800156e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001572:	3304      	adds	r3, #4

08001574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001578:	d3f9      	bcc.n	800156e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157a:	4a0a      	ldr	r2, [pc, #40]	@ (80015a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800157c:	4c0a      	ldr	r4, [pc, #40]	@ (80015a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001580:	e001      	b.n	8001586 <LoopFillZerobss>

08001582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001584:	3204      	adds	r2, #4

08001586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001588:	d3fb      	bcc.n	8001582 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800158a:	f006 ff15 	bl	80083b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800158e:	f7fe ffcf 	bl	8000530 <main>
  bx  lr    
 8001592:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001594:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800159c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80015a0:	080085c0 	.word	0x080085c0
  ldr r2, =_sbss
 80015a4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80015a8:	200040e4 	.word	0x200040e4

080015ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015ac:	e7fe      	b.n	80015ac <ADC_IRQHandler>
	...

080015b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015b4:	4b0e      	ldr	r3, [pc, #56]	@ (80015f0 <HAL_Init+0x40>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0d      	ldr	r2, [pc, #52]	@ (80015f0 <HAL_Init+0x40>)
 80015ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c0:	4b0b      	ldr	r3, [pc, #44]	@ (80015f0 <HAL_Init+0x40>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0a      	ldr	r2, [pc, #40]	@ (80015f0 <HAL_Init+0x40>)
 80015c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015cc:	4b08      	ldr	r3, [pc, #32]	@ (80015f0 <HAL_Init+0x40>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a07      	ldr	r2, [pc, #28]	@ (80015f0 <HAL_Init+0x40>)
 80015d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d8:	2003      	movs	r0, #3
 80015da:	f001 f80b 	bl	80025f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015de:	200f      	movs	r0, #15
 80015e0:	f000 f808 	bl	80015f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e4:	f7ff fe6e 	bl	80012c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40023c00 	.word	0x40023c00

080015f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015fc:	4b12      	ldr	r3, [pc, #72]	@ (8001648 <HAL_InitTick+0x54>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b12      	ldr	r3, [pc, #72]	@ (800164c <HAL_InitTick+0x58>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	4619      	mov	r1, r3
 8001606:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800160a:	fbb3 f3f1 	udiv	r3, r3, r1
 800160e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001612:	4618      	mov	r0, r3
 8001614:	f001 f823 	bl	800265e <HAL_SYSTICK_Config>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e00e      	b.n	8001640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b0f      	cmp	r3, #15
 8001626:	d80a      	bhi.n	800163e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001628:	2200      	movs	r2, #0
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001630:	f000 ffeb 	bl	800260a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001634:	4a06      	ldr	r2, [pc, #24]	@ (8001650 <HAL_InitTick+0x5c>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	e000      	b.n	8001640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	2000000c 	.word	0x2000000c
 800164c:	20000014 	.word	0x20000014
 8001650:	20000010 	.word	0x20000010

08001654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <HAL_IncTick+0x20>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <HAL_IncTick+0x24>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4413      	add	r3, r2
 8001664:	4a04      	ldr	r2, [pc, #16]	@ (8001678 <HAL_IncTick+0x24>)
 8001666:	6013      	str	r3, [r2, #0]
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000014 	.word	0x20000014
 8001678:	2000038c 	.word	0x2000038c

0800167c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return uwTick;
 8001680:	4b03      	ldr	r3, [pc, #12]	@ (8001690 <HAL_GetTick+0x14>)
 8001682:	681b      	ldr	r3, [r3, #0]
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	2000038c 	.word	0x2000038c

08001694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800169c:	f7ff ffee 	bl	800167c <HAL_GetTick>
 80016a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016ac:	d005      	beq.n	80016ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ae:	4b0a      	ldr	r3, [pc, #40]	@ (80016d8 <HAL_Delay+0x44>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ba:	bf00      	nop
 80016bc:	f7ff ffde 	bl	800167c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d8f7      	bhi.n	80016bc <HAL_Delay+0x28>
  {
  }
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000014 	.word	0x20000014

080016dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e033      	b.n	800175a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d109      	bne.n	800170e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff fe0e 	bl	800131c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001712:	f003 0310 	and.w	r3, r3, #16
 8001716:	2b00      	cmp	r3, #0
 8001718:	d118      	bne.n	800174c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001722:	f023 0302 	bic.w	r3, r3, #2
 8001726:	f043 0202 	orr.w	r2, r3, #2
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 faa4 	bl	8001c7c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	f023 0303 	bic.w	r3, r3, #3
 8001742:	f043 0201 	orr.w	r2, r3, #1
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	641a      	str	r2, [r3, #64]	@ 0x40
 800174a:	e001      	b.n	8001750 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001758:	7bfb      	ldrb	r3, [r7, #15]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001776:	2b01      	cmp	r3, #1
 8001778:	d101      	bne.n	800177e <HAL_ADC_Start+0x1a>
 800177a:	2302      	movs	r3, #2
 800177c:	e0b2      	b.n	80018e4 <HAL_ADC_Start+0x180>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b01      	cmp	r3, #1
 8001792:	d018      	beq.n	80017c6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 0201 	orr.w	r2, r2, #1
 80017a2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017a4:	4b52      	ldr	r3, [pc, #328]	@ (80018f0 <HAL_ADC_Start+0x18c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a52      	ldr	r2, [pc, #328]	@ (80018f4 <HAL_ADC_Start+0x190>)
 80017aa:	fba2 2303 	umull	r2, r3, r2, r3
 80017ae:	0c9a      	lsrs	r2, r3, #18
 80017b0:	4613      	mov	r3, r2
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4413      	add	r3, r2
 80017b6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80017b8:	e002      	b.n	80017c0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	3b01      	subs	r3, #1
 80017be:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f9      	bne.n	80017ba <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d17a      	bne.n	80018ca <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80017dc:	f023 0301 	bic.w	r3, r3, #1
 80017e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d007      	beq.n	8001806 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017fe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800180e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001812:	d106      	bne.n	8001822 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001818:	f023 0206 	bic.w	r2, r3, #6
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001820:	e002      	b.n	8001828 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001830:	4b31      	ldr	r3, [pc, #196]	@ (80018f8 <HAL_ADC_Start+0x194>)
 8001832:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800183c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 031f 	and.w	r3, r3, #31
 8001846:	2b00      	cmp	r3, #0
 8001848:	d12a      	bne.n	80018a0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a2b      	ldr	r2, [pc, #172]	@ (80018fc <HAL_ADC_Start+0x198>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d015      	beq.n	8001880 <HAL_ADC_Start+0x11c>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a29      	ldr	r2, [pc, #164]	@ (8001900 <HAL_ADC_Start+0x19c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d105      	bne.n	800186a <HAL_ADC_Start+0x106>
 800185e:	4b26      	ldr	r3, [pc, #152]	@ (80018f8 <HAL_ADC_Start+0x194>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 031f 	and.w	r3, r3, #31
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00a      	beq.n	8001880 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a25      	ldr	r2, [pc, #148]	@ (8001904 <HAL_ADC_Start+0x1a0>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d136      	bne.n	80018e2 <HAL_ADC_Start+0x17e>
 8001874:	4b20      	ldr	r3, [pc, #128]	@ (80018f8 <HAL_ADC_Start+0x194>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 0310 	and.w	r3, r3, #16
 800187c:	2b00      	cmp	r3, #0
 800187e:	d130      	bne.n	80018e2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d129      	bne.n	80018e2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	e020      	b.n	80018e2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a15      	ldr	r2, [pc, #84]	@ (80018fc <HAL_ADC_Start+0x198>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d11b      	bne.n	80018e2 <HAL_ADC_Start+0x17e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d114      	bne.n	80018e2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689a      	ldr	r2, [r3, #8]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	e00b      	b.n	80018e2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	f043 0210 	orr.w	r2, r3, #16
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018da:	f043 0201 	orr.w	r2, r3, #1
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	2000000c 	.word	0x2000000c
 80018f4:	431bde83 	.word	0x431bde83
 80018f8:	40012300 	.word	0x40012300
 80018fc:	40012000 	.word	0x40012000
 8001900:	40012100 	.word	0x40012100
 8001904:	40012200 	.word	0x40012200

08001908 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001920:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001924:	d113      	bne.n	800194e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001930:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001934:	d10b      	bne.n	800194e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	f043 0220 	orr.w	r2, r3, #32
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e063      	b.n	8001a16 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800194e:	f7ff fe95 	bl	800167c <HAL_GetTick>
 8001952:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001954:	e021      	b.n	800199a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800195c:	d01d      	beq.n	800199a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d007      	beq.n	8001974 <HAL_ADC_PollForConversion+0x6c>
 8001964:	f7ff fe8a 	bl	800167c <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	429a      	cmp	r2, r3
 8001972:	d212      	bcs.n	800199a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b02      	cmp	r3, #2
 8001980:	d00b      	beq.n	800199a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001986:	f043 0204 	orr.w	r2, r3, #4
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e03d      	b.n	8001a16 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d1d6      	bne.n	8001956 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f06f 0212 	mvn.w	r2, #18
 80019b0:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d123      	bne.n	8001a14 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d11f      	bne.n	8001a14 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019da:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d006      	beq.n	80019f0 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d111      	bne.n	8001a14 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d105      	bne.n	8001a14 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0c:	f043 0201 	orr.w	r2, r3, #1
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x1c>
 8001a50:	2302      	movs	r3, #2
 8001a52:	e105      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x228>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b09      	cmp	r3, #9
 8001a62:	d925      	bls.n	8001ab0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68d9      	ldr	r1, [r3, #12]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	461a      	mov	r2, r3
 8001a72:	4613      	mov	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4413      	add	r3, r2
 8001a78:	3b1e      	subs	r3, #30
 8001a7a:	2207      	movs	r2, #7
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43da      	mvns	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	400a      	ands	r2, r1
 8001a88:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68d9      	ldr	r1, [r3, #12]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	4403      	add	r3, r0
 8001aa2:	3b1e      	subs	r3, #30
 8001aa4:	409a      	lsls	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	e022      	b.n	8001af6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6919      	ldr	r1, [r3, #16]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	461a      	mov	r2, r3
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	2207      	movs	r2, #7
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43da      	mvns	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6919      	ldr	r1, [r3, #16]
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4403      	add	r3, r0
 8001aec:	409a      	lsls	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b06      	cmp	r3, #6
 8001afc:	d824      	bhi.n	8001b48 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	3b05      	subs	r3, #5
 8001b10:	221f      	movs	r2, #31
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43da      	mvns	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	400a      	ands	r2, r1
 8001b1e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	3b05      	subs	r3, #5
 8001b3a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b46:	e04c      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b0c      	cmp	r3, #12
 8001b4e:	d824      	bhi.n	8001b9a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	3b23      	subs	r3, #35	@ 0x23
 8001b62:	221f      	movs	r2, #31
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43da      	mvns	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	400a      	ands	r2, r1
 8001b70:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	4618      	mov	r0, r3
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	3b23      	subs	r3, #35	@ 0x23
 8001b8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b98:	e023      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	3b41      	subs	r3, #65	@ 0x41
 8001bac:	221f      	movs	r2, #31
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	400a      	ands	r2, r1
 8001bba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	4618      	mov	r0, r3
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3b41      	subs	r3, #65	@ 0x41
 8001bd6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001be2:	4b22      	ldr	r3, [pc, #136]	@ (8001c6c <HAL_ADC_ConfigChannel+0x234>)
 8001be4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a21      	ldr	r2, [pc, #132]	@ (8001c70 <HAL_ADC_ConfigChannel+0x238>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d109      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x1cc>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b12      	cmp	r3, #18
 8001bf6:	d105      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a19      	ldr	r2, [pc, #100]	@ (8001c70 <HAL_ADC_ConfigChannel+0x238>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d123      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x21e>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2b10      	cmp	r3, #16
 8001c14:	d003      	beq.n	8001c1e <HAL_ADC_ConfigChannel+0x1e6>
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b11      	cmp	r3, #17
 8001c1c:	d11b      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b10      	cmp	r3, #16
 8001c30:	d111      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c32:	4b10      	ldr	r3, [pc, #64]	@ (8001c74 <HAL_ADC_ConfigChannel+0x23c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a10      	ldr	r2, [pc, #64]	@ (8001c78 <HAL_ADC_ConfigChannel+0x240>)
 8001c38:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3c:	0c9a      	lsrs	r2, r3, #18
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c48:	e002      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f9      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	40012300 	.word	0x40012300
 8001c70:	40012000 	.word	0x40012000
 8001c74:	2000000c 	.word	0x2000000c
 8001c78:	431bde83 	.word	0x431bde83

08001c7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c84:	4b79      	ldr	r3, [pc, #484]	@ (8001e6c <ADC_Init+0x1f0>)
 8001c86:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6859      	ldr	r1, [r3, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	021a      	lsls	r2, r3, #8
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001cd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6859      	ldr	r1, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6899      	ldr	r1, [r3, #8]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	430a      	orrs	r2, r1
 8001d08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d0e:	4a58      	ldr	r2, [pc, #352]	@ (8001e70 <ADC_Init+0x1f4>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d022      	beq.n	8001d5a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6899      	ldr	r1, [r3, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6899      	ldr	r1, [r3, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	e00f      	b.n	8001d7a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d78:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0202 	bic.w	r2, r2, #2
 8001d88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6899      	ldr	r1, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	7e1b      	ldrb	r3, [r3, #24]
 8001d94:	005a      	lsls	r2, r3, #1
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d01b      	beq.n	8001de0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001db6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001dc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6859      	ldr	r1, [r3, #4]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	035a      	lsls	r2, r3, #13
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	e007      	b.n	8001df0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dee:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001dfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	051a      	lsls	r2, r3, #20
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001e24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6899      	ldr	r1, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e32:	025a      	lsls	r2, r3, #9
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6899      	ldr	r1, [r3, #8]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	029a      	lsls	r2, r3, #10
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	609a      	str	r2, [r3, #8]
}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	40012300 	.word	0x40012300
 8001e70:	0f000001 	.word	0x0f000001

08001e74 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e0ed      	b.n	8002062 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d102      	bne.n	8001e98 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff fa86 	bl	80013a4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ea8:	f7ff fbe8 	bl	800167c <HAL_GetTick>
 8001eac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001eae:	e012      	b.n	8001ed6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001eb0:	f7ff fbe4 	bl	800167c <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b0a      	cmp	r3, #10
 8001ebc:	d90b      	bls.n	8001ed6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2205      	movs	r2, #5
 8001ece:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e0c5      	b.n	8002062 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0e5      	beq.n	8001eb0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0202 	bic.w	r2, r2, #2
 8001ef2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ef4:	f7ff fbc2 	bl	800167c <HAL_GetTick>
 8001ef8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001efa:	e012      	b.n	8001f22 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001efc:	f7ff fbbe 	bl	800167c <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b0a      	cmp	r3, #10
 8001f08:	d90b      	bls.n	8001f22 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2205      	movs	r2, #5
 8001f1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e09f      	b.n	8002062 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1e5      	bne.n	8001efc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	7e1b      	ldrb	r3, [r3, #24]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d108      	bne.n	8001f4a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	e007      	b.n	8001f5a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	7e5b      	ldrb	r3, [r3, #25]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d108      	bne.n	8001f74 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	e007      	b.n	8001f84 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f82:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	7e9b      	ldrb	r3, [r3, #26]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d108      	bne.n	8001f9e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0220 	orr.w	r2, r2, #32
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	e007      	b.n	8001fae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0220 	bic.w	r2, r2, #32
 8001fac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	7edb      	ldrb	r3, [r3, #27]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d108      	bne.n	8001fc8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0210 	bic.w	r2, r2, #16
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	e007      	b.n	8001fd8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0210 	orr.w	r2, r2, #16
 8001fd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	7f1b      	ldrb	r3, [r3, #28]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d108      	bne.n	8001ff2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0208 	orr.w	r2, r2, #8
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	e007      	b.n	8002002 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0208 	bic.w	r2, r2, #8
 8002000:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	7f5b      	ldrb	r3, [r3, #29]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d108      	bne.n	800201c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f042 0204 	orr.w	r2, r2, #4
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	e007      	b.n	800202c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0204 	bic.w	r2, r2, #4
 800202a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	ea42 0103 	orr.w	r1, r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	1e5a      	subs	r2, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800206c:	b480      	push	{r7}
 800206e:	b087      	sub	sp, #28
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002082:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002084:	7cfb      	ldrb	r3, [r7, #19]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d003      	beq.n	8002092 <HAL_CAN_ConfigFilter+0x26>
 800208a:	7cfb      	ldrb	r3, [r7, #19]
 800208c:	2b02      	cmp	r3, #2
 800208e:	f040 80be 	bne.w	800220e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002092:	4b65      	ldr	r3, [pc, #404]	@ (8002228 <HAL_CAN_ConfigFilter+0x1bc>)
 8002094:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800209c:	f043 0201 	orr.w	r2, r3, #1
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80020ac:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c0:	021b      	lsls	r3, r3, #8
 80020c2:	431a      	orrs	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	f003 031f 	and.w	r3, r3, #31
 80020d2:	2201      	movs	r2, #1
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	401a      	ands	r2, r3
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d123      	bne.n	800213c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	401a      	ands	r2, r3
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002116:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	3248      	adds	r2, #72	@ 0x48
 800211c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002130:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002132:	6979      	ldr	r1, [r7, #20]
 8002134:	3348      	adds	r3, #72	@ 0x48
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	440b      	add	r3, r1
 800213a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d122      	bne.n	800218a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	431a      	orrs	r2, r3
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002164:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	3248      	adds	r2, #72	@ 0x48
 800216a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800217e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002180:	6979      	ldr	r1, [r7, #20]
 8002182:	3348      	adds	r3, #72	@ 0x48
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	440b      	add	r3, r1
 8002188:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d109      	bne.n	80021a6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	43db      	mvns	r3, r3
 800219c:	401a      	ands	r2, r3
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80021a4:	e007      	b.n	80021b6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	43db      	mvns	r3, r3
 80021c8:	401a      	ands	r2, r3
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80021d0:	e007      	b.n	80021e2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	431a      	orrs	r2, r3
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d107      	bne.n	80021fa <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	431a      	orrs	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002200:	f023 0201 	bic.w	r2, r3, #1
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800220a:	2300      	movs	r3, #0
 800220c:	e006      	b.n	800221c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002212:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
  }
}
 800221c:	4618      	mov	r0, r3
 800221e:	371c      	adds	r7, #28
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	40006400 	.word	0x40006400

0800222c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3020 	ldrb.w	r3, [r3, #32]
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b01      	cmp	r3, #1
 800223e:	d12e      	bne.n	800229e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2202      	movs	r2, #2
 8002244:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0201 	bic.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002258:	f7ff fa10 	bl	800167c <HAL_GetTick>
 800225c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800225e:	e012      	b.n	8002286 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002260:	f7ff fa0c 	bl	800167c <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b0a      	cmp	r3, #10
 800226c:	d90b      	bls.n	8002286 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002272:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2205      	movs	r2, #5
 800227e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e012      	b.n	80022ac <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1e5      	bne.n	8002260 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800229a:	2300      	movs	r3, #0
 800229c:	e006      	b.n	80022ac <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
  }
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b089      	sub	sp, #36	@ 0x24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
 80022c0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80022d2:	7ffb      	ldrb	r3, [r7, #31]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d003      	beq.n	80022e0 <HAL_CAN_AddTxMessage+0x2c>
 80022d8:	7ffb      	ldrb	r3, [r7, #31]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	f040 80ad 	bne.w	800243a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10a      	bne.n	8002300 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d105      	bne.n	8002300 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 8095 	beq.w	800242a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	0e1b      	lsrs	r3, r3, #24
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800230a:	2201      	movs	r2, #1
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	409a      	lsls	r2, r3
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10d      	bne.n	8002338 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002326:	68f9      	ldr	r1, [r7, #12]
 8002328:	6809      	ldr	r1, [r1, #0]
 800232a:	431a      	orrs	r2, r3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	3318      	adds	r3, #24
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	440b      	add	r3, r1
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	e00f      	b.n	8002358 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002342:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002348:	68f9      	ldr	r1, [r7, #12]
 800234a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800234c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	3318      	adds	r3, #24
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	440b      	add	r3, r1
 8002356:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6819      	ldr	r1, [r3, #0]
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	691a      	ldr	r2, [r3, #16]
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	3318      	adds	r3, #24
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	440b      	add	r3, r1
 8002368:	3304      	adds	r3, #4
 800236a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	7d1b      	ldrb	r3, [r3, #20]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d111      	bne.n	8002398 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	3318      	adds	r3, #24
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	4413      	add	r3, r2
 8002380:	3304      	adds	r3, #4
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	6811      	ldr	r1, [r2, #0]
 8002388:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	3318      	adds	r3, #24
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	440b      	add	r3, r1
 8002394:	3304      	adds	r3, #4
 8002396:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3307      	adds	r3, #7
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	061a      	lsls	r2, r3, #24
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3306      	adds	r3, #6
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	041b      	lsls	r3, r3, #16
 80023a8:	431a      	orrs	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3305      	adds	r3, #5
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	021b      	lsls	r3, r3, #8
 80023b2:	4313      	orrs	r3, r2
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	3204      	adds	r2, #4
 80023b8:	7812      	ldrb	r2, [r2, #0]
 80023ba:	4610      	mov	r0, r2
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	6811      	ldr	r1, [r2, #0]
 80023c0:	ea43 0200 	orr.w	r2, r3, r0
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	011b      	lsls	r3, r3, #4
 80023c8:	440b      	add	r3, r1
 80023ca:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80023ce:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3303      	adds	r3, #3
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	061a      	lsls	r2, r3, #24
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3302      	adds	r3, #2
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	041b      	lsls	r3, r3, #16
 80023e0:	431a      	orrs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	3301      	adds	r3, #1
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	021b      	lsls	r3, r3, #8
 80023ea:	4313      	orrs	r3, r2
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	7812      	ldrb	r2, [r2, #0]
 80023f0:	4610      	mov	r0, r2
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	6811      	ldr	r1, [r2, #0]
 80023f6:	ea43 0200 	orr.w	r2, r3, r0
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	440b      	add	r3, r1
 8002400:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002404:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	3318      	adds	r3, #24
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	4413      	add	r3, r2
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	6811      	ldr	r1, [r2, #0]
 8002418:	f043 0201 	orr.w	r2, r3, #1
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	3318      	adds	r3, #24
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	440b      	add	r3, r1
 8002424:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	e00e      	b.n	8002448 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e006      	b.n	8002448 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
  }
}
 8002448:	4618      	mov	r0, r3
 800244a:	3724      	adds	r7, #36	@ 0x24
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002464:	4b0c      	ldr	r3, [pc, #48]	@ (8002498 <__NVIC_SetPriorityGrouping+0x44>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002470:	4013      	ands	r3, r2
 8002472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800247c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002486:	4a04      	ldr	r2, [pc, #16]	@ (8002498 <__NVIC_SetPriorityGrouping+0x44>)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	60d3      	str	r3, [r2, #12]
}
 800248c:	bf00      	nop
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a0:	4b04      	ldr	r3, [pc, #16]	@ (80024b4 <__NVIC_GetPriorityGrouping+0x18>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	0a1b      	lsrs	r3, r3, #8
 80024a6:	f003 0307 	and.w	r3, r3, #7
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	db0b      	blt.n	80024e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	f003 021f 	and.w	r2, r3, #31
 80024d0:	4907      	ldr	r1, [pc, #28]	@ (80024f0 <__NVIC_EnableIRQ+0x38>)
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	095b      	lsrs	r3, r3, #5
 80024d8:	2001      	movs	r0, #1
 80024da:	fa00 f202 	lsl.w	r2, r0, r2
 80024de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	e000e100 	.word	0xe000e100

080024f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	6039      	str	r1, [r7, #0]
 80024fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002504:	2b00      	cmp	r3, #0
 8002506:	db0a      	blt.n	800251e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	b2da      	uxtb	r2, r3
 800250c:	490c      	ldr	r1, [pc, #48]	@ (8002540 <__NVIC_SetPriority+0x4c>)
 800250e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002512:	0112      	lsls	r2, r2, #4
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	440b      	add	r3, r1
 8002518:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800251c:	e00a      	b.n	8002534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	b2da      	uxtb	r2, r3
 8002522:	4908      	ldr	r1, [pc, #32]	@ (8002544 <__NVIC_SetPriority+0x50>)
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	3b04      	subs	r3, #4
 800252c:	0112      	lsls	r2, r2, #4
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	440b      	add	r3, r1
 8002532:	761a      	strb	r2, [r3, #24]
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	e000e100 	.word	0xe000e100
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002548:	b480      	push	{r7}
 800254a:	b089      	sub	sp, #36	@ 0x24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f1c3 0307 	rsb	r3, r3, #7
 8002562:	2b04      	cmp	r3, #4
 8002564:	bf28      	it	cs
 8002566:	2304      	movcs	r3, #4
 8002568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	3304      	adds	r3, #4
 800256e:	2b06      	cmp	r3, #6
 8002570:	d902      	bls.n	8002578 <NVIC_EncodePriority+0x30>
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	3b03      	subs	r3, #3
 8002576:	e000      	b.n	800257a <NVIC_EncodePriority+0x32>
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800257c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43da      	mvns	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	401a      	ands	r2, r3
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002590:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	fa01 f303 	lsl.w	r3, r1, r3
 800259a:	43d9      	mvns	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a0:	4313      	orrs	r3, r2
         );
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3724      	adds	r7, #36	@ 0x24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025c0:	d301      	bcc.n	80025c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025c2:	2301      	movs	r3, #1
 80025c4:	e00f      	b.n	80025e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025c6:	4a0a      	ldr	r2, [pc, #40]	@ (80025f0 <SysTick_Config+0x40>)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ce:	210f      	movs	r1, #15
 80025d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80025d4:	f7ff ff8e 	bl	80024f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025d8:	4b05      	ldr	r3, [pc, #20]	@ (80025f0 <SysTick_Config+0x40>)
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025de:	4b04      	ldr	r3, [pc, #16]	@ (80025f0 <SysTick_Config+0x40>)
 80025e0:	2207      	movs	r2, #7
 80025e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	e000e010 	.word	0xe000e010

080025f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff ff29 	bl	8002454 <__NVIC_SetPriorityGrouping>
}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800260a:	b580      	push	{r7, lr}
 800260c:	b086      	sub	sp, #24
 800260e:	af00      	add	r7, sp, #0
 8002610:	4603      	mov	r3, r0
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	607a      	str	r2, [r7, #4]
 8002616:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800261c:	f7ff ff3e 	bl	800249c <__NVIC_GetPriorityGrouping>
 8002620:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	6978      	ldr	r0, [r7, #20]
 8002628:	f7ff ff8e 	bl	8002548 <NVIC_EncodePriority>
 800262c:	4602      	mov	r2, r0
 800262e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002632:	4611      	mov	r1, r2
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff ff5d 	bl	80024f4 <__NVIC_SetPriority>
}
 800263a:	bf00      	nop
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	4603      	mov	r3, r0
 800264a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800264c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff ff31 	bl	80024b8 <__NVIC_EnableIRQ>
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff ffa2 	bl	80025b0 <SysTick_Config>
 800266c:	4603      	mov	r3, r0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d004      	beq.n	8002694 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2280      	movs	r2, #128	@ 0x80
 800268e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e00c      	b.n	80026ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2205      	movs	r2, #5
 8002698:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 0201 	bic.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026c8:	b2db      	uxtb	r3, r3
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
	...

080026d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026d8:	b480      	push	{r7}
 80026da:	b089      	sub	sp, #36	@ 0x24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ee:	2300      	movs	r3, #0
 80026f0:	61fb      	str	r3, [r7, #28]
 80026f2:	e16b      	b.n	80029cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026f4:	2201      	movs	r2, #1
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	4013      	ands	r3, r2
 8002706:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	429a      	cmp	r2, r3
 800270e:	f040 815a 	bne.w	80029c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	2b01      	cmp	r3, #1
 800271c:	d005      	beq.n	800272a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002726:	2b02      	cmp	r3, #2
 8002728:	d130      	bne.n	800278c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	2203      	movs	r2, #3
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43db      	mvns	r3, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4013      	ands	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4313      	orrs	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002760:	2201      	movs	r2, #1
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	43db      	mvns	r3, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	091b      	lsrs	r3, r3, #4
 8002776:	f003 0201 	and.w	r2, r3, #1
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	2b03      	cmp	r3, #3
 8002796:	d017      	beq.n	80027c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	2203      	movs	r2, #3
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d123      	bne.n	800281c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	08da      	lsrs	r2, r3, #3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3208      	adds	r2, #8
 80027dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	220f      	movs	r2, #15
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	691a      	ldr	r2, [r3, #16]
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	08da      	lsrs	r2, r3, #3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3208      	adds	r2, #8
 8002816:	69b9      	ldr	r1, [r7, #24]
 8002818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	2203      	movs	r2, #3
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4013      	ands	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 0203 	and.w	r2, r3, #3
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 80b4 	beq.w	80029c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	4b60      	ldr	r3, [pc, #384]	@ (80029e4 <HAL_GPIO_Init+0x30c>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002866:	4a5f      	ldr	r2, [pc, #380]	@ (80029e4 <HAL_GPIO_Init+0x30c>)
 8002868:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800286c:	6453      	str	r3, [r2, #68]	@ 0x44
 800286e:	4b5d      	ldr	r3, [pc, #372]	@ (80029e4 <HAL_GPIO_Init+0x30c>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002872:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800287a:	4a5b      	ldr	r2, [pc, #364]	@ (80029e8 <HAL_GPIO_Init+0x310>)
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	089b      	lsrs	r3, r3, #2
 8002880:	3302      	adds	r3, #2
 8002882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002886:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	220f      	movs	r2, #15
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4013      	ands	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a52      	ldr	r2, [pc, #328]	@ (80029ec <HAL_GPIO_Init+0x314>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d02b      	beq.n	80028fe <HAL_GPIO_Init+0x226>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a51      	ldr	r2, [pc, #324]	@ (80029f0 <HAL_GPIO_Init+0x318>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d025      	beq.n	80028fa <HAL_GPIO_Init+0x222>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a50      	ldr	r2, [pc, #320]	@ (80029f4 <HAL_GPIO_Init+0x31c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d01f      	beq.n	80028f6 <HAL_GPIO_Init+0x21e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a4f      	ldr	r2, [pc, #316]	@ (80029f8 <HAL_GPIO_Init+0x320>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d019      	beq.n	80028f2 <HAL_GPIO_Init+0x21a>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a4e      	ldr	r2, [pc, #312]	@ (80029fc <HAL_GPIO_Init+0x324>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d013      	beq.n	80028ee <HAL_GPIO_Init+0x216>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a4d      	ldr	r2, [pc, #308]	@ (8002a00 <HAL_GPIO_Init+0x328>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d00d      	beq.n	80028ea <HAL_GPIO_Init+0x212>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002a04 <HAL_GPIO_Init+0x32c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d007      	beq.n	80028e6 <HAL_GPIO_Init+0x20e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a4b      	ldr	r2, [pc, #300]	@ (8002a08 <HAL_GPIO_Init+0x330>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d101      	bne.n	80028e2 <HAL_GPIO_Init+0x20a>
 80028de:	2307      	movs	r3, #7
 80028e0:	e00e      	b.n	8002900 <HAL_GPIO_Init+0x228>
 80028e2:	2308      	movs	r3, #8
 80028e4:	e00c      	b.n	8002900 <HAL_GPIO_Init+0x228>
 80028e6:	2306      	movs	r3, #6
 80028e8:	e00a      	b.n	8002900 <HAL_GPIO_Init+0x228>
 80028ea:	2305      	movs	r3, #5
 80028ec:	e008      	b.n	8002900 <HAL_GPIO_Init+0x228>
 80028ee:	2304      	movs	r3, #4
 80028f0:	e006      	b.n	8002900 <HAL_GPIO_Init+0x228>
 80028f2:	2303      	movs	r3, #3
 80028f4:	e004      	b.n	8002900 <HAL_GPIO_Init+0x228>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e002      	b.n	8002900 <HAL_GPIO_Init+0x228>
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <HAL_GPIO_Init+0x228>
 80028fe:	2300      	movs	r3, #0
 8002900:	69fa      	ldr	r2, [r7, #28]
 8002902:	f002 0203 	and.w	r2, r2, #3
 8002906:	0092      	lsls	r2, r2, #2
 8002908:	4093      	lsls	r3, r2
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4313      	orrs	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002910:	4935      	ldr	r1, [pc, #212]	@ (80029e8 <HAL_GPIO_Init+0x310>)
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	089b      	lsrs	r3, r3, #2
 8002916:	3302      	adds	r3, #2
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800291e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a0c <HAL_GPIO_Init+0x334>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	43db      	mvns	r3, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4013      	ands	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002942:	4a32      	ldr	r2, [pc, #200]	@ (8002a0c <HAL_GPIO_Init+0x334>)
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002948:	4b30      	ldr	r3, [pc, #192]	@ (8002a0c <HAL_GPIO_Init+0x334>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	4313      	orrs	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800296c:	4a27      	ldr	r2, [pc, #156]	@ (8002a0c <HAL_GPIO_Init+0x334>)
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002972:	4b26      	ldr	r3, [pc, #152]	@ (8002a0c <HAL_GPIO_Init+0x334>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	43db      	mvns	r3, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4013      	ands	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	4313      	orrs	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002996:	4a1d      	ldr	r2, [pc, #116]	@ (8002a0c <HAL_GPIO_Init+0x334>)
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800299c:	4b1b      	ldr	r3, [pc, #108]	@ (8002a0c <HAL_GPIO_Init+0x334>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	43db      	mvns	r3, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4313      	orrs	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029c0:	4a12      	ldr	r2, [pc, #72]	@ (8002a0c <HAL_GPIO_Init+0x334>)
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3301      	adds	r3, #1
 80029ca:	61fb      	str	r3, [r7, #28]
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	2b0f      	cmp	r3, #15
 80029d0:	f67f ae90 	bls.w	80026f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029d4:	bf00      	nop
 80029d6:	bf00      	nop
 80029d8:	3724      	adds	r7, #36	@ 0x24
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	40023800 	.word	0x40023800
 80029e8:	40013800 	.word	0x40013800
 80029ec:	40020000 	.word	0x40020000
 80029f0:	40020400 	.word	0x40020400
 80029f4:	40020800 	.word	0x40020800
 80029f8:	40020c00 	.word	0x40020c00
 80029fc:	40021000 	.word	0x40021000
 8002a00:	40021400 	.word	0x40021400
 8002a04:	40021800 	.word	0x40021800
 8002a08:	40021c00 	.word	0x40021c00
 8002a0c:	40013c00 	.word	0x40013c00

08002a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	807b      	strh	r3, [r7, #2]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a20:	787b      	ldrb	r3, [r7, #1]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a26:	887a      	ldrh	r2, [r7, #2]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a2c:	e003      	b.n	8002a36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a2e:	887b      	ldrh	r3, [r7, #2]
 8002a30:	041a      	lsls	r2, r3, #16
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	619a      	str	r2, [r3, #24]
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b085      	sub	sp, #20
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a54:	887a      	ldrh	r2, [r7, #2]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	041a      	lsls	r2, r3, #16
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	43d9      	mvns	r1, r3
 8002a60:	887b      	ldrh	r3, [r7, #2]
 8002a62:	400b      	ands	r3, r1
 8002a64:	431a      	orrs	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	619a      	str	r2, [r3, #24]
}
 8002a6a:	bf00      	nop
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
	...

08002a78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e12b      	b.n	8002ce2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d106      	bne.n	8002aa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7fe fcc8 	bl	8001434 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2224      	movs	r2, #36	@ 0x24
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0201 	bic.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002aca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ada:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002adc:	f003 f82e 	bl	8005b3c <HAL_RCC_GetPCLK1Freq>
 8002ae0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	4a81      	ldr	r2, [pc, #516]	@ (8002cec <HAL_I2C_Init+0x274>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d807      	bhi.n	8002afc <HAL_I2C_Init+0x84>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4a80      	ldr	r2, [pc, #512]	@ (8002cf0 <HAL_I2C_Init+0x278>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	bf94      	ite	ls
 8002af4:	2301      	movls	r3, #1
 8002af6:	2300      	movhi	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	e006      	b.n	8002b0a <HAL_I2C_Init+0x92>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4a7d      	ldr	r2, [pc, #500]	@ (8002cf4 <HAL_I2C_Init+0x27c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	bf94      	ite	ls
 8002b04:	2301      	movls	r3, #1
 8002b06:	2300      	movhi	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e0e7      	b.n	8002ce2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4a78      	ldr	r2, [pc, #480]	@ (8002cf8 <HAL_I2C_Init+0x280>)
 8002b16:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1a:	0c9b      	lsrs	r3, r3, #18
 8002b1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	4a6a      	ldr	r2, [pc, #424]	@ (8002cec <HAL_I2C_Init+0x274>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d802      	bhi.n	8002b4c <HAL_I2C_Init+0xd4>
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	e009      	b.n	8002b60 <HAL_I2C_Init+0xe8>
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b52:	fb02 f303 	mul.w	r3, r2, r3
 8002b56:	4a69      	ldr	r2, [pc, #420]	@ (8002cfc <HAL_I2C_Init+0x284>)
 8002b58:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5c:	099b      	lsrs	r3, r3, #6
 8002b5e:	3301      	adds	r3, #1
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	430b      	orrs	r3, r1
 8002b66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b72:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	495c      	ldr	r1, [pc, #368]	@ (8002cec <HAL_I2C_Init+0x274>)
 8002b7c:	428b      	cmp	r3, r1
 8002b7e:	d819      	bhi.n	8002bb4 <HAL_I2C_Init+0x13c>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	1e59      	subs	r1, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b8e:	1c59      	adds	r1, r3, #1
 8002b90:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b94:	400b      	ands	r3, r1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <HAL_I2C_Init+0x138>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	1e59      	subs	r1, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ba8:	3301      	adds	r3, #1
 8002baa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bae:	e051      	b.n	8002c54 <HAL_I2C_Init+0x1dc>
 8002bb0:	2304      	movs	r3, #4
 8002bb2:	e04f      	b.n	8002c54 <HAL_I2C_Init+0x1dc>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d111      	bne.n	8002be0 <HAL_I2C_Init+0x168>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	1e58      	subs	r0, r3, #1
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6859      	ldr	r1, [r3, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	440b      	add	r3, r1
 8002bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bce:	3301      	adds	r3, #1
 8002bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	bf0c      	ite	eq
 8002bd8:	2301      	moveq	r3, #1
 8002bda:	2300      	movne	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	e012      	b.n	8002c06 <HAL_I2C_Init+0x18e>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1e58      	subs	r0, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6859      	ldr	r1, [r3, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	0099      	lsls	r1, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	bf0c      	ite	eq
 8002c00:	2301      	moveq	r3, #1
 8002c02:	2300      	movne	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_I2C_Init+0x196>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e022      	b.n	8002c54 <HAL_I2C_Init+0x1dc>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10e      	bne.n	8002c34 <HAL_I2C_Init+0x1bc>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1e58      	subs	r0, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6859      	ldr	r1, [r3, #4]
 8002c1e:	460b      	mov	r3, r1
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	440b      	add	r3, r1
 8002c24:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c28:	3301      	adds	r3, #1
 8002c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c32:	e00f      	b.n	8002c54 <HAL_I2C_Init+0x1dc>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	1e58      	subs	r0, r3, #1
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6859      	ldr	r1, [r3, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	0099      	lsls	r1, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	6809      	ldr	r1, [r1, #0]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69da      	ldr	r2, [r3, #28]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c82:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6911      	ldr	r1, [r2, #16]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	68d2      	ldr	r2, [r2, #12]
 8002c8e:	4311      	orrs	r1, r2
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6812      	ldr	r2, [r2, #0]
 8002c94:	430b      	orrs	r3, r1
 8002c96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695a      	ldr	r2, [r3, #20]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0201 	orr.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2220      	movs	r2, #32
 8002cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	000186a0 	.word	0x000186a0
 8002cf0:	001e847f 	.word	0x001e847f
 8002cf4:	003d08ff 	.word	0x003d08ff
 8002cf8:	431bde83 	.word	0x431bde83
 8002cfc:	10624dd3 	.word	0x10624dd3

08002d00 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d12:	2b80      	cmp	r3, #128	@ 0x80
 8002d14:	d103      	bne.n	8002d1e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	611a      	str	r2, [r3, #16]
  }
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	461a      	mov	r2, r3
 8002d38:	460b      	mov	r3, r1
 8002d3a:	817b      	strh	r3, [r7, #10]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d40:	f7fe fc9c 	bl	800167c <HAL_GetTick>
 8002d44:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b20      	cmp	r3, #32
 8002d50:	f040 80e0 	bne.w	8002f14 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	2319      	movs	r3, #25
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	4970      	ldr	r1, [pc, #448]	@ (8002f20 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f001 fff8 	bl	8004d54 <I2C_WaitOnFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e0d3      	b.n	8002f16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d101      	bne.n	8002d7c <HAL_I2C_Master_Transmit+0x50>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e0cc      	b.n	8002f16 <HAL_I2C_Master_Transmit+0x1ea>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d007      	beq.n	8002da2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 0201 	orr.w	r2, r2, #1
 8002da0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002db0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2221      	movs	r2, #33	@ 0x21
 8002db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2210      	movs	r2, #16
 8002dbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	893a      	ldrh	r2, [r7, #8]
 8002dd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4a50      	ldr	r2, [pc, #320]	@ (8002f24 <HAL_I2C_Master_Transmit+0x1f8>)
 8002de2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002de4:	8979      	ldrh	r1, [r7, #10]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	6a3a      	ldr	r2, [r7, #32]
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f001 fdba 	bl	8004964 <I2C_MasterRequestWrite>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e08d      	b.n	8002f16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e10:	e066      	b.n	8002ee0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	6a39      	ldr	r1, [r7, #32]
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f002 f8b6 	bl	8004f88 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00d      	beq.n	8002e3e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d107      	bne.n	8002e3a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e06b      	b.n	8002f16 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e42:	781a      	ldrb	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e66:	3b01      	subs	r3, #1
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b04      	cmp	r3, #4
 8002e7a:	d11b      	bne.n	8002eb4 <HAL_I2C_Master_Transmit+0x188>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d017      	beq.n	8002eb4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e88:	781a      	ldrb	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	6a39      	ldr	r1, [r7, #32]
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f002 f8ad 	bl	8005018 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00d      	beq.n	8002ee0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d107      	bne.n	8002edc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eda:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e01a      	b.n	8002f16 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d194      	bne.n	8002e12 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ef6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	e000      	b.n	8002f16 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f14:	2302      	movs	r3, #2
  }
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	00100002 	.word	0x00100002
 8002f24:	ffff0000 	.word	0xffff0000

08002f28 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08c      	sub	sp, #48	@ 0x30
 8002f2c:	af02      	add	r7, sp, #8
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	607a      	str	r2, [r7, #4]
 8002f32:	461a      	mov	r2, r3
 8002f34:	460b      	mov	r3, r1
 8002f36:	817b      	strh	r3, [r7, #10]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f3c:	f7fe fb9e 	bl	800167c <HAL_GetTick>
 8002f40:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b20      	cmp	r3, #32
 8002f4c:	f040 8217 	bne.w	800337e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	2319      	movs	r3, #25
 8002f56:	2201      	movs	r2, #1
 8002f58:	497c      	ldr	r1, [pc, #496]	@ (800314c <HAL_I2C_Master_Receive+0x224>)
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f001 fefa 	bl	8004d54 <I2C_WaitOnFlagUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002f66:	2302      	movs	r3, #2
 8002f68:	e20a      	b.n	8003380 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_I2C_Master_Receive+0x50>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e203      	b.n	8003380 <HAL_I2C_Master_Receive+0x458>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d007      	beq.n	8002f9e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 0201 	orr.w	r2, r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2222      	movs	r2, #34	@ 0x22
 8002fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2210      	movs	r2, #16
 8002fba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	893a      	ldrh	r2, [r7, #8]
 8002fce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	4a5c      	ldr	r2, [pc, #368]	@ (8003150 <HAL_I2C_Master_Receive+0x228>)
 8002fde:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fe0:	8979      	ldrh	r1, [r7, #10]
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f001 fd3e 	bl	8004a68 <I2C_MasterRequestRead>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e1c4      	b.n	8003380 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d113      	bne.n	8003026 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ffe:	2300      	movs	r3, #0
 8003000:	623b      	str	r3, [r7, #32]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	623b      	str	r3, [r7, #32]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	623b      	str	r3, [r7, #32]
 8003012:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	e198      	b.n	8003358 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800302a:	2b01      	cmp	r3, #1
 800302c:	d11b      	bne.n	8003066 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800303c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800303e:	2300      	movs	r3, #0
 8003040:	61fb      	str	r3, [r7, #28]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	61fb      	str	r3, [r7, #28]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	61fb      	str	r3, [r7, #28]
 8003052:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	e178      	b.n	8003358 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800306a:	2b02      	cmp	r3, #2
 800306c:	d11b      	bne.n	80030a6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800307c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800308c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800308e:	2300      	movs	r3, #0
 8003090:	61bb      	str	r3, [r7, #24]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	61bb      	str	r3, [r7, #24]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	e158      	b.n	8003358 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80030b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	617b      	str	r3, [r7, #20]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80030cc:	e144      	b.n	8003358 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	f200 80f1 	bhi.w	80032ba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d123      	bne.n	8003128 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f002 f811 	bl	800510c <I2C_WaitOnRXNEFlagUntilTimeout>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e145      	b.n	8003380 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691a      	ldr	r2, [r3, #16]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800311c:	b29b      	uxth	r3, r3
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003126:	e117      	b.n	8003358 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312c:	2b02      	cmp	r3, #2
 800312e:	d14e      	bne.n	80031ce <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003136:	2200      	movs	r2, #0
 8003138:	4906      	ldr	r1, [pc, #24]	@ (8003154 <HAL_I2C_Master_Receive+0x22c>)
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f001 fe0a 	bl	8004d54 <I2C_WaitOnFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d008      	beq.n	8003158 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e11a      	b.n	8003380 <HAL_I2C_Master_Receive+0x458>
 800314a:	bf00      	nop
 800314c:	00100002 	.word	0x00100002
 8003150:	ffff0000 	.word	0xffff0000
 8003154:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003166:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003184:	3b01      	subs	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031cc:	e0c4      	b.n	8003358 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d4:	2200      	movs	r2, #0
 80031d6:	496c      	ldr	r1, [pc, #432]	@ (8003388 <HAL_I2C_Master_Receive+0x460>)
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f001 fdbb 	bl	8004d54 <I2C_WaitOnFlagUntilTimeout>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0cb      	b.n	8003380 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320a:	1c5a      	adds	r2, r3, #1
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003214:	3b01      	subs	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003220:	b29b      	uxth	r3, r3
 8003222:	3b01      	subs	r3, #1
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800322a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003230:	2200      	movs	r2, #0
 8003232:	4955      	ldr	r1, [pc, #340]	@ (8003388 <HAL_I2C_Master_Receive+0x460>)
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f001 fd8d 	bl	8004d54 <I2C_WaitOnFlagUntilTimeout>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e09d      	b.n	8003380 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003252:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691a      	ldr	r2, [r3, #16]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800327c:	b29b      	uxth	r3, r3
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	691a      	ldr	r2, [r3, #16]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003298:	1c5a      	adds	r2, r3, #1
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032b8:	e04e      	b.n	8003358 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f001 ff24 	bl	800510c <I2C_WaitOnRXNEFlagUntilTimeout>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e058      	b.n	8003380 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ea:	3b01      	subs	r3, #1
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b04      	cmp	r3, #4
 800330c:	d124      	bne.n	8003358 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003312:	2b03      	cmp	r3, #3
 8003314:	d107      	bne.n	8003326 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003324:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003342:	3b01      	subs	r3, #1
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800335c:	2b00      	cmp	r3, #0
 800335e:	f47f aeb6 	bne.w	80030ce <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2220      	movs	r2, #32
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	e000      	b.n	8003380 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800337e:	2302      	movs	r3, #2
  }
}
 8003380:	4618      	mov	r0, r3
 8003382:	3728      	adds	r7, #40	@ 0x28
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	00010004 	.word	0x00010004

0800338c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033ac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033b4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
 80033b8:	2b10      	cmp	r3, #16
 80033ba:	d003      	beq.n	80033c4 <HAL_I2C_EV_IRQHandler+0x38>
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	2b40      	cmp	r3, #64	@ 0x40
 80033c0:	f040 80c1 	bne.w	8003546 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10d      	bne.n	80033fa <HAL_I2C_EV_IRQHandler+0x6e>
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80033e4:	d003      	beq.n	80033ee <HAL_I2C_EV_IRQHandler+0x62>
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80033ec:	d101      	bne.n	80033f2 <HAL_I2C_EV_IRQHandler+0x66>
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <HAL_I2C_EV_IRQHandler+0x68>
 80033f2:	2300      	movs	r3, #0
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	f000 8132 	beq.w	800365e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00c      	beq.n	800341e <HAL_I2C_EV_IRQHandler+0x92>
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	0a5b      	lsrs	r3, r3, #9
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d006      	beq.n	800341e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f001 ff07 	bl	8005224 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fcf8 	bl	8003e0c <I2C_Master_SB>
 800341c:	e092      	b.n	8003544 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	08db      	lsrs	r3, r3, #3
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d009      	beq.n	800343e <HAL_I2C_EV_IRQHandler+0xb2>
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	0a5b      	lsrs	r3, r3, #9
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 fd6e 	bl	8003f18 <I2C_Master_ADD10>
 800343c:	e082      	b.n	8003544 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	085b      	lsrs	r3, r3, #1
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d009      	beq.n	800345e <HAL_I2C_EV_IRQHandler+0xd2>
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	0a5b      	lsrs	r3, r3, #9
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fd88 	bl	8003f6c <I2C_Master_ADDR>
 800345c:	e072      	b.n	8003544 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	089b      	lsrs	r3, r3, #2
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d03b      	beq.n	80034e2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003474:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003478:	f000 80f3 	beq.w	8003662 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	09db      	lsrs	r3, r3, #7
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00f      	beq.n	80034a8 <HAL_I2C_EV_IRQHandler+0x11c>
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	0a9b      	lsrs	r3, r3, #10
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d009      	beq.n	80034a8 <HAL_I2C_EV_IRQHandler+0x11c>
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	089b      	lsrs	r3, r3, #2
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d103      	bne.n	80034a8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f94c 	bl	800373e <I2C_MasterTransmit_TXE>
 80034a6:	e04d      	b.n	8003544 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	089b      	lsrs	r3, r3, #2
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 80d6 	beq.w	8003662 <HAL_I2C_EV_IRQHandler+0x2d6>
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	0a5b      	lsrs	r3, r3, #9
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 80cf 	beq.w	8003662 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80034c4:	7bbb      	ldrb	r3, [r7, #14]
 80034c6:	2b21      	cmp	r3, #33	@ 0x21
 80034c8:	d103      	bne.n	80034d2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f9d3 	bl	8003876 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034d0:	e0c7      	b.n	8003662 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	2b40      	cmp	r3, #64	@ 0x40
 80034d6:	f040 80c4 	bne.w	8003662 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 fa41 	bl	8003962 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034e0:	e0bf      	b.n	8003662 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034f0:	f000 80b7 	beq.w	8003662 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	099b      	lsrs	r3, r3, #6
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00f      	beq.n	8003520 <HAL_I2C_EV_IRQHandler+0x194>
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	0a9b      	lsrs	r3, r3, #10
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b00      	cmp	r3, #0
 800350a:	d009      	beq.n	8003520 <HAL_I2C_EV_IRQHandler+0x194>
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	089b      	lsrs	r3, r3, #2
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	d103      	bne.n	8003520 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 faba 	bl	8003a92 <I2C_MasterReceive_RXNE>
 800351e:	e011      	b.n	8003544 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	089b      	lsrs	r3, r3, #2
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 809a 	beq.w	8003662 <HAL_I2C_EV_IRQHandler+0x2d6>
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	0a5b      	lsrs	r3, r3, #9
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 8093 	beq.w	8003662 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fb70 	bl	8003c22 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003542:	e08e      	b.n	8003662 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003544:	e08d      	b.n	8003662 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354a:	2b00      	cmp	r3, #0
 800354c:	d004      	beq.n	8003558 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	61fb      	str	r3, [r7, #28]
 8003556:	e007      	b.n	8003568 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	085b      	lsrs	r3, r3, #1
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d012      	beq.n	800359a <HAL_I2C_EV_IRQHandler+0x20e>
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	0a5b      	lsrs	r3, r3, #9
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00c      	beq.n	800359a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003590:	69b9      	ldr	r1, [r7, #24]
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 ff39 	bl	800440a <I2C_Slave_ADDR>
 8003598:	e066      	b.n	8003668 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	091b      	lsrs	r3, r3, #4
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d009      	beq.n	80035ba <HAL_I2C_EV_IRQHandler+0x22e>
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	0a5b      	lsrs	r3, r3, #9
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 ff74 	bl	80044a0 <I2C_Slave_STOPF>
 80035b8:	e056      	b.n	8003668 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80035ba:	7bbb      	ldrb	r3, [r7, #14]
 80035bc:	2b21      	cmp	r3, #33	@ 0x21
 80035be:	d002      	beq.n	80035c6 <HAL_I2C_EV_IRQHandler+0x23a>
 80035c0:	7bbb      	ldrb	r3, [r7, #14]
 80035c2:	2b29      	cmp	r3, #41	@ 0x29
 80035c4:	d125      	bne.n	8003612 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	09db      	lsrs	r3, r3, #7
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00f      	beq.n	80035f2 <HAL_I2C_EV_IRQHandler+0x266>
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	0a9b      	lsrs	r3, r3, #10
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d009      	beq.n	80035f2 <HAL_I2C_EV_IRQHandler+0x266>
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	089b      	lsrs	r3, r3, #2
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d103      	bne.n	80035f2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fe4f 	bl	800428e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035f0:	e039      	b.n	8003666 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	089b      	lsrs	r3, r3, #2
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d033      	beq.n	8003666 <HAL_I2C_EV_IRQHandler+0x2da>
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	0a5b      	lsrs	r3, r3, #9
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d02d      	beq.n	8003666 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fe7c 	bl	8004308 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003610:	e029      	b.n	8003666 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	099b      	lsrs	r3, r3, #6
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00f      	beq.n	800363e <HAL_I2C_EV_IRQHandler+0x2b2>
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	0a9b      	lsrs	r3, r3, #10
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d009      	beq.n	800363e <HAL_I2C_EV_IRQHandler+0x2b2>
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	089b      	lsrs	r3, r3, #2
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d103      	bne.n	800363e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fe87 	bl	800434a <I2C_SlaveReceive_RXNE>
 800363c:	e014      	b.n	8003668 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	089b      	lsrs	r3, r3, #2
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00e      	beq.n	8003668 <HAL_I2C_EV_IRQHandler+0x2dc>
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	0a5b      	lsrs	r3, r3, #9
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d008      	beq.n	8003668 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 feb5 	bl	80043c6 <I2C_SlaveReceive_BTF>
 800365c:	e004      	b.n	8003668 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800365e:	bf00      	nop
 8003660:	e002      	b.n	8003668 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003662:	bf00      	nop
 8003664:	e000      	b.n	8003668 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003666:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003668:	3720      	adds	r7, #32
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
 80036c6:	460b      	mov	r3, r1
 80036c8:	70fb      	strb	r3, [r7, #3]
 80036ca:	4613      	mov	r3, r2
 80036cc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b084      	sub	sp, #16
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800374c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003754:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003760:	2b00      	cmp	r3, #0
 8003762:	d150      	bne.n	8003806 <I2C_MasterTransmit_TXE+0xc8>
 8003764:	7bfb      	ldrb	r3, [r7, #15]
 8003766:	2b21      	cmp	r3, #33	@ 0x21
 8003768:	d14d      	bne.n	8003806 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b08      	cmp	r3, #8
 800376e:	d01d      	beq.n	80037ac <I2C_MasterTransmit_TXE+0x6e>
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b20      	cmp	r3, #32
 8003774:	d01a      	beq.n	80037ac <I2C_MasterTransmit_TXE+0x6e>
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800377c:	d016      	beq.n	80037ac <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800378c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2211      	movs	r2, #17
 8003792:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff ff62 	bl	800366e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037aa:	e060      	b.n	800386e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80037ba:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ca:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b40      	cmp	r3, #64	@ 0x40
 80037e4:	d107      	bne.n	80037f6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff ff7d 	bl	80036ee <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037f4:	e03b      	b.n	800386e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff ff35 	bl	800366e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003804:	e033      	b.n	800386e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003806:	7bfb      	ldrb	r3, [r7, #15]
 8003808:	2b21      	cmp	r3, #33	@ 0x21
 800380a:	d005      	beq.n	8003818 <I2C_MasterTransmit_TXE+0xda>
 800380c:	7bbb      	ldrb	r3, [r7, #14]
 800380e:	2b40      	cmp	r3, #64	@ 0x40
 8003810:	d12d      	bne.n	800386e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	2b22      	cmp	r3, #34	@ 0x22
 8003816:	d12a      	bne.n	800386e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800381c:	b29b      	uxth	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d108      	bne.n	8003834 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003830:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003832:	e01c      	b.n	800386e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b40      	cmp	r3, #64	@ 0x40
 800383e:	d103      	bne.n	8003848 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f88e 	bl	8003962 <I2C_MemoryTransmit_TXE_BTF>
}
 8003846:	e012      	b.n	800386e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384c:	781a      	ldrb	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003858:	1c5a      	adds	r2, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003862:	b29b      	uxth	r3, r3
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800386c:	e7ff      	b.n	800386e <I2C_MasterTransmit_TXE+0x130>
 800386e:	bf00      	nop
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b084      	sub	sp, #16
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003882:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b21      	cmp	r3, #33	@ 0x21
 800388e:	d164      	bne.n	800395a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003894:	b29b      	uxth	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d012      	beq.n	80038c0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389e:	781a      	ldrb	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80038be:	e04c      	b.n	800395a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b08      	cmp	r3, #8
 80038c4:	d01d      	beq.n	8003902 <I2C_MasterTransmit_BTF+0x8c>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	d01a      	beq.n	8003902 <I2C_MasterTransmit_BTF+0x8c>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038d2:	d016      	beq.n	8003902 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038e2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2211      	movs	r2, #17
 80038e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7ff feb7 	bl	800366e <HAL_I2C_MasterTxCpltCallback>
}
 8003900:	e02b      	b.n	800395a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003910:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003920:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b40      	cmp	r3, #64	@ 0x40
 800393a:	d107      	bne.n	800394c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff fed2 	bl	80036ee <HAL_I2C_MemTxCpltCallback>
}
 800394a:	e006      	b.n	800395a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7ff fe8a 	bl	800366e <HAL_I2C_MasterTxCpltCallback>
}
 800395a:	bf00      	nop
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b084      	sub	sp, #16
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003970:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003976:	2b00      	cmp	r3, #0
 8003978:	d11d      	bne.n	80039b6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800397e:	2b01      	cmp	r3, #1
 8003980:	d10b      	bne.n	800399a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003986:	b2da      	uxtb	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003992:	1c9a      	adds	r2, r3, #2
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003998:	e077      	b.n	8003a8a <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800399e:	b29b      	uxth	r3, r3
 80039a0:	121b      	asrs	r3, r3, #8
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80039b4:	e069      	b.n	8003a8a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d10b      	bne.n	80039d6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80039d4:	e059      	b.n	8003a8a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d152      	bne.n	8003a84 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80039de:	7bfb      	ldrb	r3, [r7, #15]
 80039e0:	2b22      	cmp	r3, #34	@ 0x22
 80039e2:	d10d      	bne.n	8003a00 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039f2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80039fe:	e044      	b.n	8003a8a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d015      	beq.n	8003a36 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
 8003a0c:	2b21      	cmp	r3, #33	@ 0x21
 8003a0e:	d112      	bne.n	8003a36 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a14:	781a      	ldrb	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003a34:	e029      	b.n	8003a8a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d124      	bne.n	8003a8a <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	2b21      	cmp	r3, #33	@ 0x21
 8003a44:	d121      	bne.n	8003a8a <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a54:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a64:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff fe36 	bl	80036ee <HAL_I2C_MemTxCpltCallback>
}
 8003a82:	e002      	b.n	8003a8a <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7ff f93b 	bl	8002d00 <I2C_Flush_DR>
}
 8003a8a:	bf00      	nop
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b084      	sub	sp, #16
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b22      	cmp	r3, #34	@ 0x22
 8003aa4:	f040 80b9 	bne.w	8003c1a <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aac:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d921      	bls.n	8003b00 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691a      	ldr	r2, [r3, #16]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2b03      	cmp	r3, #3
 8003aea:	f040 8096 	bne.w	8003c1a <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003afc:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003afe:	e08c      	b.n	8003c1a <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d07f      	beq.n	8003c08 <I2C_MasterReceive_RXNE+0x176>
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d002      	beq.n	8003b14 <I2C_MasterReceive_RXNE+0x82>
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d179      	bne.n	8003c08 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f001 fac7 	bl	80050a8 <I2C_WaitOnSTOPRequestThroughIT>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d14c      	bne.n	8003bba <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b2e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b3e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b40      	cmp	r3, #64	@ 0x40
 8003b78:	d10a      	bne.n	8003b90 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff fdba 	bl	8003702 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b8e:	e044      	b.n	8003c1a <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2b08      	cmp	r3, #8
 8003b9c:	d002      	beq.n	8003ba4 <I2C_MasterReceive_RXNE+0x112>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d103      	bne.n	8003bac <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	631a      	str	r2, [r3, #48]	@ 0x30
 8003baa:	e002      	b.n	8003bb2 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2212      	movs	r2, #18
 8003bb0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7ff fd65 	bl	8003682 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003bb8:	e02f      	b.n	8003c1a <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003bc8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	691a      	ldr	r2, [r3, #16]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd4:	b2d2      	uxtb	r2, r2
 8003bd6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff fd88 	bl	8003716 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c06:	e008      	b.n	8003c1a <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c16:	605a      	str	r2, [r3, #4]
}
 8003c18:	e7ff      	b.n	8003c1a <I2C_MasterReceive_RXNE+0x188>
 8003c1a:	bf00      	nop
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b084      	sub	sp, #16
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d11b      	bne.n	8003c72 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c48:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003c70:	e0c8      	b.n	8003e04 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	2b03      	cmp	r3, #3
 8003c7a:	d129      	bne.n	8003cd0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c8a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d00a      	beq.n	8003ca8 <I2C_MasterReceive_BTF+0x86>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d007      	beq.n	8003ca8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ca6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691a      	ldr	r2, [r3, #16]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb2:	b2d2      	uxtb	r2, r2
 8003cb4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cba:	1c5a      	adds	r2, r3, #1
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003cce:	e099      	b.n	8003e04 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	f040 8081 	bne.w	8003dde <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d002      	beq.n	8003ce8 <I2C_MasterReceive_BTF+0xc6>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2b10      	cmp	r3, #16
 8003ce6:	d108      	bne.n	8003cfa <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	e019      	b.n	8003d2e <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d002      	beq.n	8003d06 <I2C_MasterReceive_BTF+0xe4>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d108      	bne.n	8003d18 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	e00a      	b.n	8003d2e <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2b10      	cmp	r3, #16
 8003d1c:	d007      	beq.n	8003d2e <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d2c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	691a      	ldr	r2, [r3, #16]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d40:	1c5a      	adds	r2, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	691a      	ldr	r2, [r3, #16]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5e:	b2d2      	uxtb	r2, r2
 8003d60:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d66:	1c5a      	adds	r2, r3, #1
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003d88:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b40      	cmp	r3, #64	@ 0x40
 8003d9c:	d10a      	bne.n	8003db4 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff fca8 	bl	8003702 <HAL_I2C_MemRxCpltCallback>
}
 8003db2:	e027      	b.n	8003e04 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d002      	beq.n	8003dc8 <I2C_MasterReceive_BTF+0x1a6>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b20      	cmp	r3, #32
 8003dc6:	d103      	bne.n	8003dd0 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	631a      	str	r2, [r3, #48]	@ 0x30
 8003dce:	e002      	b.n	8003dd6 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2212      	movs	r2, #18
 8003dd4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff fc53 	bl	8003682 <HAL_I2C_MasterRxCpltCallback>
}
 8003ddc:	e012      	b.n	8003e04 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003e04:	bf00      	nop
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b40      	cmp	r3, #64	@ 0x40
 8003e1e:	d117      	bne.n	8003e50 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d109      	bne.n	8003e3c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	461a      	mov	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e38:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003e3a:	e067      	b.n	8003f0c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	f043 0301 	orr.w	r3, r3, #1
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	611a      	str	r2, [r3, #16]
}
 8003e4e:	e05d      	b.n	8003f0c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e58:	d133      	bne.n	8003ec2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b21      	cmp	r3, #33	@ 0x21
 8003e64:	d109      	bne.n	8003e7a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e76:	611a      	str	r2, [r3, #16]
 8003e78:	e008      	b.n	8003e8c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	f043 0301 	orr.w	r3, r3, #1
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d004      	beq.n	8003e9e <I2C_Master_SB+0x92>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d108      	bne.n	8003eb0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d032      	beq.n	8003f0c <I2C_Master_SB+0x100>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d02d      	beq.n	8003f0c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ebe:	605a      	str	r2, [r3, #4]
}
 8003ec0:	e024      	b.n	8003f0c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10e      	bne.n	8003ee8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	11db      	asrs	r3, r3, #7
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	f003 0306 	and.w	r3, r3, #6
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	f063 030f 	orn	r3, r3, #15
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	611a      	str	r2, [r3, #16]
}
 8003ee6:	e011      	b.n	8003f0c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d10d      	bne.n	8003f0c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	11db      	asrs	r3, r3, #7
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	f003 0306 	and.w	r3, r3, #6
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	f063 030e 	orn	r3, r3, #14
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	611a      	str	r2, [r3, #16]
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d004      	beq.n	8003f3e <I2C_Master_ADD10+0x26>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d108      	bne.n	8003f50 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00c      	beq.n	8003f60 <I2C_Master_ADD10+0x48>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d007      	beq.n	8003f60 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f5e:	605a      	str	r2, [r3, #4]
  }
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b091      	sub	sp, #68	@ 0x44
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f7a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f82:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f88:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b22      	cmp	r3, #34	@ 0x22
 8003f94:	f040 8169 	bne.w	800426a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10f      	bne.n	8003fc0 <I2C_Master_ADDR+0x54>
 8003fa0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003fa4:	2b40      	cmp	r3, #64	@ 0x40
 8003fa6:	d10b      	bne.n	8003fc0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fa8:	2300      	movs	r3, #0
 8003faa:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fbe:	e160      	b.n	8004282 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d11d      	bne.n	8004004 <I2C_Master_ADDR+0x98>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003fd0:	d118      	bne.n	8004004 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ff6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	651a      	str	r2, [r3, #80]	@ 0x50
 8004002:	e13e      	b.n	8004282 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004008:	b29b      	uxth	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d113      	bne.n	8004036 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800400e:	2300      	movs	r3, #0
 8004010:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	62bb      	str	r3, [r7, #40]	@ 0x28
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004022:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	e115      	b.n	8004262 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b01      	cmp	r3, #1
 800403e:	f040 808a 	bne.w	8004156 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004044:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004048:	d137      	bne.n	80040ba <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004058:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004064:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004068:	d113      	bne.n	8004092 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004078:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800407a:	2300      	movs	r3, #0
 800407c:	627b      	str	r3, [r7, #36]	@ 0x24
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	627b      	str	r3, [r7, #36]	@ 0x24
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	627b      	str	r3, [r7, #36]	@ 0x24
 800408e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004090:	e0e7      	b.n	8004262 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004092:	2300      	movs	r3, #0
 8004094:	623b      	str	r3, [r7, #32]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	623b      	str	r3, [r7, #32]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	623b      	str	r3, [r7, #32]
 80040a6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	e0d3      	b.n	8004262 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80040ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d02e      	beq.n	800411e <I2C_Master_ADDR+0x1b2>
 80040c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c2:	2b20      	cmp	r3, #32
 80040c4:	d02b      	beq.n	800411e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80040c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c8:	2b12      	cmp	r3, #18
 80040ca:	d102      	bne.n	80040d2 <I2C_Master_ADDR+0x166>
 80040cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d125      	bne.n	800411e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80040d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d00e      	beq.n	80040f6 <I2C_Master_ADDR+0x18a>
 80040d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d00b      	beq.n	80040f6 <I2C_Master_ADDR+0x18a>
 80040de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e0:	2b10      	cmp	r3, #16
 80040e2:	d008      	beq.n	80040f6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	e007      	b.n	8004106 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004104:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004106:	2300      	movs	r3, #0
 8004108:	61fb      	str	r3, [r7, #28]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	61fb      	str	r3, [r7, #28]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	61fb      	str	r3, [r7, #28]
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	e0a1      	b.n	8004262 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800412c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800412e:	2300      	movs	r3, #0
 8004130:	61bb      	str	r3, [r7, #24]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	61bb      	str	r3, [r7, #24]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	61bb      	str	r3, [r7, #24]
 8004142:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	e085      	b.n	8004262 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415a:	b29b      	uxth	r3, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d14d      	bne.n	80041fc <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004162:	2b04      	cmp	r3, #4
 8004164:	d016      	beq.n	8004194 <I2C_Master_ADDR+0x228>
 8004166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004168:	2b02      	cmp	r3, #2
 800416a:	d013      	beq.n	8004194 <I2C_Master_ADDR+0x228>
 800416c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800416e:	2b10      	cmp	r3, #16
 8004170:	d010      	beq.n	8004194 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004180:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	e007      	b.n	80041a4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041a2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041b2:	d117      	bne.n	80041e4 <I2C_Master_ADDR+0x278>
 80041b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80041ba:	d00b      	beq.n	80041d4 <I2C_Master_ADDR+0x268>
 80041bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d008      	beq.n	80041d4 <I2C_Master_ADDR+0x268>
 80041c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d005      	beq.n	80041d4 <I2C_Master_ADDR+0x268>
 80041c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ca:	2b10      	cmp	r3, #16
 80041cc:	d002      	beq.n	80041d4 <I2C_Master_ADDR+0x268>
 80041ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d0:	2b20      	cmp	r3, #32
 80041d2:	d107      	bne.n	80041e4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80041e2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	e032      	b.n	8004262 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800420a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004216:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800421a:	d117      	bne.n	800424c <I2C_Master_ADDR+0x2e0>
 800421c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800421e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004222:	d00b      	beq.n	800423c <I2C_Master_ADDR+0x2d0>
 8004224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004226:	2b01      	cmp	r3, #1
 8004228:	d008      	beq.n	800423c <I2C_Master_ADDR+0x2d0>
 800422a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800422c:	2b08      	cmp	r3, #8
 800422e:	d005      	beq.n	800423c <I2C_Master_ADDR+0x2d0>
 8004230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004232:	2b10      	cmp	r3, #16
 8004234:	d002      	beq.n	800423c <I2C_Master_ADDR+0x2d0>
 8004236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004238:	2b20      	cmp	r3, #32
 800423a:	d107      	bne.n	800424c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800424a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800424c:	2300      	movs	r3, #0
 800424e:	613b      	str	r3, [r7, #16]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	613b      	str	r3, [r7, #16]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	613b      	str	r3, [r7, #16]
 8004260:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004268:	e00b      	b.n	8004282 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800426a:	2300      	movs	r3, #0
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	68fb      	ldr	r3, [r7, #12]
}
 8004280:	e7ff      	b.n	8004282 <I2C_Master_ADDR+0x316>
 8004282:	bf00      	nop
 8004284:	3744      	adds	r7, #68	@ 0x44
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800429c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d02b      	beq.n	8004300 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ac:	781a      	ldrb	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d114      	bne.n	8004300 <I2C_SlaveTransmit_TXE+0x72>
 80042d6:	7bfb      	ldrb	r3, [r7, #15]
 80042d8:	2b29      	cmp	r3, #41	@ 0x29
 80042da:	d111      	bne.n	8004300 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042ea:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2221      	movs	r2, #33	@ 0x21
 80042f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2228      	movs	r2, #40	@ 0x28
 80042f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7ff f9cb 	bl	8003696 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004300:	bf00      	nop
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d011      	beq.n	800433e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431e:	781a      	ldrb	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432a:	1c5a      	adds	r2, r3, #1
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004334:	b29b      	uxth	r3, r3
 8004336:	3b01      	subs	r3, #1
 8004338:	b29a      	uxth	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004358:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800435e:	b29b      	uxth	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d02c      	beq.n	80043be <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	691a      	ldr	r2, [r3, #16]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004380:	b29b      	uxth	r3, r3
 8004382:	3b01      	subs	r3, #1
 8004384:	b29a      	uxth	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438e:	b29b      	uxth	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	d114      	bne.n	80043be <I2C_SlaveReceive_RXNE+0x74>
 8004394:	7bfb      	ldrb	r3, [r7, #15]
 8004396:	2b2a      	cmp	r3, #42	@ 0x2a
 8004398:	d111      	bne.n	80043be <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043a8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2222      	movs	r2, #34	@ 0x22
 80043ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2228      	movs	r2, #40	@ 0x28
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7ff f976 	bl	80036aa <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80043be:	bf00      	nop
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d012      	beq.n	80043fe <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	691a      	ldr	r2, [r3, #16]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b084      	sub	sp, #16
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004414:	2300      	movs	r3, #0
 8004416:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800441e:	b2db      	uxtb	r3, r3
 8004420:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004424:	2b28      	cmp	r3, #40	@ 0x28
 8004426:	d127      	bne.n	8004478 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004436:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	089b      	lsrs	r3, r3, #2
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004444:	2301      	movs	r3, #1
 8004446:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	09db      	lsrs	r3, r3, #7
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b00      	cmp	r3, #0
 8004452:	d103      	bne.n	800445c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	81bb      	strh	r3, [r7, #12]
 800445a:	e002      	b.n	8004462 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800446a:	89ba      	ldrh	r2, [r7, #12]
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	4619      	mov	r1, r3
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f7ff f924 	bl	80036be <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004476:	e00e      	b.n	8004496 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004478:	2300      	movs	r3, #0
 800447a:	60bb      	str	r3, [r7, #8]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	60bb      	str	r3, [r7, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	60bb      	str	r3, [r7, #8]
 800448c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004496:	bf00      	nop
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044ae:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80044be:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80044c0:	2300      	movs	r3, #0
 80044c2:	60bb      	str	r3, [r7, #8]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	60bb      	str	r3, [r7, #8]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0201 	orr.w	r2, r2, #1
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ec:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044fc:	d172      	bne.n	80045e4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80044fe:	7bfb      	ldrb	r3, [r7, #15]
 8004500:	2b22      	cmp	r3, #34	@ 0x22
 8004502:	d002      	beq.n	800450a <I2C_Slave_STOPF+0x6a>
 8004504:	7bfb      	ldrb	r3, [r7, #15]
 8004506:	2b2a      	cmp	r3, #42	@ 0x2a
 8004508:	d135      	bne.n	8004576 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	b29a      	uxth	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d005      	beq.n	800452e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004526:	f043 0204 	orr.w	r2, r3, #4
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800453c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004542:	4618      	mov	r0, r3
 8004544:	f7fe f8b9 	bl	80026ba <HAL_DMA_GetState>
 8004548:	4603      	mov	r3, r0
 800454a:	2b01      	cmp	r3, #1
 800454c:	d049      	beq.n	80045e2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004552:	4a69      	ldr	r2, [pc, #420]	@ (80046f8 <I2C_Slave_STOPF+0x258>)
 8004554:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800455a:	4618      	mov	r0, r3
 800455c:	f7fe f88b 	bl	8002676 <HAL_DMA_Abort_IT>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d03d      	beq.n	80045e2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800456a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004570:	4610      	mov	r0, r2
 8004572:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004574:	e035      	b.n	80045e2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	b29a      	uxth	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004588:	b29b      	uxth	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d005      	beq.n	800459a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004592:	f043 0204 	orr.w	r2, r3, #4
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fe f883 	bl	80026ba <HAL_DMA_GetState>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d014      	beq.n	80045e4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045be:	4a4e      	ldr	r2, [pc, #312]	@ (80046f8 <I2C_Slave_STOPF+0x258>)
 80045c0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fe f855 	bl	8002676 <HAL_DMA_Abort_IT>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d008      	beq.n	80045e4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80045dc:	4610      	mov	r0, r2
 80045de:	4798      	blx	r3
 80045e0:	e000      	b.n	80045e4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045e2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d03e      	beq.n	800466c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d112      	bne.n	8004622 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691a      	ldr	r2, [r3, #16]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800462c:	2b40      	cmp	r3, #64	@ 0x40
 800462e:	d112      	bne.n	8004656 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800464c:	b29b      	uxth	r3, r3
 800464e:	3b01      	subs	r3, #1
 8004650:	b29a      	uxth	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800465a:	b29b      	uxth	r3, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	d005      	beq.n	800466c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004664:	f043 0204 	orr.w	r2, r3, #4
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f843 	bl	8004700 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800467a:	e039      	b.n	80046f0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800467c:	7bfb      	ldrb	r3, [r7, #15]
 800467e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004680:	d109      	bne.n	8004696 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2228      	movs	r2, #40	@ 0x28
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f7ff f80a 	bl	80036aa <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b28      	cmp	r3, #40	@ 0x28
 80046a0:	d111      	bne.n	80046c6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a15      	ldr	r2, [pc, #84]	@ (80046fc <I2C_Slave_STOPF+0x25c>)
 80046a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7ff f80b 	bl	80036da <HAL_I2C_ListenCpltCallback>
}
 80046c4:	e014      	b.n	80046f0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ca:	2b22      	cmp	r3, #34	@ 0x22
 80046cc:	d002      	beq.n	80046d4 <I2C_Slave_STOPF+0x234>
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
 80046d0:	2b22      	cmp	r3, #34	@ 0x22
 80046d2:	d10d      	bne.n	80046f0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2220      	movs	r2, #32
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7fe ffdd 	bl	80036aa <HAL_I2C_SlaveRxCpltCallback>
}
 80046f0:	bf00      	nop
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	08004c05 	.word	0x08004c05
 80046fc:	ffff0000 	.word	0xffff0000

08004700 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800470e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004716:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004718:	7bbb      	ldrb	r3, [r7, #14]
 800471a:	2b10      	cmp	r3, #16
 800471c:	d002      	beq.n	8004724 <I2C_ITError+0x24>
 800471e:	7bbb      	ldrb	r3, [r7, #14]
 8004720:	2b40      	cmp	r3, #64	@ 0x40
 8004722:	d10a      	bne.n	800473a <I2C_ITError+0x3a>
 8004724:	7bfb      	ldrb	r3, [r7, #15]
 8004726:	2b22      	cmp	r3, #34	@ 0x22
 8004728:	d107      	bne.n	800473a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004738:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800473a:	7bfb      	ldrb	r3, [r7, #15]
 800473c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004740:	2b28      	cmp	r3, #40	@ 0x28
 8004742:	d107      	bne.n	8004754 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2228      	movs	r2, #40	@ 0x28
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004752:	e015      	b.n	8004780 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800475e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004762:	d00a      	beq.n	800477a <I2C_ITError+0x7a>
 8004764:	7bfb      	ldrb	r3, [r7, #15]
 8004766:	2b60      	cmp	r3, #96	@ 0x60
 8004768:	d007      	beq.n	800477a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2220      	movs	r2, #32
 800476e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800478a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800478e:	d162      	bne.n	8004856 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800479e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d020      	beq.n	80047f0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047b2:	4a6a      	ldr	r2, [pc, #424]	@ (800495c <I2C_ITError+0x25c>)
 80047b4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fd ff5b 	bl	8002676 <HAL_DMA_Abort_IT>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 8089 	beq.w	80048da <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0201 	bic.w	r2, r2, #1
 80047d6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2220      	movs	r2, #32
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80047ea:	4610      	mov	r0, r2
 80047ec:	4798      	blx	r3
 80047ee:	e074      	b.n	80048da <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f4:	4a59      	ldr	r2, [pc, #356]	@ (800495c <I2C_ITError+0x25c>)
 80047f6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fd ff3a 	bl	8002676 <HAL_DMA_Abort_IT>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d068      	beq.n	80048da <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004812:	2b40      	cmp	r3, #64	@ 0x40
 8004814:	d10b      	bne.n	800482e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	691a      	ldr	r2, [r3, #16]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004820:	b2d2      	uxtb	r2, r2
 8004822:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 0201 	bic.w	r2, r2, #1
 800483c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2220      	movs	r2, #32
 8004842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800484a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004850:	4610      	mov	r0, r2
 8004852:	4798      	blx	r3
 8004854:	e041      	b.n	80048da <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b60      	cmp	r3, #96	@ 0x60
 8004860:	d125      	bne.n	80048ae <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2220      	movs	r2, #32
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800487a:	2b40      	cmp	r3, #64	@ 0x40
 800487c:	d10b      	bne.n	8004896 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	691a      	ldr	r2, [r3, #16]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0201 	bic.w	r2, r2, #1
 80048a4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7fe ff3f 	bl	800372a <HAL_I2C_AbortCpltCallback>
 80048ac:	e015      	b.n	80048da <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b8:	2b40      	cmp	r3, #64	@ 0x40
 80048ba:	d10b      	bne.n	80048d4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691a      	ldr	r2, [r3, #16]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7fe ff1e 	bl	8003716 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048de:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10e      	bne.n	8004908 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d109      	bne.n	8004908 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d104      	bne.n	8004908 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004904:	2b00      	cmp	r3, #0
 8004906:	d007      	beq.n	8004918 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004916:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800491e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b04      	cmp	r3, #4
 800492a:	d113      	bne.n	8004954 <I2C_ITError+0x254>
 800492c:	7bfb      	ldrb	r3, [r7, #15]
 800492e:	2b28      	cmp	r3, #40	@ 0x28
 8004930:	d110      	bne.n	8004954 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a0a      	ldr	r2, [pc, #40]	@ (8004960 <I2C_ITError+0x260>)
 8004936:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7fe fec3 	bl	80036da <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004954:	bf00      	nop
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	08004c05 	.word	0x08004c05
 8004960:	ffff0000 	.word	0xffff0000

08004964 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af02      	add	r7, sp, #8
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	607a      	str	r2, [r7, #4]
 800496e:	603b      	str	r3, [r7, #0]
 8004970:	460b      	mov	r3, r1
 8004972:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004978:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2b08      	cmp	r3, #8
 800497e:	d006      	beq.n	800498e <I2C_MasterRequestWrite+0x2a>
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d003      	beq.n	800498e <I2C_MasterRequestWrite+0x2a>
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800498c:	d108      	bne.n	80049a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	e00b      	b.n	80049b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a4:	2b12      	cmp	r3, #18
 80049a6:	d107      	bne.n	80049b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 f9c5 	bl	8004d54 <I2C_WaitOnFlagUntilTimeout>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00d      	beq.n	80049ec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049de:	d103      	bne.n	80049e8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e035      	b.n	8004a58 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049f4:	d108      	bne.n	8004a08 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049f6:	897b      	ldrh	r3, [r7, #10]
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	461a      	mov	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a04:	611a      	str	r2, [r3, #16]
 8004a06:	e01b      	b.n	8004a40 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a08:	897b      	ldrh	r3, [r7, #10]
 8004a0a:	11db      	asrs	r3, r3, #7
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	f003 0306 	and.w	r3, r3, #6
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	f063 030f 	orn	r3, r3, #15
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	490e      	ldr	r1, [pc, #56]	@ (8004a60 <I2C_MasterRequestWrite+0xfc>)
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 fa0e 	bl	8004e48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e010      	b.n	8004a58 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a36:	897b      	ldrh	r3, [r7, #10]
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	4907      	ldr	r1, [pc, #28]	@ (8004a64 <I2C_MasterRequestWrite+0x100>)
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f000 f9fe 	bl	8004e48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e000      	b.n	8004a58 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3718      	adds	r7, #24
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	00010008 	.word	0x00010008
 8004a64:	00010002 	.word	0x00010002

08004a68 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b088      	sub	sp, #32
 8004a6c:	af02      	add	r7, sp, #8
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	607a      	str	r2, [r7, #4]
 8004a72:	603b      	str	r3, [r7, #0]
 8004a74:	460b      	mov	r3, r1
 8004a76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a7c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a8c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	d006      	beq.n	8004aa2 <I2C_MasterRequestRead+0x3a>
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d003      	beq.n	8004aa2 <I2C_MasterRequestRead+0x3a>
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004aa0:	d108      	bne.n	8004ab4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ab0:	601a      	str	r2, [r3, #0]
 8004ab2:	e00b      	b.n	8004acc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab8:	2b11      	cmp	r3, #17
 8004aba:	d107      	bne.n	8004acc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004aca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 f93b 	bl	8004d54 <I2C_WaitOnFlagUntilTimeout>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00d      	beq.n	8004b00 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004af2:	d103      	bne.n	8004afc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004afa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e079      	b.n	8004bf4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b08:	d108      	bne.n	8004b1c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b0a:	897b      	ldrh	r3, [r7, #10]
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	f043 0301 	orr.w	r3, r3, #1
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	611a      	str	r2, [r3, #16]
 8004b1a:	e05f      	b.n	8004bdc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b1c:	897b      	ldrh	r3, [r7, #10]
 8004b1e:	11db      	asrs	r3, r3, #7
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	f003 0306 	and.w	r3, r3, #6
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	f063 030f 	orn	r3, r3, #15
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	4930      	ldr	r1, [pc, #192]	@ (8004bfc <I2C_MasterRequestRead+0x194>)
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 f984 	bl	8004e48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e054      	b.n	8004bf4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b4a:	897b      	ldrh	r3, [r7, #10]
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	4929      	ldr	r1, [pc, #164]	@ (8004c00 <I2C_MasterRequestRead+0x198>)
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 f974 	bl	8004e48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e044      	b.n	8004bf4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	613b      	str	r3, [r7, #16]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	613b      	str	r3, [r7, #16]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	613b      	str	r3, [r7, #16]
 8004b7e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b8e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 f8d9 	bl	8004d54 <I2C_WaitOnFlagUntilTimeout>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00d      	beq.n	8004bc4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bb6:	d103      	bne.n	8004bc0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bbe:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e017      	b.n	8004bf4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004bc4:	897b      	ldrh	r3, [r7, #10]
 8004bc6:	11db      	asrs	r3, r3, #7
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	f003 0306 	and.w	r3, r3, #6
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	f063 030e 	orn	r3, r3, #14
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	4907      	ldr	r1, [pc, #28]	@ (8004c00 <I2C_MasterRequestRead+0x198>)
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 f930 	bl	8004e48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e000      	b.n	8004bf4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	00010008 	.word	0x00010008
 8004c00:	00010002 	.word	0x00010002

08004c04 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c14:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c1c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c1e:	4b4b      	ldr	r3, [pc, #300]	@ (8004d4c <I2C_DMAAbort+0x148>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	08db      	lsrs	r3, r3, #3
 8004c24:	4a4a      	ldr	r2, [pc, #296]	@ (8004d50 <I2C_DMAAbort+0x14c>)
 8004c26:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2a:	0a1a      	lsrs	r2, r3, #8
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	00da      	lsls	r2, r3, #3
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c42:	f043 0220 	orr.w	r2, r3, #32
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004c4a:	e00a      	b.n	8004c62 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c60:	d0ea      	beq.n	8004c38 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c6e:	2200      	movs	r2, #0
 8004c70:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c7e:	2200      	movs	r2, #0
 8004c80:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c90:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2200      	movs	r2, #0
 8004c96:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d003      	beq.n	8004ca8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0201 	bic.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b60      	cmp	r3, #96	@ 0x60
 8004cd2:	d10e      	bne.n	8004cf2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004cea:	6978      	ldr	r0, [r7, #20]
 8004cec:	f7fe fd1d 	bl	800372a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004cf0:	e027      	b.n	8004d42 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cf2:	7cfb      	ldrb	r3, [r7, #19]
 8004cf4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004cf8:	2b28      	cmp	r3, #40	@ 0x28
 8004cfa:	d117      	bne.n	8004d2c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0201 	orr.w	r2, r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d1a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2228      	movs	r2, #40	@ 0x28
 8004d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004d2a:	e007      	b.n	8004d3c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004d3c:	6978      	ldr	r0, [r7, #20]
 8004d3e:	f7fe fcea 	bl	8003716 <HAL_I2C_ErrorCallback>
}
 8004d42:	bf00      	nop
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	2000000c 	.word	0x2000000c
 8004d50:	14f8b589 	.word	0x14f8b589

08004d54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	603b      	str	r3, [r7, #0]
 8004d60:	4613      	mov	r3, r2
 8004d62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d64:	e048      	b.n	8004df8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d6c:	d044      	beq.n	8004df8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d6e:	f7fc fc85 	bl	800167c <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d302      	bcc.n	8004d84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d139      	bne.n	8004df8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	0c1b      	lsrs	r3, r3, #16
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d10d      	bne.n	8004daa <I2C_WaitOnFlagUntilTimeout+0x56>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	43da      	mvns	r2, r3
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	bf0c      	ite	eq
 8004da0:	2301      	moveq	r3, #1
 8004da2:	2300      	movne	r3, #0
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	461a      	mov	r2, r3
 8004da8:	e00c      	b.n	8004dc4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	43da      	mvns	r2, r3
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	4013      	ands	r3, r2
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	bf0c      	ite	eq
 8004dbc:	2301      	moveq	r3, #1
 8004dbe:	2300      	movne	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	79fb      	ldrb	r3, [r7, #7]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d116      	bne.n	8004df8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de4:	f043 0220 	orr.w	r2, r3, #32
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e023      	b.n	8004e40 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	0c1b      	lsrs	r3, r3, #16
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d10d      	bne.n	8004e1e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	43da      	mvns	r2, r3
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	bf0c      	ite	eq
 8004e14:	2301      	moveq	r3, #1
 8004e16:	2300      	movne	r3, #0
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	e00c      	b.n	8004e38 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	43da      	mvns	r2, r3
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	bf0c      	ite	eq
 8004e30:	2301      	moveq	r3, #1
 8004e32:	2300      	movne	r3, #0
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	461a      	mov	r2, r3
 8004e38:	79fb      	ldrb	r3, [r7, #7]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d093      	beq.n	8004d66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
 8004e54:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e56:	e071      	b.n	8004f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e66:	d123      	bne.n	8004eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e76:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9c:	f043 0204 	orr.w	r2, r3, #4
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e067      	b.n	8004f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004eb6:	d041      	beq.n	8004f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb8:	f7fc fbe0 	bl	800167c <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d302      	bcc.n	8004ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d136      	bne.n	8004f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	0c1b      	lsrs	r3, r3, #16
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d10c      	bne.n	8004ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	43da      	mvns	r2, r3
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	bf14      	ite	ne
 8004eea:	2301      	movne	r3, #1
 8004eec:	2300      	moveq	r3, #0
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	e00b      	b.n	8004f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	43da      	mvns	r2, r3
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	4013      	ands	r3, r2
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	bf14      	ite	ne
 8004f04:	2301      	movne	r3, #1
 8004f06:	2300      	moveq	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d016      	beq.n	8004f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f28:	f043 0220 	orr.w	r2, r3, #32
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e021      	b.n	8004f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	0c1b      	lsrs	r3, r3, #16
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d10c      	bne.n	8004f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	43da      	mvns	r2, r3
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	4013      	ands	r3, r2
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	bf14      	ite	ne
 8004f58:	2301      	movne	r3, #1
 8004f5a:	2300      	moveq	r3, #0
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	e00b      	b.n	8004f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	43da      	mvns	r2, r3
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	bf14      	ite	ne
 8004f72:	2301      	movne	r3, #1
 8004f74:	2300      	moveq	r3, #0
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f47f af6d 	bne.w	8004e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f94:	e034      	b.n	8005000 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f000 f915 	bl	80051c6 <I2C_IsAcknowledgeFailed>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e034      	b.n	8005010 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fac:	d028      	beq.n	8005000 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fae:	f7fc fb65 	bl	800167c <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d302      	bcc.n	8004fc4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d11d      	bne.n	8005000 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fce:	2b80      	cmp	r3, #128	@ 0x80
 8004fd0:	d016      	beq.n	8005000 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fec:	f043 0220 	orr.w	r2, r3, #32
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e007      	b.n	8005010 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800500a:	2b80      	cmp	r3, #128	@ 0x80
 800500c:	d1c3      	bne.n	8004f96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005024:	e034      	b.n	8005090 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 f8cd 	bl	80051c6 <I2C_IsAcknowledgeFailed>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e034      	b.n	80050a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800503c:	d028      	beq.n	8005090 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800503e:	f7fc fb1d 	bl	800167c <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	429a      	cmp	r2, r3
 800504c:	d302      	bcc.n	8005054 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d11d      	bne.n	8005090 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	2b04      	cmp	r3, #4
 8005060:	d016      	beq.n	8005090 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2220      	movs	r2, #32
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507c:	f043 0220 	orr.w	r2, r3, #32
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e007      	b.n	80050a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	2b04      	cmp	r3, #4
 800509c:	d1c3      	bne.n	8005026 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80050b4:	4b13      	ldr	r3, [pc, #76]	@ (8005104 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	08db      	lsrs	r3, r3, #3
 80050ba:	4a13      	ldr	r2, [pc, #76]	@ (8005108 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80050bc:	fba2 2303 	umull	r2, r3, r2, r3
 80050c0:	0a1a      	lsrs	r2, r3, #8
 80050c2:	4613      	mov	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	3b01      	subs	r3, #1
 80050ce:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d107      	bne.n	80050e6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050da:	f043 0220 	orr.w	r2, r3, #32
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e008      	b.n	80050f8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050f4:	d0e9      	beq.n	80050ca <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	2000000c 	.word	0x2000000c
 8005108:	14f8b589 	.word	0x14f8b589

0800510c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005118:	e049      	b.n	80051ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	f003 0310 	and.w	r3, r3, #16
 8005124:	2b10      	cmp	r3, #16
 8005126:	d119      	bne.n	800515c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f06f 0210 	mvn.w	r2, #16
 8005130:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e030      	b.n	80051be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800515c:	f7fc fa8e 	bl	800167c <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	429a      	cmp	r2, r3
 800516a:	d302      	bcc.n	8005172 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d11d      	bne.n	80051ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517c:	2b40      	cmp	r3, #64	@ 0x40
 800517e:	d016      	beq.n	80051ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2220      	movs	r2, #32
 800518a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519a:	f043 0220 	orr.w	r2, r3, #32
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e007      	b.n	80051be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b8:	2b40      	cmp	r3, #64	@ 0x40
 80051ba:	d1ae      	bne.n	800511a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051dc:	d11b      	bne.n	8005216 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80051e6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2220      	movs	r2, #32
 80051f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005202:	f043 0204 	orr.w	r2, r3, #4
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e000      	b.n	8005218 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005230:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005234:	d103      	bne.n	800523e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800523c:	e007      	b.n	800524e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005242:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005246:	d102      	bne.n	800524e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2208      	movs	r2, #8
 800524c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800524e:	bf00      	nop
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
	...

0800525c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e267      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d075      	beq.n	8005366 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800527a:	4b88      	ldr	r3, [pc, #544]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f003 030c 	and.w	r3, r3, #12
 8005282:	2b04      	cmp	r3, #4
 8005284:	d00c      	beq.n	80052a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005286:	4b85      	ldr	r3, [pc, #532]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800528e:	2b08      	cmp	r3, #8
 8005290:	d112      	bne.n	80052b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005292:	4b82      	ldr	r3, [pc, #520]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800529a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800529e:	d10b      	bne.n	80052b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052a0:	4b7e      	ldr	r3, [pc, #504]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d05b      	beq.n	8005364 <HAL_RCC_OscConfig+0x108>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d157      	bne.n	8005364 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e242      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052c0:	d106      	bne.n	80052d0 <HAL_RCC_OscConfig+0x74>
 80052c2:	4b76      	ldr	r3, [pc, #472]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a75      	ldr	r2, [pc, #468]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 80052c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	e01d      	b.n	800530c <HAL_RCC_OscConfig+0xb0>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052d8:	d10c      	bne.n	80052f4 <HAL_RCC_OscConfig+0x98>
 80052da:	4b70      	ldr	r3, [pc, #448]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a6f      	ldr	r2, [pc, #444]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 80052e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	4b6d      	ldr	r3, [pc, #436]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a6c      	ldr	r2, [pc, #432]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 80052ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	e00b      	b.n	800530c <HAL_RCC_OscConfig+0xb0>
 80052f4:	4b69      	ldr	r3, [pc, #420]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a68      	ldr	r2, [pc, #416]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 80052fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052fe:	6013      	str	r3, [r2, #0]
 8005300:	4b66      	ldr	r3, [pc, #408]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a65      	ldr	r2, [pc, #404]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 8005306:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800530a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d013      	beq.n	800533c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005314:	f7fc f9b2 	bl	800167c <HAL_GetTick>
 8005318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800531a:	e008      	b.n	800532e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800531c:	f7fc f9ae 	bl	800167c <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b64      	cmp	r3, #100	@ 0x64
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e207      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800532e:	4b5b      	ldr	r3, [pc, #364]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0f0      	beq.n	800531c <HAL_RCC_OscConfig+0xc0>
 800533a:	e014      	b.n	8005366 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800533c:	f7fc f99e 	bl	800167c <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005344:	f7fc f99a 	bl	800167c <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b64      	cmp	r3, #100	@ 0x64
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e1f3      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005356:	4b51      	ldr	r3, [pc, #324]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1f0      	bne.n	8005344 <HAL_RCC_OscConfig+0xe8>
 8005362:	e000      	b.n	8005366 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d063      	beq.n	800543a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005372:	4b4a      	ldr	r3, [pc, #296]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f003 030c 	and.w	r3, r3, #12
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00b      	beq.n	8005396 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800537e:	4b47      	ldr	r3, [pc, #284]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005386:	2b08      	cmp	r3, #8
 8005388:	d11c      	bne.n	80053c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800538a:	4b44      	ldr	r3, [pc, #272]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d116      	bne.n	80053c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005396:	4b41      	ldr	r3, [pc, #260]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d005      	beq.n	80053ae <HAL_RCC_OscConfig+0x152>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d001      	beq.n	80053ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e1c7      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ae:	4b3b      	ldr	r3, [pc, #236]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	4937      	ldr	r1, [pc, #220]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053c2:	e03a      	b.n	800543a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d020      	beq.n	800540e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053cc:	4b34      	ldr	r3, [pc, #208]	@ (80054a0 <HAL_RCC_OscConfig+0x244>)
 80053ce:	2201      	movs	r2, #1
 80053d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d2:	f7fc f953 	bl	800167c <HAL_GetTick>
 80053d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053d8:	e008      	b.n	80053ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053da:	f7fc f94f 	bl	800167c <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d901      	bls.n	80053ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e1a8      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ec:	4b2b      	ldr	r3, [pc, #172]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0302 	and.w	r3, r3, #2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d0f0      	beq.n	80053da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053f8:	4b28      	ldr	r3, [pc, #160]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	4925      	ldr	r1, [pc, #148]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 8005408:	4313      	orrs	r3, r2
 800540a:	600b      	str	r3, [r1, #0]
 800540c:	e015      	b.n	800543a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800540e:	4b24      	ldr	r3, [pc, #144]	@ (80054a0 <HAL_RCC_OscConfig+0x244>)
 8005410:	2200      	movs	r2, #0
 8005412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005414:	f7fc f932 	bl	800167c <HAL_GetTick>
 8005418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800541a:	e008      	b.n	800542e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800541c:	f7fc f92e 	bl	800167c <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e187      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800542e:	4b1b      	ldr	r3, [pc, #108]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1f0      	bne.n	800541c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0308 	and.w	r3, r3, #8
 8005442:	2b00      	cmp	r3, #0
 8005444:	d036      	beq.n	80054b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d016      	beq.n	800547c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800544e:	4b15      	ldr	r3, [pc, #84]	@ (80054a4 <HAL_RCC_OscConfig+0x248>)
 8005450:	2201      	movs	r2, #1
 8005452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005454:	f7fc f912 	bl	800167c <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800545c:	f7fc f90e 	bl	800167c <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e167      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800546e:	4b0b      	ldr	r3, [pc, #44]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 8005470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d0f0      	beq.n	800545c <HAL_RCC_OscConfig+0x200>
 800547a:	e01b      	b.n	80054b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800547c:	4b09      	ldr	r3, [pc, #36]	@ (80054a4 <HAL_RCC_OscConfig+0x248>)
 800547e:	2200      	movs	r2, #0
 8005480:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005482:	f7fc f8fb 	bl	800167c <HAL_GetTick>
 8005486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005488:	e00e      	b.n	80054a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800548a:	f7fc f8f7 	bl	800167c <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d907      	bls.n	80054a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e150      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
 800549c:	40023800 	.word	0x40023800
 80054a0:	42470000 	.word	0x42470000
 80054a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054a8:	4b88      	ldr	r3, [pc, #544]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 80054aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1ea      	bne.n	800548a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 8097 	beq.w	80055f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054c2:	2300      	movs	r3, #0
 80054c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054c6:	4b81      	ldr	r3, [pc, #516]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 80054c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10f      	bne.n	80054f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054d2:	2300      	movs	r3, #0
 80054d4:	60bb      	str	r3, [r7, #8]
 80054d6:	4b7d      	ldr	r3, [pc, #500]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 80054d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054da:	4a7c      	ldr	r2, [pc, #496]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 80054dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80054e2:	4b7a      	ldr	r3, [pc, #488]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 80054e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054ea:	60bb      	str	r3, [r7, #8]
 80054ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054ee:	2301      	movs	r3, #1
 80054f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f2:	4b77      	ldr	r3, [pc, #476]	@ (80056d0 <HAL_RCC_OscConfig+0x474>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d118      	bne.n	8005530 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054fe:	4b74      	ldr	r3, [pc, #464]	@ (80056d0 <HAL_RCC_OscConfig+0x474>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a73      	ldr	r2, [pc, #460]	@ (80056d0 <HAL_RCC_OscConfig+0x474>)
 8005504:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800550a:	f7fc f8b7 	bl	800167c <HAL_GetTick>
 800550e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005510:	e008      	b.n	8005524 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005512:	f7fc f8b3 	bl	800167c <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e10c      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005524:	4b6a      	ldr	r3, [pc, #424]	@ (80056d0 <HAL_RCC_OscConfig+0x474>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0f0      	beq.n	8005512 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d106      	bne.n	8005546 <HAL_RCC_OscConfig+0x2ea>
 8005538:	4b64      	ldr	r3, [pc, #400]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 800553a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800553c:	4a63      	ldr	r2, [pc, #396]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 800553e:	f043 0301 	orr.w	r3, r3, #1
 8005542:	6713      	str	r3, [r2, #112]	@ 0x70
 8005544:	e01c      	b.n	8005580 <HAL_RCC_OscConfig+0x324>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	2b05      	cmp	r3, #5
 800554c:	d10c      	bne.n	8005568 <HAL_RCC_OscConfig+0x30c>
 800554e:	4b5f      	ldr	r3, [pc, #380]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 8005550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005552:	4a5e      	ldr	r2, [pc, #376]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 8005554:	f043 0304 	orr.w	r3, r3, #4
 8005558:	6713      	str	r3, [r2, #112]	@ 0x70
 800555a:	4b5c      	ldr	r3, [pc, #368]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 800555c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800555e:	4a5b      	ldr	r2, [pc, #364]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 8005560:	f043 0301 	orr.w	r3, r3, #1
 8005564:	6713      	str	r3, [r2, #112]	@ 0x70
 8005566:	e00b      	b.n	8005580 <HAL_RCC_OscConfig+0x324>
 8005568:	4b58      	ldr	r3, [pc, #352]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 800556a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800556c:	4a57      	ldr	r2, [pc, #348]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 800556e:	f023 0301 	bic.w	r3, r3, #1
 8005572:	6713      	str	r3, [r2, #112]	@ 0x70
 8005574:	4b55      	ldr	r3, [pc, #340]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 8005576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005578:	4a54      	ldr	r2, [pc, #336]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 800557a:	f023 0304 	bic.w	r3, r3, #4
 800557e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d015      	beq.n	80055b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005588:	f7fc f878 	bl	800167c <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800558e:	e00a      	b.n	80055a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005590:	f7fc f874 	bl	800167c <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800559e:	4293      	cmp	r3, r2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e0cb      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055a6:	4b49      	ldr	r3, [pc, #292]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 80055a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d0ee      	beq.n	8005590 <HAL_RCC_OscConfig+0x334>
 80055b2:	e014      	b.n	80055de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055b4:	f7fc f862 	bl	800167c <HAL_GetTick>
 80055b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ba:	e00a      	b.n	80055d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055bc:	f7fc f85e 	bl	800167c <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e0b5      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055d2:	4b3e      	ldr	r3, [pc, #248]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 80055d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1ee      	bne.n	80055bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055de:	7dfb      	ldrb	r3, [r7, #23]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d105      	bne.n	80055f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055e4:	4b39      	ldr	r3, [pc, #228]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 80055e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e8:	4a38      	ldr	r2, [pc, #224]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 80055ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 80a1 	beq.w	800573c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055fa:	4b34      	ldr	r3, [pc, #208]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 030c 	and.w	r3, r3, #12
 8005602:	2b08      	cmp	r3, #8
 8005604:	d05c      	beq.n	80056c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	2b02      	cmp	r3, #2
 800560c:	d141      	bne.n	8005692 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800560e:	4b31      	ldr	r3, [pc, #196]	@ (80056d4 <HAL_RCC_OscConfig+0x478>)
 8005610:	2200      	movs	r2, #0
 8005612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005614:	f7fc f832 	bl	800167c <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800561a:	e008      	b.n	800562e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800561c:	f7fc f82e 	bl	800167c <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e087      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800562e:	4b27      	ldr	r3, [pc, #156]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1f0      	bne.n	800561c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	69da      	ldr	r2, [r3, #28]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	431a      	orrs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005648:	019b      	lsls	r3, r3, #6
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005650:	085b      	lsrs	r3, r3, #1
 8005652:	3b01      	subs	r3, #1
 8005654:	041b      	lsls	r3, r3, #16
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800565c:	061b      	lsls	r3, r3, #24
 800565e:	491b      	ldr	r1, [pc, #108]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 8005660:	4313      	orrs	r3, r2
 8005662:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005664:	4b1b      	ldr	r3, [pc, #108]	@ (80056d4 <HAL_RCC_OscConfig+0x478>)
 8005666:	2201      	movs	r2, #1
 8005668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800566a:	f7fc f807 	bl	800167c <HAL_GetTick>
 800566e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005672:	f7fc f803 	bl	800167c <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e05c      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005684:	4b11      	ldr	r3, [pc, #68]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0f0      	beq.n	8005672 <HAL_RCC_OscConfig+0x416>
 8005690:	e054      	b.n	800573c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005692:	4b10      	ldr	r3, [pc, #64]	@ (80056d4 <HAL_RCC_OscConfig+0x478>)
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005698:	f7fb fff0 	bl	800167c <HAL_GetTick>
 800569c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800569e:	e008      	b.n	80056b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056a0:	f7fb ffec 	bl	800167c <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e045      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056b2:	4b06      	ldr	r3, [pc, #24]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1f0      	bne.n	80056a0 <HAL_RCC_OscConfig+0x444>
 80056be:	e03d      	b.n	800573c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d107      	bne.n	80056d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e038      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
 80056cc:	40023800 	.word	0x40023800
 80056d0:	40007000 	.word	0x40007000
 80056d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005748 <HAL_RCC_OscConfig+0x4ec>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d028      	beq.n	8005738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d121      	bne.n	8005738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056fe:	429a      	cmp	r2, r3
 8005700:	d11a      	bne.n	8005738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005708:	4013      	ands	r3, r2
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800570e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005710:	4293      	cmp	r3, r2
 8005712:	d111      	bne.n	8005738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800571e:	085b      	lsrs	r3, r3, #1
 8005720:	3b01      	subs	r3, #1
 8005722:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005724:	429a      	cmp	r2, r3
 8005726:	d107      	bne.n	8005738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005732:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005734:	429a      	cmp	r2, r3
 8005736:	d001      	beq.n	800573c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e000      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	40023800 	.word	0x40023800

0800574c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e0cc      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005760:	4b68      	ldr	r3, [pc, #416]	@ (8005904 <HAL_RCC_ClockConfig+0x1b8>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0307 	and.w	r3, r3, #7
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d90c      	bls.n	8005788 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800576e:	4b65      	ldr	r3, [pc, #404]	@ (8005904 <HAL_RCC_ClockConfig+0x1b8>)
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	b2d2      	uxtb	r2, r2
 8005774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005776:	4b63      	ldr	r3, [pc, #396]	@ (8005904 <HAL_RCC_ClockConfig+0x1b8>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	429a      	cmp	r2, r3
 8005782:	d001      	beq.n	8005788 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e0b8      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0302 	and.w	r3, r3, #2
 8005790:	2b00      	cmp	r3, #0
 8005792:	d020      	beq.n	80057d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	d005      	beq.n	80057ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057a0:	4b59      	ldr	r3, [pc, #356]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	4a58      	ldr	r2, [pc, #352]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80057aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0308 	and.w	r3, r3, #8
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d005      	beq.n	80057c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057b8:	4b53      	ldr	r3, [pc, #332]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	4a52      	ldr	r2, [pc, #328]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80057c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057c4:	4b50      	ldr	r3, [pc, #320]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	494d      	ldr	r1, [pc, #308]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d044      	beq.n	800586c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d107      	bne.n	80057fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ea:	4b47      	ldr	r3, [pc, #284]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d119      	bne.n	800582a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e07f      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d003      	beq.n	800580a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005806:	2b03      	cmp	r3, #3
 8005808:	d107      	bne.n	800581a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800580a:	4b3f      	ldr	r3, [pc, #252]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d109      	bne.n	800582a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e06f      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800581a:	4b3b      	ldr	r3, [pc, #236]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e067      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800582a:	4b37      	ldr	r3, [pc, #220]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f023 0203 	bic.w	r2, r3, #3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	4934      	ldr	r1, [pc, #208]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 8005838:	4313      	orrs	r3, r2
 800583a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800583c:	f7fb ff1e 	bl	800167c <HAL_GetTick>
 8005840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005842:	e00a      	b.n	800585a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005844:	f7fb ff1a 	bl	800167c <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005852:	4293      	cmp	r3, r2
 8005854:	d901      	bls.n	800585a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e04f      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800585a:	4b2b      	ldr	r3, [pc, #172]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f003 020c 	and.w	r2, r3, #12
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	429a      	cmp	r2, r3
 800586a:	d1eb      	bne.n	8005844 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800586c:	4b25      	ldr	r3, [pc, #148]	@ (8005904 <HAL_RCC_ClockConfig+0x1b8>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d20c      	bcs.n	8005894 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587a:	4b22      	ldr	r3, [pc, #136]	@ (8005904 <HAL_RCC_ClockConfig+0x1b8>)
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005882:	4b20      	ldr	r3, [pc, #128]	@ (8005904 <HAL_RCC_ClockConfig+0x1b8>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0307 	and.w	r3, r3, #7
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	429a      	cmp	r2, r3
 800588e:	d001      	beq.n	8005894 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e032      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b00      	cmp	r3, #0
 800589e:	d008      	beq.n	80058b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058a0:	4b19      	ldr	r3, [pc, #100]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	4916      	ldr	r1, [pc, #88]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0308 	and.w	r3, r3, #8
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d009      	beq.n	80058d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058be:	4b12      	ldr	r3, [pc, #72]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	490e      	ldr	r1, [pc, #56]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058d2:	f000 f821 	bl	8005918 <HAL_RCC_GetSysClockFreq>
 80058d6:	4602      	mov	r2, r0
 80058d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	091b      	lsrs	r3, r3, #4
 80058de:	f003 030f 	and.w	r3, r3, #15
 80058e2:	490a      	ldr	r1, [pc, #40]	@ (800590c <HAL_RCC_ClockConfig+0x1c0>)
 80058e4:	5ccb      	ldrb	r3, [r1, r3]
 80058e6:	fa22 f303 	lsr.w	r3, r2, r3
 80058ea:	4a09      	ldr	r2, [pc, #36]	@ (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80058ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058ee:	4b09      	ldr	r3, [pc, #36]	@ (8005914 <HAL_RCC_ClockConfig+0x1c8>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7fb fe7e 	bl	80015f4 <HAL_InitTick>

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	40023c00 	.word	0x40023c00
 8005908:	40023800 	.word	0x40023800
 800590c:	08008598 	.word	0x08008598
 8005910:	2000000c 	.word	0x2000000c
 8005914:	20000010 	.word	0x20000010

08005918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800591c:	b094      	sub	sp, #80	@ 0x50
 800591e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	647b      	str	r3, [r7, #68]	@ 0x44
 8005924:	2300      	movs	r3, #0
 8005926:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005928:	2300      	movs	r3, #0
 800592a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800592c:	2300      	movs	r3, #0
 800592e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005930:	4b79      	ldr	r3, [pc, #484]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f003 030c 	and.w	r3, r3, #12
 8005938:	2b08      	cmp	r3, #8
 800593a:	d00d      	beq.n	8005958 <HAL_RCC_GetSysClockFreq+0x40>
 800593c:	2b08      	cmp	r3, #8
 800593e:	f200 80e1 	bhi.w	8005b04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005942:	2b00      	cmp	r3, #0
 8005944:	d002      	beq.n	800594c <HAL_RCC_GetSysClockFreq+0x34>
 8005946:	2b04      	cmp	r3, #4
 8005948:	d003      	beq.n	8005952 <HAL_RCC_GetSysClockFreq+0x3a>
 800594a:	e0db      	b.n	8005b04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800594c:	4b73      	ldr	r3, [pc, #460]	@ (8005b1c <HAL_RCC_GetSysClockFreq+0x204>)
 800594e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005950:	e0db      	b.n	8005b0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005952:	4b73      	ldr	r3, [pc, #460]	@ (8005b20 <HAL_RCC_GetSysClockFreq+0x208>)
 8005954:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005956:	e0d8      	b.n	8005b0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005958:	4b6f      	ldr	r3, [pc, #444]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x200>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005960:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005962:	4b6d      	ldr	r3, [pc, #436]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d063      	beq.n	8005a36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800596e:	4b6a      	ldr	r3, [pc, #424]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	099b      	lsrs	r3, r3, #6
 8005974:	2200      	movs	r2, #0
 8005976:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005978:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800597a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800597c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005980:	633b      	str	r3, [r7, #48]	@ 0x30
 8005982:	2300      	movs	r3, #0
 8005984:	637b      	str	r3, [r7, #52]	@ 0x34
 8005986:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800598a:	4622      	mov	r2, r4
 800598c:	462b      	mov	r3, r5
 800598e:	f04f 0000 	mov.w	r0, #0
 8005992:	f04f 0100 	mov.w	r1, #0
 8005996:	0159      	lsls	r1, r3, #5
 8005998:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800599c:	0150      	lsls	r0, r2, #5
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	4621      	mov	r1, r4
 80059a4:	1a51      	subs	r1, r2, r1
 80059a6:	6139      	str	r1, [r7, #16]
 80059a8:	4629      	mov	r1, r5
 80059aa:	eb63 0301 	sbc.w	r3, r3, r1
 80059ae:	617b      	str	r3, [r7, #20]
 80059b0:	f04f 0200 	mov.w	r2, #0
 80059b4:	f04f 0300 	mov.w	r3, #0
 80059b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059bc:	4659      	mov	r1, fp
 80059be:	018b      	lsls	r3, r1, #6
 80059c0:	4651      	mov	r1, sl
 80059c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059c6:	4651      	mov	r1, sl
 80059c8:	018a      	lsls	r2, r1, #6
 80059ca:	4651      	mov	r1, sl
 80059cc:	ebb2 0801 	subs.w	r8, r2, r1
 80059d0:	4659      	mov	r1, fp
 80059d2:	eb63 0901 	sbc.w	r9, r3, r1
 80059d6:	f04f 0200 	mov.w	r2, #0
 80059da:	f04f 0300 	mov.w	r3, #0
 80059de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059ea:	4690      	mov	r8, r2
 80059ec:	4699      	mov	r9, r3
 80059ee:	4623      	mov	r3, r4
 80059f0:	eb18 0303 	adds.w	r3, r8, r3
 80059f4:	60bb      	str	r3, [r7, #8]
 80059f6:	462b      	mov	r3, r5
 80059f8:	eb49 0303 	adc.w	r3, r9, r3
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	f04f 0200 	mov.w	r2, #0
 8005a02:	f04f 0300 	mov.w	r3, #0
 8005a06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a0a:	4629      	mov	r1, r5
 8005a0c:	024b      	lsls	r3, r1, #9
 8005a0e:	4621      	mov	r1, r4
 8005a10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a14:	4621      	mov	r1, r4
 8005a16:	024a      	lsls	r2, r1, #9
 8005a18:	4610      	mov	r0, r2
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a1e:	2200      	movs	r2, #0
 8005a20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005a28:	f7fa fbd2 	bl	80001d0 <__aeabi_uldivmod>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	4613      	mov	r3, r2
 8005a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a34:	e058      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a36:	4b38      	ldr	r3, [pc, #224]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	099b      	lsrs	r3, r3, #6
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	4618      	mov	r0, r3
 8005a40:	4611      	mov	r1, r2
 8005a42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a46:	623b      	str	r3, [r7, #32]
 8005a48:	2300      	movs	r3, #0
 8005a4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a50:	4642      	mov	r2, r8
 8005a52:	464b      	mov	r3, r9
 8005a54:	f04f 0000 	mov.w	r0, #0
 8005a58:	f04f 0100 	mov.w	r1, #0
 8005a5c:	0159      	lsls	r1, r3, #5
 8005a5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a62:	0150      	lsls	r0, r2, #5
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	4641      	mov	r1, r8
 8005a6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a6e:	4649      	mov	r1, r9
 8005a70:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a74:	f04f 0200 	mov.w	r2, #0
 8005a78:	f04f 0300 	mov.w	r3, #0
 8005a7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a88:	ebb2 040a 	subs.w	r4, r2, sl
 8005a8c:	eb63 050b 	sbc.w	r5, r3, fp
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	f04f 0300 	mov.w	r3, #0
 8005a98:	00eb      	lsls	r3, r5, #3
 8005a9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a9e:	00e2      	lsls	r2, r4, #3
 8005aa0:	4614      	mov	r4, r2
 8005aa2:	461d      	mov	r5, r3
 8005aa4:	4643      	mov	r3, r8
 8005aa6:	18e3      	adds	r3, r4, r3
 8005aa8:	603b      	str	r3, [r7, #0]
 8005aaa:	464b      	mov	r3, r9
 8005aac:	eb45 0303 	adc.w	r3, r5, r3
 8005ab0:	607b      	str	r3, [r7, #4]
 8005ab2:	f04f 0200 	mov.w	r2, #0
 8005ab6:	f04f 0300 	mov.w	r3, #0
 8005aba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005abe:	4629      	mov	r1, r5
 8005ac0:	028b      	lsls	r3, r1, #10
 8005ac2:	4621      	mov	r1, r4
 8005ac4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ac8:	4621      	mov	r1, r4
 8005aca:	028a      	lsls	r2, r1, #10
 8005acc:	4610      	mov	r0, r2
 8005ace:	4619      	mov	r1, r3
 8005ad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	61bb      	str	r3, [r7, #24]
 8005ad6:	61fa      	str	r2, [r7, #28]
 8005ad8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005adc:	f7fa fb78 	bl	80001d0 <__aeabi_uldivmod>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	0c1b      	lsrs	r3, r3, #16
 8005aee:	f003 0303 	and.w	r3, r3, #3
 8005af2:	3301      	adds	r3, #1
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005af8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005afa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b02:	e002      	b.n	8005b0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b04:	4b05      	ldr	r3, [pc, #20]	@ (8005b1c <HAL_RCC_GetSysClockFreq+0x204>)
 8005b06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3750      	adds	r7, #80	@ 0x50
 8005b10:	46bd      	mov	sp, r7
 8005b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b16:	bf00      	nop
 8005b18:	40023800 	.word	0x40023800
 8005b1c:	00f42400 	.word	0x00f42400
 8005b20:	007a1200 	.word	0x007a1200

08005b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b28:	4b03      	ldr	r3, [pc, #12]	@ (8005b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	2000000c 	.word	0x2000000c

08005b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b40:	f7ff fff0 	bl	8005b24 <HAL_RCC_GetHCLKFreq>
 8005b44:	4602      	mov	r2, r0
 8005b46:	4b05      	ldr	r3, [pc, #20]	@ (8005b5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	0a9b      	lsrs	r3, r3, #10
 8005b4c:	f003 0307 	and.w	r3, r3, #7
 8005b50:	4903      	ldr	r1, [pc, #12]	@ (8005b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b52:	5ccb      	ldrb	r3, [r1, r3]
 8005b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	40023800 	.word	0x40023800
 8005b60:	080085a8 	.word	0x080085a8

08005b64 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b76:	2b84      	cmp	r3, #132	@ 0x84
 8005b78:	d005      	beq.n	8005b86 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005b7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	4413      	add	r3, r2
 8005b82:	3303      	adds	r3, #3
 8005b84:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005b86:	68fb      	ldr	r3, [r7, #12]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3714      	adds	r7, #20
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b9a:	f3ef 8305 	mrs	r3, IPSR
 8005b9e:	607b      	str	r3, [r7, #4]
  return(result);
 8005ba0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	bf14      	ite	ne
 8005ba6:	2301      	movne	r3, #1
 8005ba8:	2300      	moveq	r3, #0
 8005baa:	b2db      	uxtb	r3, r3
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005bbc:	f001 f984 	bl	8006ec8 <vTaskStartScheduler>
  
  return osOK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005bc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bc8:	b089      	sub	sp, #36	@ 0x24
 8005bca:	af04      	add	r7, sp, #16
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d020      	beq.n	8005c1a <osThreadCreate+0x54>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d01c      	beq.n	8005c1a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685c      	ldr	r4, [r3, #4]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	691e      	ldr	r6, [r3, #16]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7ff ffb6 	bl	8005b64 <makeFreeRtosPriority>
 8005bf8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c02:	9202      	str	r2, [sp, #8]
 8005c04:	9301      	str	r3, [sp, #4]
 8005c06:	9100      	str	r1, [sp, #0]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	4632      	mov	r2, r6
 8005c0c:	4629      	mov	r1, r5
 8005c0e:	4620      	mov	r0, r4
 8005c10:	f000 ff8c 	bl	8006b2c <xTaskCreateStatic>
 8005c14:	4603      	mov	r3, r0
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	e01c      	b.n	8005c54 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685c      	ldr	r4, [r3, #4]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c26:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7ff ff98 	bl	8005b64 <makeFreeRtosPriority>
 8005c34:	4602      	mov	r2, r0
 8005c36:	f107 030c 	add.w	r3, r7, #12
 8005c3a:	9301      	str	r3, [sp, #4]
 8005c3c:	9200      	str	r2, [sp, #0]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	4632      	mov	r2, r6
 8005c42:	4629      	mov	r1, r5
 8005c44:	4620      	mov	r0, r4
 8005c46:	f000 ffd1 	bl	8006bec <xTaskCreate>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d001      	beq.n	8005c54 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005c50:	2300      	movs	r3, #0
 8005c52:	e000      	b.n	8005c56 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005c54:	68fb      	ldr	r3, [r7, #12]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c5e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b084      	sub	sp, #16
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <osDelay+0x16>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	e000      	b.n	8005c76 <osDelay+0x18>
 8005c74:	2301      	movs	r3, #1
 8005c76:	4618      	mov	r0, r3
 8005c78:	f001 f8f0 	bl	8006e5c <vTaskDelay>
  
  return osOK;
 8005c7c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b082      	sub	sp, #8
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d007      	beq.n	8005ca6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	2001      	movs	r0, #1
 8005c9e:	f000 fade 	bl	800625e <xQueueCreateMutexStatic>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	e003      	b.n	8005cae <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005ca6:	2001      	movs	r0, #1
 8005ca8:	f000 fac1 	bl	800622e <xQueueCreateMutex>
 8005cac:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
	...

08005cb8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <osMutexWait+0x18>
    return osErrorParameter;
 8005ccc:	2380      	movs	r3, #128	@ 0x80
 8005cce:	e03a      	b.n	8005d46 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cda:	d103      	bne.n	8005ce4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005cdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ce0:	60fb      	str	r3, [r7, #12]
 8005ce2:	e009      	b.n	8005cf8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d006      	beq.n	8005cf8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d101      	bne.n	8005cf8 <osMutexWait+0x40>
      ticks = 1;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005cf8:	f7ff ff4c 	bl	8005b94 <inHandlerMode>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d017      	beq.n	8005d32 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005d02:	f107 0308 	add.w	r3, r7, #8
 8005d06:	461a      	mov	r2, r3
 8005d08:	2100      	movs	r1, #0
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 fd64 	bl	80067d8 <xQueueReceiveFromISR>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d001      	beq.n	8005d1a <osMutexWait+0x62>
      return osErrorOS;
 8005d16:	23ff      	movs	r3, #255	@ 0xff
 8005d18:	e015      	b.n	8005d46 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d011      	beq.n	8005d44 <osMutexWait+0x8c>
 8005d20:	4b0b      	ldr	r3, [pc, #44]	@ (8005d50 <osMutexWait+0x98>)
 8005d22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d26:	601a      	str	r2, [r3, #0]
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	f3bf 8f6f 	isb	sy
 8005d30:	e008      	b.n	8005d44 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005d32:	68f9      	ldr	r1, [r7, #12]
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 fc3f 	bl	80065b8 <xQueueSemaphoreTake>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d001      	beq.n	8005d44 <osMutexWait+0x8c>
    return osErrorOS;
 8005d40:	23ff      	movs	r3, #255	@ 0xff
 8005d42:	e000      	b.n	8005d46 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	e000ed04 	.word	0xe000ed04

08005d54 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005d60:	2300      	movs	r3, #0
 8005d62:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005d64:	f7ff ff16 	bl	8005b94 <inHandlerMode>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d016      	beq.n	8005d9c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005d6e:	f107 0308 	add.w	r3, r7, #8
 8005d72:	4619      	mov	r1, r3
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 fb8f 	bl	8006498 <xQueueGiveFromISR>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d001      	beq.n	8005d84 <osMutexRelease+0x30>
      return osErrorOS;
 8005d80:	23ff      	movs	r3, #255	@ 0xff
 8005d82:	e017      	b.n	8005db4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d013      	beq.n	8005db2 <osMutexRelease+0x5e>
 8005d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8005dbc <osMutexRelease+0x68>)
 8005d8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d90:	601a      	str	r2, [r3, #0]
 8005d92:	f3bf 8f4f 	dsb	sy
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	e00a      	b.n	8005db2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	2200      	movs	r2, #0
 8005da0:	2100      	movs	r1, #0
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 fa76 	bl	8006294 <xQueueGenericSend>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d001      	beq.n	8005db2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005dae:	23ff      	movs	r3, #255	@ 0xff
 8005db0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005db2:	68fb      	ldr	r3, [r7, #12]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	e000ed04 	.word	0xe000ed04

08005dc0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005dc0:	b590      	push	{r4, r7, lr}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af02      	add	r7, sp, #8
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d011      	beq.n	8005df6 <osMessageCreate+0x36>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00d      	beq.n	8005df6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6818      	ldr	r0, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6859      	ldr	r1, [r3, #4]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	689a      	ldr	r2, [r3, #8]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	2400      	movs	r4, #0
 8005dec:	9400      	str	r4, [sp, #0]
 8005dee:	f000 f92d 	bl	800604c <xQueueGenericCreateStatic>
 8005df2:	4603      	mov	r3, r0
 8005df4:	e008      	b.n	8005e08 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6818      	ldr	r0, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	4619      	mov	r1, r3
 8005e02:	f000 f9a0 	bl	8006146 <xQueueGenericCreate>
 8005e06:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd90      	pop	{r4, r7, pc}

08005e10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f103 0208 	add.w	r2, r3, #8
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f103 0208 	add.w	r2, r3, #8
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f103 0208 	add.w	r2, r3, #8
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e5e:	bf00      	nop
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b085      	sub	sp, #20
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	689a      	ldr	r2, [r3, #8]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	1c5a      	adds	r2, r3, #1
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	601a      	str	r2, [r3, #0]
}
 8005ea6:	bf00      	nop
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b085      	sub	sp, #20
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
 8005eba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ec8:	d103      	bne.n	8005ed2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	60fb      	str	r3, [r7, #12]
 8005ed0:	e00c      	b.n	8005eec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	3308      	adds	r3, #8
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	e002      	b.n	8005ee0 <vListInsert+0x2e>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	60fb      	str	r3, [r7, #12]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d2f6      	bcs.n	8005eda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	683a      	ldr	r2, [r7, #0]
 8005f06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	601a      	str	r2, [r3, #0]
}
 8005f18:	bf00      	nop
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	6892      	ldr	r2, [r2, #8]
 8005f3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	6852      	ldr	r2, [r2, #4]
 8005f44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d103      	bne.n	8005f58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	1e5a      	subs	r2, r3, #1
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10b      	bne.n	8005fa4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005f9e:	bf00      	nop
 8005fa0:	bf00      	nop
 8005fa2:	e7fd      	b.n	8005fa0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005fa4:	f001 fef0 	bl	8007d88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fb0:	68f9      	ldr	r1, [r7, #12]
 8005fb2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005fb4:	fb01 f303 	mul.w	r3, r1, r3
 8005fb8:	441a      	add	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	68f9      	ldr	r1, [r7, #12]
 8005fd8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005fda:	fb01 f303 	mul.w	r3, r1, r3
 8005fde:	441a      	add	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	22ff      	movs	r2, #255	@ 0xff
 8005fe8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	22ff      	movs	r2, #255	@ 0xff
 8005ff0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d114      	bne.n	8006024 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d01a      	beq.n	8006038 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	3310      	adds	r3, #16
 8006006:	4618      	mov	r0, r3
 8006008:	f001 f9a8 	bl	800735c <xTaskRemoveFromEventList>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d012      	beq.n	8006038 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006012:	4b0d      	ldr	r3, [pc, #52]	@ (8006048 <xQueueGenericReset+0xd0>)
 8006014:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	e009      	b.n	8006038 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	3310      	adds	r3, #16
 8006028:	4618      	mov	r0, r3
 800602a:	f7ff fef1 	bl	8005e10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	3324      	adds	r3, #36	@ 0x24
 8006032:	4618      	mov	r0, r3
 8006034:	f7ff feec 	bl	8005e10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006038:	f001 fed8 	bl	8007dec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800603c:	2301      	movs	r3, #1
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	e000ed04 	.word	0xe000ed04

0800604c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800604c:	b580      	push	{r7, lr}
 800604e:	b08e      	sub	sp, #56	@ 0x38
 8006050:	af02      	add	r7, sp, #8
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
 8006058:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10b      	bne.n	8006078 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006072:	bf00      	nop
 8006074:	bf00      	nop
 8006076:	e7fd      	b.n	8006074 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d10b      	bne.n	8006096 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800607e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006082:	f383 8811 	msr	BASEPRI, r3
 8006086:	f3bf 8f6f 	isb	sy
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006090:	bf00      	nop
 8006092:	bf00      	nop
 8006094:	e7fd      	b.n	8006092 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d002      	beq.n	80060a2 <xQueueGenericCreateStatic+0x56>
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <xQueueGenericCreateStatic+0x5a>
 80060a2:	2301      	movs	r3, #1
 80060a4:	e000      	b.n	80060a8 <xQueueGenericCreateStatic+0x5c>
 80060a6:	2300      	movs	r3, #0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10b      	bne.n	80060c4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80060ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	623b      	str	r3, [r7, #32]
}
 80060be:	bf00      	nop
 80060c0:	bf00      	nop
 80060c2:	e7fd      	b.n	80060c0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d102      	bne.n	80060d0 <xQueueGenericCreateStatic+0x84>
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d101      	bne.n	80060d4 <xQueueGenericCreateStatic+0x88>
 80060d0:	2301      	movs	r3, #1
 80060d2:	e000      	b.n	80060d6 <xQueueGenericCreateStatic+0x8a>
 80060d4:	2300      	movs	r3, #0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10b      	bne.n	80060f2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80060da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060de:	f383 8811 	msr	BASEPRI, r3
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	61fb      	str	r3, [r7, #28]
}
 80060ec:	bf00      	nop
 80060ee:	bf00      	nop
 80060f0:	e7fd      	b.n	80060ee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80060f2:	2348      	movs	r3, #72	@ 0x48
 80060f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2b48      	cmp	r3, #72	@ 0x48
 80060fa:	d00b      	beq.n	8006114 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80060fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	61bb      	str	r3, [r7, #24]
}
 800610e:	bf00      	nop
 8006110:	bf00      	nop
 8006112:	e7fd      	b.n	8006110 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006114:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800611a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00d      	beq.n	800613c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006128:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800612c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	4613      	mov	r3, r2
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	68b9      	ldr	r1, [r7, #8]
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f000 f840 	bl	80061bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800613c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800613e:	4618      	mov	r0, r3
 8006140:	3730      	adds	r7, #48	@ 0x30
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006146:	b580      	push	{r7, lr}
 8006148:	b08a      	sub	sp, #40	@ 0x28
 800614a:	af02      	add	r7, sp, #8
 800614c:	60f8      	str	r0, [r7, #12]
 800614e:	60b9      	str	r1, [r7, #8]
 8006150:	4613      	mov	r3, r2
 8006152:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10b      	bne.n	8006172 <xQueueGenericCreate+0x2c>
	__asm volatile
 800615a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800615e:	f383 8811 	msr	BASEPRI, r3
 8006162:	f3bf 8f6f 	isb	sy
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	613b      	str	r3, [r7, #16]
}
 800616c:	bf00      	nop
 800616e:	bf00      	nop
 8006170:	e7fd      	b.n	800616e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	fb02 f303 	mul.w	r3, r2, r3
 800617a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	3348      	adds	r3, #72	@ 0x48
 8006180:	4618      	mov	r0, r3
 8006182:	f001 ff23 	bl	8007fcc <pvPortMalloc>
 8006186:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d011      	beq.n	80061b2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	3348      	adds	r3, #72	@ 0x48
 8006196:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061a0:	79fa      	ldrb	r2, [r7, #7]
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	4613      	mov	r3, r2
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	68b9      	ldr	r1, [r7, #8]
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f000 f805 	bl	80061bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80061b2:	69bb      	ldr	r3, [r7, #24]
	}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3720      	adds	r7, #32
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
 80061c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d103      	bne.n	80061d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	e002      	b.n	80061de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80061ea:	2101      	movs	r1, #1
 80061ec:	69b8      	ldr	r0, [r7, #24]
 80061ee:	f7ff fec3 	bl	8005f78 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80061f2:	bf00      	nop
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b082      	sub	sp, #8
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00e      	beq.n	8006226 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800621a:	2300      	movs	r3, #0
 800621c:	2200      	movs	r2, #0
 800621e:	2100      	movs	r1, #0
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f837 	bl	8006294 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006226:	bf00      	nop
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800622e:	b580      	push	{r7, lr}
 8006230:	b086      	sub	sp, #24
 8006232:	af00      	add	r7, sp, #0
 8006234:	4603      	mov	r3, r0
 8006236:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006238:	2301      	movs	r3, #1
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	2300      	movs	r3, #0
 800623e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006240:	79fb      	ldrb	r3, [r7, #7]
 8006242:	461a      	mov	r2, r3
 8006244:	6939      	ldr	r1, [r7, #16]
 8006246:	6978      	ldr	r0, [r7, #20]
 8006248:	f7ff ff7d 	bl	8006146 <xQueueGenericCreate>
 800624c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f7ff ffd3 	bl	80061fa <prvInitialiseMutex>

		return xNewQueue;
 8006254:	68fb      	ldr	r3, [r7, #12]
	}
 8006256:	4618      	mov	r0, r3
 8006258:	3718      	adds	r7, #24
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800625e:	b580      	push	{r7, lr}
 8006260:	b088      	sub	sp, #32
 8006262:	af02      	add	r7, sp, #8
 8006264:	4603      	mov	r3, r0
 8006266:	6039      	str	r1, [r7, #0]
 8006268:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800626a:	2301      	movs	r3, #1
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	2300      	movs	r3, #0
 8006270:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006272:	79fb      	ldrb	r3, [r7, #7]
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	2200      	movs	r2, #0
 800627a:	6939      	ldr	r1, [r7, #16]
 800627c:	6978      	ldr	r0, [r7, #20]
 800627e:	f7ff fee5 	bl	800604c <xQueueGenericCreateStatic>
 8006282:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f7ff ffb8 	bl	80061fa <prvInitialiseMutex>

		return xNewQueue;
 800628a:	68fb      	ldr	r3, [r7, #12]
	}
 800628c:	4618      	mov	r0, r3
 800628e:	3718      	adds	r7, #24
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b08e      	sub	sp, #56	@ 0x38
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80062a2:	2300      	movs	r3, #0
 80062a4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80062aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10b      	bne.n	80062c8 <xQueueGenericSend+0x34>
	__asm volatile
 80062b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b4:	f383 8811 	msr	BASEPRI, r3
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80062c2:	bf00      	nop
 80062c4:	bf00      	nop
 80062c6:	e7fd      	b.n	80062c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d103      	bne.n	80062d6 <xQueueGenericSend+0x42>
 80062ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <xQueueGenericSend+0x46>
 80062d6:	2301      	movs	r3, #1
 80062d8:	e000      	b.n	80062dc <xQueueGenericSend+0x48>
 80062da:	2300      	movs	r3, #0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10b      	bne.n	80062f8 <xQueueGenericSend+0x64>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80062f2:	bf00      	nop
 80062f4:	bf00      	nop
 80062f6:	e7fd      	b.n	80062f4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d103      	bne.n	8006306 <xQueueGenericSend+0x72>
 80062fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006302:	2b01      	cmp	r3, #1
 8006304:	d101      	bne.n	800630a <xQueueGenericSend+0x76>
 8006306:	2301      	movs	r3, #1
 8006308:	e000      	b.n	800630c <xQueueGenericSend+0x78>
 800630a:	2300      	movs	r3, #0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10b      	bne.n	8006328 <xQueueGenericSend+0x94>
	__asm volatile
 8006310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	623b      	str	r3, [r7, #32]
}
 8006322:	bf00      	nop
 8006324:	bf00      	nop
 8006326:	e7fd      	b.n	8006324 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006328:	f001 f9d8 	bl	80076dc <xTaskGetSchedulerState>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d102      	bne.n	8006338 <xQueueGenericSend+0xa4>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d101      	bne.n	800633c <xQueueGenericSend+0xa8>
 8006338:	2301      	movs	r3, #1
 800633a:	e000      	b.n	800633e <xQueueGenericSend+0xaa>
 800633c:	2300      	movs	r3, #0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10b      	bne.n	800635a <xQueueGenericSend+0xc6>
	__asm volatile
 8006342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	61fb      	str	r3, [r7, #28]
}
 8006354:	bf00      	nop
 8006356:	bf00      	nop
 8006358:	e7fd      	b.n	8006356 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800635a:	f001 fd15 	bl	8007d88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800635e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006360:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006366:	429a      	cmp	r2, r3
 8006368:	d302      	bcc.n	8006370 <xQueueGenericSend+0xdc>
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2b02      	cmp	r3, #2
 800636e:	d129      	bne.n	80063c4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006370:	683a      	ldr	r2, [r7, #0]
 8006372:	68b9      	ldr	r1, [r7, #8]
 8006374:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006376:	f000 fac9 	bl	800690c <prvCopyDataToQueue>
 800637a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800637c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006380:	2b00      	cmp	r3, #0
 8006382:	d010      	beq.n	80063a6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006386:	3324      	adds	r3, #36	@ 0x24
 8006388:	4618      	mov	r0, r3
 800638a:	f000 ffe7 	bl	800735c <xTaskRemoveFromEventList>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d013      	beq.n	80063bc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006394:	4b3f      	ldr	r3, [pc, #252]	@ (8006494 <xQueueGenericSend+0x200>)
 8006396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800639a:	601a      	str	r2, [r3, #0]
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	f3bf 8f6f 	isb	sy
 80063a4:	e00a      	b.n	80063bc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80063a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d007      	beq.n	80063bc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80063ac:	4b39      	ldr	r3, [pc, #228]	@ (8006494 <xQueueGenericSend+0x200>)
 80063ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063b2:	601a      	str	r2, [r3, #0]
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80063bc:	f001 fd16 	bl	8007dec <vPortExitCritical>
				return pdPASS;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e063      	b.n	800648c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d103      	bne.n	80063d2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80063ca:	f001 fd0f 	bl	8007dec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80063ce:	2300      	movs	r3, #0
 80063d0:	e05c      	b.n	800648c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80063d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d106      	bne.n	80063e6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80063d8:	f107 0314 	add.w	r3, r7, #20
 80063dc:	4618      	mov	r0, r3
 80063de:	f001 f821 	bl	8007424 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063e2:	2301      	movs	r3, #1
 80063e4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063e6:	f001 fd01 	bl	8007dec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063ea:	f000 fdcf 	bl	8006f8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063ee:	f001 fccb 	bl	8007d88 <vPortEnterCritical>
 80063f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80063f8:	b25b      	sxtb	r3, r3
 80063fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063fe:	d103      	bne.n	8006408 <xQueueGenericSend+0x174>
 8006400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006402:	2200      	movs	r2, #0
 8006404:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800640e:	b25b      	sxtb	r3, r3
 8006410:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006414:	d103      	bne.n	800641e <xQueueGenericSend+0x18a>
 8006416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800641e:	f001 fce5 	bl	8007dec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006422:	1d3a      	adds	r2, r7, #4
 8006424:	f107 0314 	add.w	r3, r7, #20
 8006428:	4611      	mov	r1, r2
 800642a:	4618      	mov	r0, r3
 800642c:	f001 f810 	bl	8007450 <xTaskCheckForTimeOut>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d124      	bne.n	8006480 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006436:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006438:	f000 fb60 	bl	8006afc <prvIsQueueFull>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d018      	beq.n	8006474 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006444:	3310      	adds	r3, #16
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	4611      	mov	r1, r2
 800644a:	4618      	mov	r0, r3
 800644c:	f000 ff60 	bl	8007310 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006450:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006452:	f000 faeb 	bl	8006a2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006456:	f000 fda7 	bl	8006fa8 <xTaskResumeAll>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	f47f af7c 	bne.w	800635a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006462:	4b0c      	ldr	r3, [pc, #48]	@ (8006494 <xQueueGenericSend+0x200>)
 8006464:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	e772      	b.n	800635a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006474:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006476:	f000 fad9 	bl	8006a2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800647a:	f000 fd95 	bl	8006fa8 <xTaskResumeAll>
 800647e:	e76c      	b.n	800635a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006480:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006482:	f000 fad3 	bl	8006a2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006486:	f000 fd8f 	bl	8006fa8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800648a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800648c:	4618      	mov	r0, r3
 800648e:	3738      	adds	r7, #56	@ 0x38
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	e000ed04 	.word	0xe000ed04

08006498 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b08e      	sub	sp, #56	@ 0x38
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80064a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10b      	bne.n	80064c4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80064ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b0:	f383 8811 	msr	BASEPRI, r3
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	623b      	str	r3, [r7, #32]
}
 80064be:	bf00      	nop
 80064c0:	bf00      	nop
 80064c2:	e7fd      	b.n	80064c0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80064c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00b      	beq.n	80064e4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80064cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d0:	f383 8811 	msr	BASEPRI, r3
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	61fb      	str	r3, [r7, #28]
}
 80064de:	bf00      	nop
 80064e0:	bf00      	nop
 80064e2:	e7fd      	b.n	80064e0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80064e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d103      	bne.n	80064f4 <xQueueGiveFromISR+0x5c>
 80064ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d101      	bne.n	80064f8 <xQueueGiveFromISR+0x60>
 80064f4:	2301      	movs	r3, #1
 80064f6:	e000      	b.n	80064fa <xQueueGiveFromISR+0x62>
 80064f8:	2300      	movs	r3, #0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10b      	bne.n	8006516 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	61bb      	str	r3, [r7, #24]
}
 8006510:	bf00      	nop
 8006512:	bf00      	nop
 8006514:	e7fd      	b.n	8006512 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006516:	f001 fd17 	bl	8007f48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800651a:	f3ef 8211 	mrs	r2, BASEPRI
 800651e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	617a      	str	r2, [r7, #20]
 8006530:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006532:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006534:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800653a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800653c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006540:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006542:	429a      	cmp	r2, r3
 8006544:	d22b      	bcs.n	800659e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006548:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800654c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006552:	1c5a      	adds	r2, r3, #1
 8006554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006556:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006558:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800655c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006560:	d112      	bne.n	8006588 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006566:	2b00      	cmp	r3, #0
 8006568:	d016      	beq.n	8006598 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800656a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656c:	3324      	adds	r3, #36	@ 0x24
 800656e:	4618      	mov	r0, r3
 8006570:	f000 fef4 	bl	800735c <xTaskRemoveFromEventList>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00e      	beq.n	8006598 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00b      	beq.n	8006598 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	2201      	movs	r2, #1
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	e007      	b.n	8006598 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006588:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800658c:	3301      	adds	r3, #1
 800658e:	b2db      	uxtb	r3, r3
 8006590:	b25a      	sxtb	r2, r3
 8006592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006594:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006598:	2301      	movs	r3, #1
 800659a:	637b      	str	r3, [r7, #52]	@ 0x34
 800659c:	e001      	b.n	80065a2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800659e:	2300      	movs	r3, #0
 80065a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80065a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80065ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80065ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3738      	adds	r7, #56	@ 0x38
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b08e      	sub	sp, #56	@ 0x38
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80065c2:	2300      	movs	r3, #0
 80065c4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80065ca:	2300      	movs	r3, #0
 80065cc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80065ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10b      	bne.n	80065ec <xQueueSemaphoreTake+0x34>
	__asm volatile
 80065d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d8:	f383 8811 	msr	BASEPRI, r3
 80065dc:	f3bf 8f6f 	isb	sy
 80065e0:	f3bf 8f4f 	dsb	sy
 80065e4:	623b      	str	r3, [r7, #32]
}
 80065e6:	bf00      	nop
 80065e8:	bf00      	nop
 80065ea:	e7fd      	b.n	80065e8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80065ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00b      	beq.n	800660c <xQueueSemaphoreTake+0x54>
	__asm volatile
 80065f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	61fb      	str	r3, [r7, #28]
}
 8006606:	bf00      	nop
 8006608:	bf00      	nop
 800660a:	e7fd      	b.n	8006608 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800660c:	f001 f866 	bl	80076dc <xTaskGetSchedulerState>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d102      	bne.n	800661c <xQueueSemaphoreTake+0x64>
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d101      	bne.n	8006620 <xQueueSemaphoreTake+0x68>
 800661c:	2301      	movs	r3, #1
 800661e:	e000      	b.n	8006622 <xQueueSemaphoreTake+0x6a>
 8006620:	2300      	movs	r3, #0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10b      	bne.n	800663e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	61bb      	str	r3, [r7, #24]
}
 8006638:	bf00      	nop
 800663a:	bf00      	nop
 800663c:	e7fd      	b.n	800663a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800663e:	f001 fba3 	bl	8007d88 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006646:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800664a:	2b00      	cmp	r3, #0
 800664c:	d024      	beq.n	8006698 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800664e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006650:	1e5a      	subs	r2, r3, #1
 8006652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006654:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d104      	bne.n	8006668 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800665e:	f001 f9e9 	bl	8007a34 <pvTaskIncrementMutexHeldCount>
 8006662:	4602      	mov	r2, r0
 8006664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006666:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00f      	beq.n	8006690 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006672:	3310      	adds	r3, #16
 8006674:	4618      	mov	r0, r3
 8006676:	f000 fe71 	bl	800735c <xTaskRemoveFromEventList>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d007      	beq.n	8006690 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006680:	4b54      	ldr	r3, [pc, #336]	@ (80067d4 <xQueueSemaphoreTake+0x21c>)
 8006682:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006686:	601a      	str	r2, [r3, #0]
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006690:	f001 fbac 	bl	8007dec <vPortExitCritical>
				return pdPASS;
 8006694:	2301      	movs	r3, #1
 8006696:	e098      	b.n	80067ca <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d112      	bne.n	80066c4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800669e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00b      	beq.n	80066bc <xQueueSemaphoreTake+0x104>
	__asm volatile
 80066a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a8:	f383 8811 	msr	BASEPRI, r3
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	617b      	str	r3, [r7, #20]
}
 80066b6:	bf00      	nop
 80066b8:	bf00      	nop
 80066ba:	e7fd      	b.n	80066b8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80066bc:	f001 fb96 	bl	8007dec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80066c0:	2300      	movs	r3, #0
 80066c2:	e082      	b.n	80067ca <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80066c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d106      	bne.n	80066d8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80066ca:	f107 030c 	add.w	r3, r7, #12
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 fea8 	bl	8007424 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066d4:	2301      	movs	r3, #1
 80066d6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066d8:	f001 fb88 	bl	8007dec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066dc:	f000 fc56 	bl	8006f8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066e0:	f001 fb52 	bl	8007d88 <vPortEnterCritical>
 80066e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066ea:	b25b      	sxtb	r3, r3
 80066ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066f0:	d103      	bne.n	80066fa <xQueueSemaphoreTake+0x142>
 80066f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006700:	b25b      	sxtb	r3, r3
 8006702:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006706:	d103      	bne.n	8006710 <xQueueSemaphoreTake+0x158>
 8006708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800670a:	2200      	movs	r2, #0
 800670c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006710:	f001 fb6c 	bl	8007dec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006714:	463a      	mov	r2, r7
 8006716:	f107 030c 	add.w	r3, r7, #12
 800671a:	4611      	mov	r1, r2
 800671c:	4618      	mov	r0, r3
 800671e:	f000 fe97 	bl	8007450 <xTaskCheckForTimeOut>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d132      	bne.n	800678e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006728:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800672a:	f000 f9d1 	bl	8006ad0 <prvIsQueueEmpty>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d026      	beq.n	8006782 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d109      	bne.n	8006750 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800673c:	f001 fb24 	bl	8007d88 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	4618      	mov	r0, r3
 8006746:	f000 ffe7 	bl	8007718 <xTaskPriorityInherit>
 800674a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800674c:	f001 fb4e 	bl	8007dec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006752:	3324      	adds	r3, #36	@ 0x24
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	4611      	mov	r1, r2
 8006758:	4618      	mov	r0, r3
 800675a:	f000 fdd9 	bl	8007310 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800675e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006760:	f000 f964 	bl	8006a2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006764:	f000 fc20 	bl	8006fa8 <xTaskResumeAll>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	f47f af67 	bne.w	800663e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006770:	4b18      	ldr	r3, [pc, #96]	@ (80067d4 <xQueueSemaphoreTake+0x21c>)
 8006772:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006776:	601a      	str	r2, [r3, #0]
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	f3bf 8f6f 	isb	sy
 8006780:	e75d      	b.n	800663e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006782:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006784:	f000 f952 	bl	8006a2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006788:	f000 fc0e 	bl	8006fa8 <xTaskResumeAll>
 800678c:	e757      	b.n	800663e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800678e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006790:	f000 f94c 	bl	8006a2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006794:	f000 fc08 	bl	8006fa8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006798:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800679a:	f000 f999 	bl	8006ad0 <prvIsQueueEmpty>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f43f af4c 	beq.w	800663e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80067a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00d      	beq.n	80067c8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80067ac:	f001 faec 	bl	8007d88 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80067b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80067b2:	f000 f893 	bl	80068dc <prvGetDisinheritPriorityAfterTimeout>
 80067b6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80067b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80067be:	4618      	mov	r0, r3
 80067c0:	f001 f8a8 	bl	8007914 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80067c4:	f001 fb12 	bl	8007dec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80067c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3738      	adds	r7, #56	@ 0x38
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	e000ed04 	.word	0xe000ed04

080067d8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b08e      	sub	sp, #56	@ 0x38
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80067e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10b      	bne.n	8006806 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80067ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	623b      	str	r3, [r7, #32]
}
 8006800:	bf00      	nop
 8006802:	bf00      	nop
 8006804:	e7fd      	b.n	8006802 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d103      	bne.n	8006814 <xQueueReceiveFromISR+0x3c>
 800680c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006810:	2b00      	cmp	r3, #0
 8006812:	d101      	bne.n	8006818 <xQueueReceiveFromISR+0x40>
 8006814:	2301      	movs	r3, #1
 8006816:	e000      	b.n	800681a <xQueueReceiveFromISR+0x42>
 8006818:	2300      	movs	r3, #0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10b      	bne.n	8006836 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	61fb      	str	r3, [r7, #28]
}
 8006830:	bf00      	nop
 8006832:	bf00      	nop
 8006834:	e7fd      	b.n	8006832 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006836:	f001 fb87 	bl	8007f48 <vPortValidateInterruptPriority>
	__asm volatile
 800683a:	f3ef 8211 	mrs	r2, BASEPRI
 800683e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	61ba      	str	r2, [r7, #24]
 8006850:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006852:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006854:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800685a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800685c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800685e:	2b00      	cmp	r3, #0
 8006860:	d02f      	beq.n	80068c2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006864:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006868:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800686c:	68b9      	ldr	r1, [r7, #8]
 800686e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006870:	f000 f8b6 	bl	80069e0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006876:	1e5a      	subs	r2, r3, #1
 8006878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800687c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006880:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006884:	d112      	bne.n	80068ac <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d016      	beq.n	80068bc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800688e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006890:	3310      	adds	r3, #16
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fd62 	bl	800735c <xTaskRemoveFromEventList>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00e      	beq.n	80068bc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00b      	beq.n	80068bc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	601a      	str	r2, [r3, #0]
 80068aa:	e007      	b.n	80068bc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80068ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80068b0:	3301      	adds	r3, #1
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	b25a      	sxtb	r2, r3
 80068b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80068bc:	2301      	movs	r3, #1
 80068be:	637b      	str	r3, [r7, #52]	@ 0x34
 80068c0:	e001      	b.n	80068c6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80068c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f383 8811 	msr	BASEPRI, r3
}
 80068d0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80068d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3738      	adds	r7, #56	@ 0x38
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d006      	beq.n	80068fa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f1c3 0307 	rsb	r3, r3, #7
 80068f6:	60fb      	str	r3, [r7, #12]
 80068f8:	e001      	b.n	80068fe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80068fa:	2300      	movs	r3, #0
 80068fc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80068fe:	68fb      	ldr	r3, [r7, #12]
	}
 8006900:	4618      	mov	r0, r3
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006918:	2300      	movs	r3, #0
 800691a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006920:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10d      	bne.n	8006946 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d14d      	bne.n	80069ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	4618      	mov	r0, r3
 8006938:	f000 ff64 	bl	8007804 <xTaskPriorityDisinherit>
 800693c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	609a      	str	r2, [r3, #8]
 8006944:	e043      	b.n	80069ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d119      	bne.n	8006980 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6858      	ldr	r0, [r3, #4]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006954:	461a      	mov	r2, r3
 8006956:	68b9      	ldr	r1, [r7, #8]
 8006958:	f001 fd52 	bl	8008400 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	685a      	ldr	r2, [r3, #4]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006964:	441a      	add	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	429a      	cmp	r2, r3
 8006974:	d32b      	bcc.n	80069ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	605a      	str	r2, [r3, #4]
 800697e:	e026      	b.n	80069ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	68d8      	ldr	r0, [r3, #12]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006988:	461a      	mov	r2, r3
 800698a:	68b9      	ldr	r1, [r7, #8]
 800698c:	f001 fd38 	bl	8008400 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	68da      	ldr	r2, [r3, #12]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006998:	425b      	negs	r3, r3
 800699a:	441a      	add	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	68da      	ldr	r2, [r3, #12]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d207      	bcs.n	80069bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b4:	425b      	negs	r3, r3
 80069b6:	441a      	add	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d105      	bne.n	80069ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d002      	beq.n	80069ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	1c5a      	adds	r2, r3, #1
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80069d6:	697b      	ldr	r3, [r7, #20]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d018      	beq.n	8006a24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68da      	ldr	r2, [r3, #12]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069fa:	441a      	add	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	68da      	ldr	r2, [r3, #12]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d303      	bcc.n	8006a14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	68d9      	ldr	r1, [r3, #12]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	6838      	ldr	r0, [r7, #0]
 8006a20:	f001 fcee 	bl	8008400 <memcpy>
	}
}
 8006a24:	bf00      	nop
 8006a26:	3708      	adds	r7, #8
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a34:	f001 f9a8 	bl	8007d88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a40:	e011      	b.n	8006a66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d012      	beq.n	8006a70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	3324      	adds	r3, #36	@ 0x24
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 fc84 	bl	800735c <xTaskRemoveFromEventList>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d001      	beq.n	8006a5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a5a:	f000 fd5d 	bl	8007518 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a5e:	7bfb      	ldrb	r3, [r7, #15]
 8006a60:	3b01      	subs	r3, #1
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	dce9      	bgt.n	8006a42 <prvUnlockQueue+0x16>
 8006a6e:	e000      	b.n	8006a72 <prvUnlockQueue+0x46>
					break;
 8006a70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	22ff      	movs	r2, #255	@ 0xff
 8006a76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006a7a:	f001 f9b7 	bl	8007dec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a7e:	f001 f983 	bl	8007d88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a8a:	e011      	b.n	8006ab0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d012      	beq.n	8006aba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	3310      	adds	r3, #16
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 fc5f 	bl	800735c <xTaskRemoveFromEventList>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d001      	beq.n	8006aa8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006aa4:	f000 fd38 	bl	8007518 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006aa8:	7bbb      	ldrb	r3, [r7, #14]
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ab0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	dce9      	bgt.n	8006a8c <prvUnlockQueue+0x60>
 8006ab8:	e000      	b.n	8006abc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006aba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	22ff      	movs	r2, #255	@ 0xff
 8006ac0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006ac4:	f001 f992 	bl	8007dec <vPortExitCritical>
}
 8006ac8:	bf00      	nop
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ad8:	f001 f956 	bl	8007d88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d102      	bne.n	8006aea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	e001      	b.n	8006aee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006aee:	f001 f97d 	bl	8007dec <vPortExitCritical>

	return xReturn;
 8006af2:	68fb      	ldr	r3, [r7, #12]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b04:	f001 f940 	bl	8007d88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d102      	bne.n	8006b1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006b14:	2301      	movs	r3, #1
 8006b16:	60fb      	str	r3, [r7, #12]
 8006b18:	e001      	b.n	8006b1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b1e:	f001 f965 	bl	8007dec <vPortExitCritical>

	return xReturn;
 8006b22:	68fb      	ldr	r3, [r7, #12]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b08e      	sub	sp, #56	@ 0x38
 8006b30:	af04      	add	r7, sp, #16
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
 8006b38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10b      	bne.n	8006b58 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	623b      	str	r3, [r7, #32]
}
 8006b52:	bf00      	nop
 8006b54:	bf00      	nop
 8006b56:	e7fd      	b.n	8006b54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10b      	bne.n	8006b76 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	61fb      	str	r3, [r7, #28]
}
 8006b70:	bf00      	nop
 8006b72:	bf00      	nop
 8006b74:	e7fd      	b.n	8006b72 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b76:	2354      	movs	r3, #84	@ 0x54
 8006b78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	2b54      	cmp	r3, #84	@ 0x54
 8006b7e:	d00b      	beq.n	8006b98 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	61bb      	str	r3, [r7, #24]
}
 8006b92:	bf00      	nop
 8006b94:	bf00      	nop
 8006b96:	e7fd      	b.n	8006b94 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b98:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d01e      	beq.n	8006bde <xTaskCreateStatic+0xb2>
 8006ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d01b      	beq.n	8006bde <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006bae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006bb8:	2300      	movs	r3, #0
 8006bba:	9303      	str	r3, [sp, #12]
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bbe:	9302      	str	r3, [sp, #8]
 8006bc0:	f107 0314 	add.w	r3, r7, #20
 8006bc4:	9301      	str	r3, [sp, #4]
 8006bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	68b9      	ldr	r1, [r7, #8]
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f000 f850 	bl	8006c76 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bd6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006bd8:	f000 f8d6 	bl	8006d88 <prvAddNewTaskToReadyList>
 8006bdc:	e001      	b.n	8006be2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006bde:	2300      	movs	r3, #0
 8006be0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006be2:	697b      	ldr	r3, [r7, #20]
	}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3728      	adds	r7, #40	@ 0x28
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b08c      	sub	sp, #48	@ 0x30
 8006bf0:	af04      	add	r7, sp, #16
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	603b      	str	r3, [r7, #0]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006bfc:	88fb      	ldrh	r3, [r7, #6]
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4618      	mov	r0, r3
 8006c02:	f001 f9e3 	bl	8007fcc <pvPortMalloc>
 8006c06:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00e      	beq.n	8006c2c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c0e:	2054      	movs	r0, #84	@ 0x54
 8006c10:	f001 f9dc 	bl	8007fcc <pvPortMalloc>
 8006c14:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d003      	beq.n	8006c24 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c22:	e005      	b.n	8006c30 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c24:	6978      	ldr	r0, [r7, #20]
 8006c26:	f001 fa9f 	bl	8008168 <vPortFree>
 8006c2a:	e001      	b.n	8006c30 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d017      	beq.n	8006c66 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c3e:	88fa      	ldrh	r2, [r7, #6]
 8006c40:	2300      	movs	r3, #0
 8006c42:	9303      	str	r3, [sp, #12]
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	9302      	str	r3, [sp, #8]
 8006c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c4a:	9301      	str	r3, [sp, #4]
 8006c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	68b9      	ldr	r1, [r7, #8]
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f000 f80e 	bl	8006c76 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c5a:	69f8      	ldr	r0, [r7, #28]
 8006c5c:	f000 f894 	bl	8006d88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c60:	2301      	movs	r3, #1
 8006c62:	61bb      	str	r3, [r7, #24]
 8006c64:	e002      	b.n	8006c6c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006c6a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c6c:	69bb      	ldr	r3, [r7, #24]
	}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3720      	adds	r7, #32
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b088      	sub	sp, #32
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	60f8      	str	r0, [r7, #12]
 8006c7e:	60b9      	str	r1, [r7, #8]
 8006c80:	607a      	str	r2, [r7, #4]
 8006c82:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	f023 0307 	bic.w	r3, r3, #7
 8006c9c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	f003 0307 	and.w	r3, r3, #7
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00b      	beq.n	8006cc0 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cac:	f383 8811 	msr	BASEPRI, r3
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	617b      	str	r3, [r7, #20]
}
 8006cba:	bf00      	nop
 8006cbc:	bf00      	nop
 8006cbe:	e7fd      	b.n	8006cbc <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d01f      	beq.n	8006d06 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	61fb      	str	r3, [r7, #28]
 8006cca:	e012      	b.n	8006cf2 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	7819      	ldrb	r1, [r3, #0]
 8006cd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	4413      	add	r3, r2
 8006cda:	3334      	adds	r3, #52	@ 0x34
 8006cdc:	460a      	mov	r2, r1
 8006cde:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d006      	beq.n	8006cfa <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	61fb      	str	r3, [r7, #28]
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	2b0f      	cmp	r3, #15
 8006cf6:	d9e9      	bls.n	8006ccc <prvInitialiseNewTask+0x56>
 8006cf8:	e000      	b.n	8006cfc <prvInitialiseNewTask+0x86>
			{
				break;
 8006cfa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006d04:	e003      	b.n	8006d0e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d10:	2b06      	cmp	r3, #6
 8006d12:	d901      	bls.n	8006d18 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d14:	2306      	movs	r3, #6
 8006d16:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d1c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d22:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d26:	2200      	movs	r2, #0
 8006d28:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2c:	3304      	adds	r3, #4
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7ff f88e 	bl	8005e50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d36:	3318      	adds	r3, #24
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7ff f889 	bl	8005e50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d46:	f1c3 0207 	rsb	r2, r3, #7
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d52:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d56:	2200      	movs	r2, #0
 8006d58:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d62:	683a      	ldr	r2, [r7, #0]
 8006d64:	68f9      	ldr	r1, [r7, #12]
 8006d66:	69b8      	ldr	r0, [r7, #24]
 8006d68:	f000 fede 	bl	8007b28 <pxPortInitialiseStack>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d70:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d002      	beq.n	8006d7e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d7e:	bf00      	nop
 8006d80:	3720      	adds	r7, #32
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
	...

08006d88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d90:	f000 fffa 	bl	8007d88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d94:	4b2a      	ldr	r3, [pc, #168]	@ (8006e40 <prvAddNewTaskToReadyList+0xb8>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	4a29      	ldr	r2, [pc, #164]	@ (8006e40 <prvAddNewTaskToReadyList+0xb8>)
 8006d9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d9e:	4b29      	ldr	r3, [pc, #164]	@ (8006e44 <prvAddNewTaskToReadyList+0xbc>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d109      	bne.n	8006dba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006da6:	4a27      	ldr	r2, [pc, #156]	@ (8006e44 <prvAddNewTaskToReadyList+0xbc>)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006dac:	4b24      	ldr	r3, [pc, #144]	@ (8006e40 <prvAddNewTaskToReadyList+0xb8>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d110      	bne.n	8006dd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006db4:	f000 fbd4 	bl	8007560 <prvInitialiseTaskLists>
 8006db8:	e00d      	b.n	8006dd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006dba:	4b23      	ldr	r3, [pc, #140]	@ (8006e48 <prvAddNewTaskToReadyList+0xc0>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d109      	bne.n	8006dd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006dc2:	4b20      	ldr	r3, [pc, #128]	@ (8006e44 <prvAddNewTaskToReadyList+0xbc>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d802      	bhi.n	8006dd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006dd0:	4a1c      	ldr	r2, [pc, #112]	@ (8006e44 <prvAddNewTaskToReadyList+0xbc>)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8006e4c <prvAddNewTaskToReadyList+0xc4>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8006e4c <prvAddNewTaskToReadyList+0xc4>)
 8006dde:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de4:	2201      	movs	r2, #1
 8006de6:	409a      	lsls	r2, r3
 8006de8:	4b19      	ldr	r3, [pc, #100]	@ (8006e50 <prvAddNewTaskToReadyList+0xc8>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	4a18      	ldr	r2, [pc, #96]	@ (8006e50 <prvAddNewTaskToReadyList+0xc8>)
 8006df0:	6013      	str	r3, [r2, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006df6:	4613      	mov	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4a15      	ldr	r2, [pc, #84]	@ (8006e54 <prvAddNewTaskToReadyList+0xcc>)
 8006e00:	441a      	add	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	3304      	adds	r3, #4
 8006e06:	4619      	mov	r1, r3
 8006e08:	4610      	mov	r0, r2
 8006e0a:	f7ff f82e 	bl	8005e6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e0e:	f000 ffed 	bl	8007dec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e12:	4b0d      	ldr	r3, [pc, #52]	@ (8006e48 <prvAddNewTaskToReadyList+0xc0>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00e      	beq.n	8006e38 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8006e44 <prvAddNewTaskToReadyList+0xbc>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d207      	bcs.n	8006e38 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e28:	4b0b      	ldr	r3, [pc, #44]	@ (8006e58 <prvAddNewTaskToReadyList+0xd0>)
 8006e2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e2e:	601a      	str	r2, [r3, #0]
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e38:	bf00      	nop
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	20000490 	.word	0x20000490
 8006e44:	20000390 	.word	0x20000390
 8006e48:	2000049c 	.word	0x2000049c
 8006e4c:	200004ac 	.word	0x200004ac
 8006e50:	20000498 	.word	0x20000498
 8006e54:	20000394 	.word	0x20000394
 8006e58:	e000ed04 	.word	0xe000ed04

08006e5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e64:	2300      	movs	r3, #0
 8006e66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d018      	beq.n	8006ea0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e6e:	4b14      	ldr	r3, [pc, #80]	@ (8006ec0 <vTaskDelay+0x64>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00b      	beq.n	8006e8e <vTaskDelay+0x32>
	__asm volatile
 8006e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e7a:	f383 8811 	msr	BASEPRI, r3
 8006e7e:	f3bf 8f6f 	isb	sy
 8006e82:	f3bf 8f4f 	dsb	sy
 8006e86:	60bb      	str	r3, [r7, #8]
}
 8006e88:	bf00      	nop
 8006e8a:	bf00      	nop
 8006e8c:	e7fd      	b.n	8006e8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006e8e:	f000 f87d 	bl	8006f8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e92:	2100      	movs	r1, #0
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fde1 	bl	8007a5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e9a:	f000 f885 	bl	8006fa8 <xTaskResumeAll>
 8006e9e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d107      	bne.n	8006eb6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006ea6:	4b07      	ldr	r3, [pc, #28]	@ (8006ec4 <vTaskDelay+0x68>)
 8006ea8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006eac:	601a      	str	r2, [r3, #0]
 8006eae:	f3bf 8f4f 	dsb	sy
 8006eb2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006eb6:	bf00      	nop
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	200004b8 	.word	0x200004b8
 8006ec4:	e000ed04 	.word	0xe000ed04

08006ec8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b08a      	sub	sp, #40	@ 0x28
 8006ecc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ed6:	463a      	mov	r2, r7
 8006ed8:	1d39      	adds	r1, r7, #4
 8006eda:	f107 0308 	add.w	r3, r7, #8
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7f9 fb0c 	bl	80004fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	9202      	str	r2, [sp, #8]
 8006eec:	9301      	str	r3, [sp, #4]
 8006eee:	2300      	movs	r3, #0
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	460a      	mov	r2, r1
 8006ef6:	491f      	ldr	r1, [pc, #124]	@ (8006f74 <vTaskStartScheduler+0xac>)
 8006ef8:	481f      	ldr	r0, [pc, #124]	@ (8006f78 <vTaskStartScheduler+0xb0>)
 8006efa:	f7ff fe17 	bl	8006b2c <xTaskCreateStatic>
 8006efe:	4603      	mov	r3, r0
 8006f00:	4a1e      	ldr	r2, [pc, #120]	@ (8006f7c <vTaskStartScheduler+0xb4>)
 8006f02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f04:	4b1d      	ldr	r3, [pc, #116]	@ (8006f7c <vTaskStartScheduler+0xb4>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d002      	beq.n	8006f12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	617b      	str	r3, [r7, #20]
 8006f10:	e001      	b.n	8006f16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f12:	2300      	movs	r3, #0
 8006f14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d116      	bne.n	8006f4a <vTaskStartScheduler+0x82>
	__asm volatile
 8006f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f20:	f383 8811 	msr	BASEPRI, r3
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	613b      	str	r3, [r7, #16]
}
 8006f2e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f30:	4b13      	ldr	r3, [pc, #76]	@ (8006f80 <vTaskStartScheduler+0xb8>)
 8006f32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f38:	4b12      	ldr	r3, [pc, #72]	@ (8006f84 <vTaskStartScheduler+0xbc>)
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f3e:	4b12      	ldr	r3, [pc, #72]	@ (8006f88 <vTaskStartScheduler+0xc0>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f44:	f000 fe7c 	bl	8007c40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f48:	e00f      	b.n	8006f6a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f50:	d10b      	bne.n	8006f6a <vTaskStartScheduler+0xa2>
	__asm volatile
 8006f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f56:	f383 8811 	msr	BASEPRI, r3
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	60fb      	str	r3, [r7, #12]
}
 8006f64:	bf00      	nop
 8006f66:	bf00      	nop
 8006f68:	e7fd      	b.n	8006f66 <vTaskStartScheduler+0x9e>
}
 8006f6a:	bf00      	nop
 8006f6c:	3718      	adds	r7, #24
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	08008590 	.word	0x08008590
 8006f78:	08007531 	.word	0x08007531
 8006f7c:	200004b4 	.word	0x200004b4
 8006f80:	200004b0 	.word	0x200004b0
 8006f84:	2000049c 	.word	0x2000049c
 8006f88:	20000494 	.word	0x20000494

08006f8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006f90:	4b04      	ldr	r3, [pc, #16]	@ (8006fa4 <vTaskSuspendAll+0x18>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3301      	adds	r3, #1
 8006f96:	4a03      	ldr	r2, [pc, #12]	@ (8006fa4 <vTaskSuspendAll+0x18>)
 8006f98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006f9a:	bf00      	nop
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr
 8006fa4:	200004b8 	.word	0x200004b8

08006fa8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006fb6:	4b42      	ldr	r3, [pc, #264]	@ (80070c0 <xTaskResumeAll+0x118>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10b      	bne.n	8006fd6 <xTaskResumeAll+0x2e>
	__asm volatile
 8006fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	603b      	str	r3, [r7, #0]
}
 8006fd0:	bf00      	nop
 8006fd2:	bf00      	nop
 8006fd4:	e7fd      	b.n	8006fd2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006fd6:	f000 fed7 	bl	8007d88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006fda:	4b39      	ldr	r3, [pc, #228]	@ (80070c0 <xTaskResumeAll+0x118>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	4a37      	ldr	r2, [pc, #220]	@ (80070c0 <xTaskResumeAll+0x118>)
 8006fe2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fe4:	4b36      	ldr	r3, [pc, #216]	@ (80070c0 <xTaskResumeAll+0x118>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d161      	bne.n	80070b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006fec:	4b35      	ldr	r3, [pc, #212]	@ (80070c4 <xTaskResumeAll+0x11c>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d05d      	beq.n	80070b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ff4:	e02e      	b.n	8007054 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ff6:	4b34      	ldr	r3, [pc, #208]	@ (80070c8 <xTaskResumeAll+0x120>)
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3318      	adds	r3, #24
 8007002:	4618      	mov	r0, r3
 8007004:	f7fe ff8e 	bl	8005f24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	3304      	adds	r3, #4
 800700c:	4618      	mov	r0, r3
 800700e:	f7fe ff89 	bl	8005f24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007016:	2201      	movs	r2, #1
 8007018:	409a      	lsls	r2, r3
 800701a:	4b2c      	ldr	r3, [pc, #176]	@ (80070cc <xTaskResumeAll+0x124>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4313      	orrs	r3, r2
 8007020:	4a2a      	ldr	r2, [pc, #168]	@ (80070cc <xTaskResumeAll+0x124>)
 8007022:	6013      	str	r3, [r2, #0]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007028:	4613      	mov	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4413      	add	r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4a27      	ldr	r2, [pc, #156]	@ (80070d0 <xTaskResumeAll+0x128>)
 8007032:	441a      	add	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	3304      	adds	r3, #4
 8007038:	4619      	mov	r1, r3
 800703a:	4610      	mov	r0, r2
 800703c:	f7fe ff15 	bl	8005e6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007044:	4b23      	ldr	r3, [pc, #140]	@ (80070d4 <xTaskResumeAll+0x12c>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800704a:	429a      	cmp	r2, r3
 800704c:	d302      	bcc.n	8007054 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800704e:	4b22      	ldr	r3, [pc, #136]	@ (80070d8 <xTaskResumeAll+0x130>)
 8007050:	2201      	movs	r2, #1
 8007052:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007054:	4b1c      	ldr	r3, [pc, #112]	@ (80070c8 <xTaskResumeAll+0x120>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1cc      	bne.n	8006ff6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d001      	beq.n	8007066 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007062:	f000 fb1b 	bl	800769c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007066:	4b1d      	ldr	r3, [pc, #116]	@ (80070dc <xTaskResumeAll+0x134>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d010      	beq.n	8007094 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007072:	f000 f837 	bl	80070e4 <xTaskIncrementTick>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d002      	beq.n	8007082 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800707c:	4b16      	ldr	r3, [pc, #88]	@ (80070d8 <xTaskResumeAll+0x130>)
 800707e:	2201      	movs	r2, #1
 8007080:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	3b01      	subs	r3, #1
 8007086:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1f1      	bne.n	8007072 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800708e:	4b13      	ldr	r3, [pc, #76]	@ (80070dc <xTaskResumeAll+0x134>)
 8007090:	2200      	movs	r2, #0
 8007092:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007094:	4b10      	ldr	r3, [pc, #64]	@ (80070d8 <xTaskResumeAll+0x130>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d009      	beq.n	80070b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800709c:	2301      	movs	r3, #1
 800709e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070a0:	4b0f      	ldr	r3, [pc, #60]	@ (80070e0 <xTaskResumeAll+0x138>)
 80070a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070b0:	f000 fe9c 	bl	8007dec <vPortExitCritical>

	return xAlreadyYielded;
 80070b4:	68bb      	ldr	r3, [r7, #8]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	200004b8 	.word	0x200004b8
 80070c4:	20000490 	.word	0x20000490
 80070c8:	20000450 	.word	0x20000450
 80070cc:	20000498 	.word	0x20000498
 80070d0:	20000394 	.word	0x20000394
 80070d4:	20000390 	.word	0x20000390
 80070d8:	200004a4 	.word	0x200004a4
 80070dc:	200004a0 	.word	0x200004a0
 80070e0:	e000ed04 	.word	0xe000ed04

080070e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80070ea:	2300      	movs	r3, #0
 80070ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070ee:	4b4f      	ldr	r3, [pc, #316]	@ (800722c <xTaskIncrementTick+0x148>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f040 808f 	bne.w	8007216 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80070f8:	4b4d      	ldr	r3, [pc, #308]	@ (8007230 <xTaskIncrementTick+0x14c>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3301      	adds	r3, #1
 80070fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007100:	4a4b      	ldr	r2, [pc, #300]	@ (8007230 <xTaskIncrementTick+0x14c>)
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d121      	bne.n	8007150 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800710c:	4b49      	ldr	r3, [pc, #292]	@ (8007234 <xTaskIncrementTick+0x150>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00b      	beq.n	800712e <xTaskIncrementTick+0x4a>
	__asm volatile
 8007116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	603b      	str	r3, [r7, #0]
}
 8007128:	bf00      	nop
 800712a:	bf00      	nop
 800712c:	e7fd      	b.n	800712a <xTaskIncrementTick+0x46>
 800712e:	4b41      	ldr	r3, [pc, #260]	@ (8007234 <xTaskIncrementTick+0x150>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	60fb      	str	r3, [r7, #12]
 8007134:	4b40      	ldr	r3, [pc, #256]	@ (8007238 <xTaskIncrementTick+0x154>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a3e      	ldr	r2, [pc, #248]	@ (8007234 <xTaskIncrementTick+0x150>)
 800713a:	6013      	str	r3, [r2, #0]
 800713c:	4a3e      	ldr	r2, [pc, #248]	@ (8007238 <xTaskIncrementTick+0x154>)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6013      	str	r3, [r2, #0]
 8007142:	4b3e      	ldr	r3, [pc, #248]	@ (800723c <xTaskIncrementTick+0x158>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	3301      	adds	r3, #1
 8007148:	4a3c      	ldr	r2, [pc, #240]	@ (800723c <xTaskIncrementTick+0x158>)
 800714a:	6013      	str	r3, [r2, #0]
 800714c:	f000 faa6 	bl	800769c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007150:	4b3b      	ldr	r3, [pc, #236]	@ (8007240 <xTaskIncrementTick+0x15c>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	429a      	cmp	r2, r3
 8007158:	d348      	bcc.n	80071ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800715a:	4b36      	ldr	r3, [pc, #216]	@ (8007234 <xTaskIncrementTick+0x150>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d104      	bne.n	800716e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007164:	4b36      	ldr	r3, [pc, #216]	@ (8007240 <xTaskIncrementTick+0x15c>)
 8007166:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800716a:	601a      	str	r2, [r3, #0]
					break;
 800716c:	e03e      	b.n	80071ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800716e:	4b31      	ldr	r3, [pc, #196]	@ (8007234 <xTaskIncrementTick+0x150>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	429a      	cmp	r2, r3
 8007184:	d203      	bcs.n	800718e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007186:	4a2e      	ldr	r2, [pc, #184]	@ (8007240 <xTaskIncrementTick+0x15c>)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800718c:	e02e      	b.n	80071ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	3304      	adds	r3, #4
 8007192:	4618      	mov	r0, r3
 8007194:	f7fe fec6 	bl	8005f24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800719c:	2b00      	cmp	r3, #0
 800719e:	d004      	beq.n	80071aa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	3318      	adds	r3, #24
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7fe febd 	bl	8005f24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ae:	2201      	movs	r2, #1
 80071b0:	409a      	lsls	r2, r3
 80071b2:	4b24      	ldr	r3, [pc, #144]	@ (8007244 <xTaskIncrementTick+0x160>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	4a22      	ldr	r2, [pc, #136]	@ (8007244 <xTaskIncrementTick+0x160>)
 80071ba:	6013      	str	r3, [r2, #0]
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071c0:	4613      	mov	r3, r2
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4413      	add	r3, r2
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	4a1f      	ldr	r2, [pc, #124]	@ (8007248 <xTaskIncrementTick+0x164>)
 80071ca:	441a      	add	r2, r3
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	3304      	adds	r3, #4
 80071d0:	4619      	mov	r1, r3
 80071d2:	4610      	mov	r0, r2
 80071d4:	f7fe fe49 	bl	8005e6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071dc:	4b1b      	ldr	r3, [pc, #108]	@ (800724c <xTaskIncrementTick+0x168>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d3b9      	bcc.n	800715a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80071e6:	2301      	movs	r3, #1
 80071e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071ea:	e7b6      	b.n	800715a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80071ec:	4b17      	ldr	r3, [pc, #92]	@ (800724c <xTaskIncrementTick+0x168>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071f2:	4915      	ldr	r1, [pc, #84]	@ (8007248 <xTaskIncrementTick+0x164>)
 80071f4:	4613      	mov	r3, r2
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4413      	add	r3, r2
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	440b      	add	r3, r1
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d901      	bls.n	8007208 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007204:	2301      	movs	r3, #1
 8007206:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007208:	4b11      	ldr	r3, [pc, #68]	@ (8007250 <xTaskIncrementTick+0x16c>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d007      	beq.n	8007220 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007210:	2301      	movs	r3, #1
 8007212:	617b      	str	r3, [r7, #20]
 8007214:	e004      	b.n	8007220 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007216:	4b0f      	ldr	r3, [pc, #60]	@ (8007254 <xTaskIncrementTick+0x170>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	3301      	adds	r3, #1
 800721c:	4a0d      	ldr	r2, [pc, #52]	@ (8007254 <xTaskIncrementTick+0x170>)
 800721e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007220:	697b      	ldr	r3, [r7, #20]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3718      	adds	r7, #24
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	200004b8 	.word	0x200004b8
 8007230:	20000494 	.word	0x20000494
 8007234:	20000448 	.word	0x20000448
 8007238:	2000044c 	.word	0x2000044c
 800723c:	200004a8 	.word	0x200004a8
 8007240:	200004b0 	.word	0x200004b0
 8007244:	20000498 	.word	0x20000498
 8007248:	20000394 	.word	0x20000394
 800724c:	20000390 	.word	0x20000390
 8007250:	200004a4 	.word	0x200004a4
 8007254:	200004a0 	.word	0x200004a0

08007258 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800725e:	4b27      	ldr	r3, [pc, #156]	@ (80072fc <vTaskSwitchContext+0xa4>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d003      	beq.n	800726e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007266:	4b26      	ldr	r3, [pc, #152]	@ (8007300 <vTaskSwitchContext+0xa8>)
 8007268:	2201      	movs	r2, #1
 800726a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800726c:	e040      	b.n	80072f0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800726e:	4b24      	ldr	r3, [pc, #144]	@ (8007300 <vTaskSwitchContext+0xa8>)
 8007270:	2200      	movs	r2, #0
 8007272:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007274:	4b23      	ldr	r3, [pc, #140]	@ (8007304 <vTaskSwitchContext+0xac>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	fab3 f383 	clz	r3, r3
 8007280:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007282:	7afb      	ldrb	r3, [r7, #11]
 8007284:	f1c3 031f 	rsb	r3, r3, #31
 8007288:	617b      	str	r3, [r7, #20]
 800728a:	491f      	ldr	r1, [pc, #124]	@ (8007308 <vTaskSwitchContext+0xb0>)
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	4613      	mov	r3, r2
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	4413      	add	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	440b      	add	r3, r1
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10b      	bne.n	80072b6 <vTaskSwitchContext+0x5e>
	__asm volatile
 800729e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072a2:	f383 8811 	msr	BASEPRI, r3
 80072a6:	f3bf 8f6f 	isb	sy
 80072aa:	f3bf 8f4f 	dsb	sy
 80072ae:	607b      	str	r3, [r7, #4]
}
 80072b0:	bf00      	nop
 80072b2:	bf00      	nop
 80072b4:	e7fd      	b.n	80072b2 <vTaskSwitchContext+0x5a>
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	4613      	mov	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4413      	add	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4a11      	ldr	r2, [pc, #68]	@ (8007308 <vTaskSwitchContext+0xb0>)
 80072c2:	4413      	add	r3, r2
 80072c4:	613b      	str	r3, [r7, #16]
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	605a      	str	r2, [r3, #4]
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	685a      	ldr	r2, [r3, #4]
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	3308      	adds	r3, #8
 80072d8:	429a      	cmp	r2, r3
 80072da:	d104      	bne.n	80072e6 <vTaskSwitchContext+0x8e>
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	605a      	str	r2, [r3, #4]
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	4a07      	ldr	r2, [pc, #28]	@ (800730c <vTaskSwitchContext+0xb4>)
 80072ee:	6013      	str	r3, [r2, #0]
}
 80072f0:	bf00      	nop
 80072f2:	371c      	adds	r7, #28
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr
 80072fc:	200004b8 	.word	0x200004b8
 8007300:	200004a4 	.word	0x200004a4
 8007304:	20000498 	.word	0x20000498
 8007308:	20000394 	.word	0x20000394
 800730c:	20000390 	.word	0x20000390

08007310 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10b      	bne.n	8007338 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	60fb      	str	r3, [r7, #12]
}
 8007332:	bf00      	nop
 8007334:	bf00      	nop
 8007336:	e7fd      	b.n	8007334 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007338:	4b07      	ldr	r3, [pc, #28]	@ (8007358 <vTaskPlaceOnEventList+0x48>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	3318      	adds	r3, #24
 800733e:	4619      	mov	r1, r3
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f7fe fdb6 	bl	8005eb2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007346:	2101      	movs	r1, #1
 8007348:	6838      	ldr	r0, [r7, #0]
 800734a:	f000 fb87 	bl	8007a5c <prvAddCurrentTaskToDelayedList>
}
 800734e:	bf00      	nop
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	20000390 	.word	0x20000390

0800735c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10b      	bne.n	800738a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007376:	f383 8811 	msr	BASEPRI, r3
 800737a:	f3bf 8f6f 	isb	sy
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	60fb      	str	r3, [r7, #12]
}
 8007384:	bf00      	nop
 8007386:	bf00      	nop
 8007388:	e7fd      	b.n	8007386 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	3318      	adds	r3, #24
 800738e:	4618      	mov	r0, r3
 8007390:	f7fe fdc8 	bl	8005f24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007394:	4b1d      	ldr	r3, [pc, #116]	@ (800740c <xTaskRemoveFromEventList+0xb0>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d11c      	bne.n	80073d6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	3304      	adds	r3, #4
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7fe fdbf 	bl	8005f24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073aa:	2201      	movs	r2, #1
 80073ac:	409a      	lsls	r2, r3
 80073ae:	4b18      	ldr	r3, [pc, #96]	@ (8007410 <xTaskRemoveFromEventList+0xb4>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	4a16      	ldr	r2, [pc, #88]	@ (8007410 <xTaskRemoveFromEventList+0xb4>)
 80073b6:	6013      	str	r3, [r2, #0]
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073bc:	4613      	mov	r3, r2
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	4a13      	ldr	r2, [pc, #76]	@ (8007414 <xTaskRemoveFromEventList+0xb8>)
 80073c6:	441a      	add	r2, r3
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	3304      	adds	r3, #4
 80073cc:	4619      	mov	r1, r3
 80073ce:	4610      	mov	r0, r2
 80073d0:	f7fe fd4b 	bl	8005e6a <vListInsertEnd>
 80073d4:	e005      	b.n	80073e2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	3318      	adds	r3, #24
 80073da:	4619      	mov	r1, r3
 80073dc:	480e      	ldr	r0, [pc, #56]	@ (8007418 <xTaskRemoveFromEventList+0xbc>)
 80073de:	f7fe fd44 	bl	8005e6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073e6:	4b0d      	ldr	r3, [pc, #52]	@ (800741c <xTaskRemoveFromEventList+0xc0>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d905      	bls.n	80073fc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80073f0:	2301      	movs	r3, #1
 80073f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80073f4:	4b0a      	ldr	r3, [pc, #40]	@ (8007420 <xTaskRemoveFromEventList+0xc4>)
 80073f6:	2201      	movs	r2, #1
 80073f8:	601a      	str	r2, [r3, #0]
 80073fa:	e001      	b.n	8007400 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80073fc:	2300      	movs	r3, #0
 80073fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007400:	697b      	ldr	r3, [r7, #20]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3718      	adds	r7, #24
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	200004b8 	.word	0x200004b8
 8007410:	20000498 	.word	0x20000498
 8007414:	20000394 	.word	0x20000394
 8007418:	20000450 	.word	0x20000450
 800741c:	20000390 	.word	0x20000390
 8007420:	200004a4 	.word	0x200004a4

08007424 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800742c:	4b06      	ldr	r3, [pc, #24]	@ (8007448 <vTaskInternalSetTimeOutState+0x24>)
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007434:	4b05      	ldr	r3, [pc, #20]	@ (800744c <vTaskInternalSetTimeOutState+0x28>)
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	605a      	str	r2, [r3, #4]
}
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr
 8007448:	200004a8 	.word	0x200004a8
 800744c:	20000494 	.word	0x20000494

08007450 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b088      	sub	sp, #32
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10b      	bne.n	8007478 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007464:	f383 8811 	msr	BASEPRI, r3
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	613b      	str	r3, [r7, #16]
}
 8007472:	bf00      	nop
 8007474:	bf00      	nop
 8007476:	e7fd      	b.n	8007474 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10b      	bne.n	8007496 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800747e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	60fb      	str	r3, [r7, #12]
}
 8007490:	bf00      	nop
 8007492:	bf00      	nop
 8007494:	e7fd      	b.n	8007492 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007496:	f000 fc77 	bl	8007d88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800749a:	4b1d      	ldr	r3, [pc, #116]	@ (8007510 <xTaskCheckForTimeOut+0xc0>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	69ba      	ldr	r2, [r7, #24]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074b2:	d102      	bne.n	80074ba <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80074b4:	2300      	movs	r3, #0
 80074b6:	61fb      	str	r3, [r7, #28]
 80074b8:	e023      	b.n	8007502 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	4b15      	ldr	r3, [pc, #84]	@ (8007514 <xTaskCheckForTimeOut+0xc4>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d007      	beq.n	80074d6 <xTaskCheckForTimeOut+0x86>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	69ba      	ldr	r2, [r7, #24]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d302      	bcc.n	80074d6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80074d0:	2301      	movs	r3, #1
 80074d2:	61fb      	str	r3, [r7, #28]
 80074d4:	e015      	b.n	8007502 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d20b      	bcs.n	80074f8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	1ad2      	subs	r2, r2, r3
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f7ff ff99 	bl	8007424 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80074f2:	2300      	movs	r3, #0
 80074f4:	61fb      	str	r3, [r7, #28]
 80074f6:	e004      	b.n	8007502 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	2200      	movs	r2, #0
 80074fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80074fe:	2301      	movs	r3, #1
 8007500:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007502:	f000 fc73 	bl	8007dec <vPortExitCritical>

	return xReturn;
 8007506:	69fb      	ldr	r3, [r7, #28]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3720      	adds	r7, #32
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	20000494 	.word	0x20000494
 8007514:	200004a8 	.word	0x200004a8

08007518 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007518:	b480      	push	{r7}
 800751a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800751c:	4b03      	ldr	r3, [pc, #12]	@ (800752c <vTaskMissedYield+0x14>)
 800751e:	2201      	movs	r2, #1
 8007520:	601a      	str	r2, [r3, #0]
}
 8007522:	bf00      	nop
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr
 800752c:	200004a4 	.word	0x200004a4

08007530 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007538:	f000 f852 	bl	80075e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800753c:	4b06      	ldr	r3, [pc, #24]	@ (8007558 <prvIdleTask+0x28>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d9f9      	bls.n	8007538 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007544:	4b05      	ldr	r3, [pc, #20]	@ (800755c <prvIdleTask+0x2c>)
 8007546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007554:	e7f0      	b.n	8007538 <prvIdleTask+0x8>
 8007556:	bf00      	nop
 8007558:	20000394 	.word	0x20000394
 800755c:	e000ed04 	.word	0xe000ed04

08007560 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007566:	2300      	movs	r3, #0
 8007568:	607b      	str	r3, [r7, #4]
 800756a:	e00c      	b.n	8007586 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	4613      	mov	r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4413      	add	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4a12      	ldr	r2, [pc, #72]	@ (80075c0 <prvInitialiseTaskLists+0x60>)
 8007578:	4413      	add	r3, r2
 800757a:	4618      	mov	r0, r3
 800757c:	f7fe fc48 	bl	8005e10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	3301      	adds	r3, #1
 8007584:	607b      	str	r3, [r7, #4]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2b06      	cmp	r3, #6
 800758a:	d9ef      	bls.n	800756c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800758c:	480d      	ldr	r0, [pc, #52]	@ (80075c4 <prvInitialiseTaskLists+0x64>)
 800758e:	f7fe fc3f 	bl	8005e10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007592:	480d      	ldr	r0, [pc, #52]	@ (80075c8 <prvInitialiseTaskLists+0x68>)
 8007594:	f7fe fc3c 	bl	8005e10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007598:	480c      	ldr	r0, [pc, #48]	@ (80075cc <prvInitialiseTaskLists+0x6c>)
 800759a:	f7fe fc39 	bl	8005e10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800759e:	480c      	ldr	r0, [pc, #48]	@ (80075d0 <prvInitialiseTaskLists+0x70>)
 80075a0:	f7fe fc36 	bl	8005e10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80075a4:	480b      	ldr	r0, [pc, #44]	@ (80075d4 <prvInitialiseTaskLists+0x74>)
 80075a6:	f7fe fc33 	bl	8005e10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80075aa:	4b0b      	ldr	r3, [pc, #44]	@ (80075d8 <prvInitialiseTaskLists+0x78>)
 80075ac:	4a05      	ldr	r2, [pc, #20]	@ (80075c4 <prvInitialiseTaskLists+0x64>)
 80075ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80075b0:	4b0a      	ldr	r3, [pc, #40]	@ (80075dc <prvInitialiseTaskLists+0x7c>)
 80075b2:	4a05      	ldr	r2, [pc, #20]	@ (80075c8 <prvInitialiseTaskLists+0x68>)
 80075b4:	601a      	str	r2, [r3, #0]
}
 80075b6:	bf00      	nop
 80075b8:	3708      	adds	r7, #8
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	20000394 	.word	0x20000394
 80075c4:	20000420 	.word	0x20000420
 80075c8:	20000434 	.word	0x20000434
 80075cc:	20000450 	.word	0x20000450
 80075d0:	20000464 	.word	0x20000464
 80075d4:	2000047c 	.word	0x2000047c
 80075d8:	20000448 	.word	0x20000448
 80075dc:	2000044c 	.word	0x2000044c

080075e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075e6:	e019      	b.n	800761c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80075e8:	f000 fbce 	bl	8007d88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075ec:	4b10      	ldr	r3, [pc, #64]	@ (8007630 <prvCheckTasksWaitingTermination+0x50>)
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	3304      	adds	r3, #4
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7fe fc93 	bl	8005f24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80075fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007634 <prvCheckTasksWaitingTermination+0x54>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	3b01      	subs	r3, #1
 8007604:	4a0b      	ldr	r2, [pc, #44]	@ (8007634 <prvCheckTasksWaitingTermination+0x54>)
 8007606:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007608:	4b0b      	ldr	r3, [pc, #44]	@ (8007638 <prvCheckTasksWaitingTermination+0x58>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3b01      	subs	r3, #1
 800760e:	4a0a      	ldr	r2, [pc, #40]	@ (8007638 <prvCheckTasksWaitingTermination+0x58>)
 8007610:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007612:	f000 fbeb 	bl	8007dec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f810 	bl	800763c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800761c:	4b06      	ldr	r3, [pc, #24]	@ (8007638 <prvCheckTasksWaitingTermination+0x58>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1e1      	bne.n	80075e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007624:	bf00      	nop
 8007626:	bf00      	nop
 8007628:	3708      	adds	r7, #8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	20000464 	.word	0x20000464
 8007634:	20000490 	.word	0x20000490
 8007638:	20000478 	.word	0x20000478

0800763c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800764a:	2b00      	cmp	r3, #0
 800764c:	d108      	bne.n	8007660 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007652:	4618      	mov	r0, r3
 8007654:	f000 fd88 	bl	8008168 <vPortFree>
				vPortFree( pxTCB );
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 fd85 	bl	8008168 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800765e:	e019      	b.n	8007694 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007666:	2b01      	cmp	r3, #1
 8007668:	d103      	bne.n	8007672 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fd7c 	bl	8008168 <vPortFree>
	}
 8007670:	e010      	b.n	8007694 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007678:	2b02      	cmp	r3, #2
 800767a:	d00b      	beq.n	8007694 <prvDeleteTCB+0x58>
	__asm volatile
 800767c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007680:	f383 8811 	msr	BASEPRI, r3
 8007684:	f3bf 8f6f 	isb	sy
 8007688:	f3bf 8f4f 	dsb	sy
 800768c:	60fb      	str	r3, [r7, #12]
}
 800768e:	bf00      	nop
 8007690:	bf00      	nop
 8007692:	e7fd      	b.n	8007690 <prvDeleteTCB+0x54>
	}
 8007694:	bf00      	nop
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076a2:	4b0c      	ldr	r3, [pc, #48]	@ (80076d4 <prvResetNextTaskUnblockTime+0x38>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d104      	bne.n	80076b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80076ac:	4b0a      	ldr	r3, [pc, #40]	@ (80076d8 <prvResetNextTaskUnblockTime+0x3c>)
 80076ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80076b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80076b4:	e008      	b.n	80076c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076b6:	4b07      	ldr	r3, [pc, #28]	@ (80076d4 <prvResetNextTaskUnblockTime+0x38>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	4a04      	ldr	r2, [pc, #16]	@ (80076d8 <prvResetNextTaskUnblockTime+0x3c>)
 80076c6:	6013      	str	r3, [r2, #0]
}
 80076c8:	bf00      	nop
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr
 80076d4:	20000448 	.word	0x20000448
 80076d8:	200004b0 	.word	0x200004b0

080076dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80076e2:	4b0b      	ldr	r3, [pc, #44]	@ (8007710 <xTaskGetSchedulerState+0x34>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d102      	bne.n	80076f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80076ea:	2301      	movs	r3, #1
 80076ec:	607b      	str	r3, [r7, #4]
 80076ee:	e008      	b.n	8007702 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076f0:	4b08      	ldr	r3, [pc, #32]	@ (8007714 <xTaskGetSchedulerState+0x38>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d102      	bne.n	80076fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80076f8:	2302      	movs	r3, #2
 80076fa:	607b      	str	r3, [r7, #4]
 80076fc:	e001      	b.n	8007702 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80076fe:	2300      	movs	r3, #0
 8007700:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007702:	687b      	ldr	r3, [r7, #4]
	}
 8007704:	4618      	mov	r0, r3
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr
 8007710:	2000049c 	.word	0x2000049c
 8007714:	200004b8 	.word	0x200004b8

08007718 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007724:	2300      	movs	r3, #0
 8007726:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d05e      	beq.n	80077ec <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007732:	4b31      	ldr	r3, [pc, #196]	@ (80077f8 <xTaskPriorityInherit+0xe0>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007738:	429a      	cmp	r2, r3
 800773a:	d24e      	bcs.n	80077da <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	2b00      	cmp	r3, #0
 8007742:	db06      	blt.n	8007752 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007744:	4b2c      	ldr	r3, [pc, #176]	@ (80077f8 <xTaskPriorityInherit+0xe0>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800774a:	f1c3 0207 	rsb	r2, r3, #7
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	6959      	ldr	r1, [r3, #20]
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800775a:	4613      	mov	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4413      	add	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4a26      	ldr	r2, [pc, #152]	@ (80077fc <xTaskPriorityInherit+0xe4>)
 8007764:	4413      	add	r3, r2
 8007766:	4299      	cmp	r1, r3
 8007768:	d12f      	bne.n	80077ca <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	3304      	adds	r3, #4
 800776e:	4618      	mov	r0, r3
 8007770:	f7fe fbd8 	bl	8005f24 <uxListRemove>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d10a      	bne.n	8007790 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800777e:	2201      	movs	r2, #1
 8007780:	fa02 f303 	lsl.w	r3, r2, r3
 8007784:	43da      	mvns	r2, r3
 8007786:	4b1e      	ldr	r3, [pc, #120]	@ (8007800 <xTaskPriorityInherit+0xe8>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4013      	ands	r3, r2
 800778c:	4a1c      	ldr	r2, [pc, #112]	@ (8007800 <xTaskPriorityInherit+0xe8>)
 800778e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007790:	4b19      	ldr	r3, [pc, #100]	@ (80077f8 <xTaskPriorityInherit+0xe0>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800779e:	2201      	movs	r2, #1
 80077a0:	409a      	lsls	r2, r3
 80077a2:	4b17      	ldr	r3, [pc, #92]	@ (8007800 <xTaskPriorityInherit+0xe8>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	4a15      	ldr	r2, [pc, #84]	@ (8007800 <xTaskPriorityInherit+0xe8>)
 80077aa:	6013      	str	r3, [r2, #0]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077b0:	4613      	mov	r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4413      	add	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4a10      	ldr	r2, [pc, #64]	@ (80077fc <xTaskPriorityInherit+0xe4>)
 80077ba:	441a      	add	r2, r3
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	3304      	adds	r3, #4
 80077c0:	4619      	mov	r1, r3
 80077c2:	4610      	mov	r0, r2
 80077c4:	f7fe fb51 	bl	8005e6a <vListInsertEnd>
 80077c8:	e004      	b.n	80077d4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80077ca:	4b0b      	ldr	r3, [pc, #44]	@ (80077f8 <xTaskPriorityInherit+0xe0>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80077d4:	2301      	movs	r3, #1
 80077d6:	60fb      	str	r3, [r7, #12]
 80077d8:	e008      	b.n	80077ec <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077de:	4b06      	ldr	r3, [pc, #24]	@ (80077f8 <xTaskPriorityInherit+0xe0>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d201      	bcs.n	80077ec <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80077e8:	2301      	movs	r3, #1
 80077ea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077ec:	68fb      	ldr	r3, [r7, #12]
	}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3710      	adds	r7, #16
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	20000390 	.word	0x20000390
 80077fc:	20000394 	.word	0x20000394
 8007800:	20000498 	.word	0x20000498

08007804 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007810:	2300      	movs	r3, #0
 8007812:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d070      	beq.n	80078fc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800781a:	4b3b      	ldr	r3, [pc, #236]	@ (8007908 <xTaskPriorityDisinherit+0x104>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	429a      	cmp	r2, r3
 8007822:	d00b      	beq.n	800783c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007828:	f383 8811 	msr	BASEPRI, r3
 800782c:	f3bf 8f6f 	isb	sy
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	60fb      	str	r3, [r7, #12]
}
 8007836:	bf00      	nop
 8007838:	bf00      	nop
 800783a:	e7fd      	b.n	8007838 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10b      	bne.n	800785c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	60bb      	str	r3, [r7, #8]
}
 8007856:	bf00      	nop
 8007858:	bf00      	nop
 800785a:	e7fd      	b.n	8007858 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007860:	1e5a      	subs	r2, r3, #1
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800786e:	429a      	cmp	r2, r3
 8007870:	d044      	beq.n	80078fc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007876:	2b00      	cmp	r3, #0
 8007878:	d140      	bne.n	80078fc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	3304      	adds	r3, #4
 800787e:	4618      	mov	r0, r3
 8007880:	f7fe fb50 	bl	8005f24 <uxListRemove>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d115      	bne.n	80078b6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800788e:	491f      	ldr	r1, [pc, #124]	@ (800790c <xTaskPriorityDisinherit+0x108>)
 8007890:	4613      	mov	r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4413      	add	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	440b      	add	r3, r1
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d10a      	bne.n	80078b6 <xTaskPriorityDisinherit+0xb2>
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a4:	2201      	movs	r2, #1
 80078a6:	fa02 f303 	lsl.w	r3, r2, r3
 80078aa:	43da      	mvns	r2, r3
 80078ac:	4b18      	ldr	r3, [pc, #96]	@ (8007910 <xTaskPriorityDisinherit+0x10c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4013      	ands	r3, r2
 80078b2:	4a17      	ldr	r2, [pc, #92]	@ (8007910 <xTaskPriorityDisinherit+0x10c>)
 80078b4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c2:	f1c3 0207 	rsb	r2, r3, #7
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ce:	2201      	movs	r2, #1
 80078d0:	409a      	lsls	r2, r3
 80078d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007910 <xTaskPriorityDisinherit+0x10c>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	4a0d      	ldr	r2, [pc, #52]	@ (8007910 <xTaskPriorityDisinherit+0x10c>)
 80078da:	6013      	str	r3, [r2, #0]
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078e0:	4613      	mov	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4413      	add	r3, r2
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	4a08      	ldr	r2, [pc, #32]	@ (800790c <xTaskPriorityDisinherit+0x108>)
 80078ea:	441a      	add	r2, r3
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	3304      	adds	r3, #4
 80078f0:	4619      	mov	r1, r3
 80078f2:	4610      	mov	r0, r2
 80078f4:	f7fe fab9 	bl	8005e6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80078f8:	2301      	movs	r3, #1
 80078fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80078fc:	697b      	ldr	r3, [r7, #20]
	}
 80078fe:	4618      	mov	r0, r3
 8007900:	3718      	adds	r7, #24
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	20000390 	.word	0x20000390
 800790c:	20000394 	.word	0x20000394
 8007910:	20000498 	.word	0x20000498

08007914 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007914:	b580      	push	{r7, lr}
 8007916:	b088      	sub	sp, #32
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007922:	2301      	movs	r3, #1
 8007924:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d079      	beq.n	8007a20 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10b      	bne.n	800794c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007938:	f383 8811 	msr	BASEPRI, r3
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	60fb      	str	r3, [r7, #12]
}
 8007946:	bf00      	nop
 8007948:	bf00      	nop
 800794a:	e7fd      	b.n	8007948 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007950:	683a      	ldr	r2, [r7, #0]
 8007952:	429a      	cmp	r2, r3
 8007954:	d902      	bls.n	800795c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	61fb      	str	r3, [r7, #28]
 800795a:	e002      	b.n	8007962 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007960:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007966:	69fa      	ldr	r2, [r7, #28]
 8007968:	429a      	cmp	r2, r3
 800796a:	d059      	beq.n	8007a20 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007970:	697a      	ldr	r2, [r7, #20]
 8007972:	429a      	cmp	r2, r3
 8007974:	d154      	bne.n	8007a20 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007976:	4b2c      	ldr	r3, [pc, #176]	@ (8007a28 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	69ba      	ldr	r2, [r7, #24]
 800797c:	429a      	cmp	r2, r3
 800797e:	d10b      	bne.n	8007998 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007984:	f383 8811 	msr	BASEPRI, r3
 8007988:	f3bf 8f6f 	isb	sy
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	60bb      	str	r3, [r7, #8]
}
 8007992:	bf00      	nop
 8007994:	bf00      	nop
 8007996:	e7fd      	b.n	8007994 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800799c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	69fa      	ldr	r2, [r7, #28]
 80079a2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	db04      	blt.n	80079b6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	f1c3 0207 	rsb	r2, r3, #7
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	6959      	ldr	r1, [r3, #20]
 80079ba:	693a      	ldr	r2, [r7, #16]
 80079bc:	4613      	mov	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	4413      	add	r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	4a19      	ldr	r2, [pc, #100]	@ (8007a2c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80079c6:	4413      	add	r3, r2
 80079c8:	4299      	cmp	r1, r3
 80079ca:	d129      	bne.n	8007a20 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	3304      	adds	r3, #4
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7fe faa7 	bl	8005f24 <uxListRemove>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d10a      	bne.n	80079f2 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e0:	2201      	movs	r2, #1
 80079e2:	fa02 f303 	lsl.w	r3, r2, r3
 80079e6:	43da      	mvns	r2, r3
 80079e8:	4b11      	ldr	r3, [pc, #68]	@ (8007a30 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4013      	ands	r3, r2
 80079ee:	4a10      	ldr	r2, [pc, #64]	@ (8007a30 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80079f0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f6:	2201      	movs	r2, #1
 80079f8:	409a      	lsls	r2, r3
 80079fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007a30 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	4a0b      	ldr	r2, [pc, #44]	@ (8007a30 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007a02:	6013      	str	r3, [r2, #0]
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a08:	4613      	mov	r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4a06      	ldr	r2, [pc, #24]	@ (8007a2c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007a12:	441a      	add	r2, r3
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	3304      	adds	r3, #4
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4610      	mov	r0, r2
 8007a1c:	f7fe fa25 	bl	8005e6a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a20:	bf00      	nop
 8007a22:	3720      	adds	r7, #32
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	20000390 	.word	0x20000390
 8007a2c:	20000394 	.word	0x20000394
 8007a30:	20000498 	.word	0x20000498

08007a34 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007a34:	b480      	push	{r7}
 8007a36:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007a38:	4b07      	ldr	r3, [pc, #28]	@ (8007a58 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d004      	beq.n	8007a4a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007a40:	4b05      	ldr	r3, [pc, #20]	@ (8007a58 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007a46:	3201      	adds	r2, #1
 8007a48:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8007a4a:	4b03      	ldr	r3, [pc, #12]	@ (8007a58 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
	}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr
 8007a58:	20000390 	.word	0x20000390

08007a5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a66:	4b29      	ldr	r3, [pc, #164]	@ (8007b0c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a6c:	4b28      	ldr	r3, [pc, #160]	@ (8007b10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	3304      	adds	r3, #4
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7fe fa56 	bl	8005f24 <uxListRemove>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d10b      	bne.n	8007a96 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007a7e:	4b24      	ldr	r3, [pc, #144]	@ (8007b10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a84:	2201      	movs	r2, #1
 8007a86:	fa02 f303 	lsl.w	r3, r2, r3
 8007a8a:	43da      	mvns	r2, r3
 8007a8c:	4b21      	ldr	r3, [pc, #132]	@ (8007b14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4013      	ands	r3, r2
 8007a92:	4a20      	ldr	r2, [pc, #128]	@ (8007b14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a94:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a9c:	d10a      	bne.n	8007ab4 <prvAddCurrentTaskToDelayedList+0x58>
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d007      	beq.n	8007ab4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8007b10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	4619      	mov	r1, r3
 8007aac:	481a      	ldr	r0, [pc, #104]	@ (8007b18 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007aae:	f7fe f9dc 	bl	8005e6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ab2:	e026      	b.n	8007b02 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4413      	add	r3, r2
 8007aba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007abc:	4b14      	ldr	r3, [pc, #80]	@ (8007b10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ac4:	68ba      	ldr	r2, [r7, #8]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d209      	bcs.n	8007ae0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007acc:	4b13      	ldr	r3, [pc, #76]	@ (8007b1c <prvAddCurrentTaskToDelayedList+0xc0>)
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8007b10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3304      	adds	r3, #4
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	4610      	mov	r0, r2
 8007ada:	f7fe f9ea 	bl	8005eb2 <vListInsert>
}
 8007ade:	e010      	b.n	8007b02 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8007b20 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8007b10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3304      	adds	r3, #4
 8007aea:	4619      	mov	r1, r3
 8007aec:	4610      	mov	r0, r2
 8007aee:	f7fe f9e0 	bl	8005eb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007af2:	4b0c      	ldr	r3, [pc, #48]	@ (8007b24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68ba      	ldr	r2, [r7, #8]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d202      	bcs.n	8007b02 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007afc:	4a09      	ldr	r2, [pc, #36]	@ (8007b24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	6013      	str	r3, [r2, #0]
}
 8007b02:	bf00      	nop
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	20000494 	.word	0x20000494
 8007b10:	20000390 	.word	0x20000390
 8007b14:	20000498 	.word	0x20000498
 8007b18:	2000047c 	.word	0x2000047c
 8007b1c:	2000044c 	.word	0x2000044c
 8007b20:	20000448 	.word	0x20000448
 8007b24:	200004b0 	.word	0x200004b0

08007b28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	3b04      	subs	r3, #4
 8007b38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007b40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	3b04      	subs	r3, #4
 8007b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	f023 0201 	bic.w	r2, r3, #1
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	3b04      	subs	r3, #4
 8007b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b58:	4a0c      	ldr	r2, [pc, #48]	@ (8007b8c <pxPortInitialiseStack+0x64>)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	3b14      	subs	r3, #20
 8007b62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	3b04      	subs	r3, #4
 8007b6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f06f 0202 	mvn.w	r2, #2
 8007b76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	3b20      	subs	r3, #32
 8007b7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3714      	adds	r7, #20
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr
 8007b8c:	08007b91 	.word	0x08007b91

08007b90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b96:	2300      	movs	r3, #0
 8007b98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b9a:	4b13      	ldr	r3, [pc, #76]	@ (8007be8 <prvTaskExitError+0x58>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ba2:	d00b      	beq.n	8007bbc <prvTaskExitError+0x2c>
	__asm volatile
 8007ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	60fb      	str	r3, [r7, #12]
}
 8007bb6:	bf00      	nop
 8007bb8:	bf00      	nop
 8007bba:	e7fd      	b.n	8007bb8 <prvTaskExitError+0x28>
	__asm volatile
 8007bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc0:	f383 8811 	msr	BASEPRI, r3
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	60bb      	str	r3, [r7, #8]
}
 8007bce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007bd0:	bf00      	nop
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d0fc      	beq.n	8007bd2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007bd8:	bf00      	nop
 8007bda:	bf00      	nop
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	20000018 	.word	0x20000018
 8007bec:	00000000 	.word	0x00000000

08007bf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007bf0:	4b07      	ldr	r3, [pc, #28]	@ (8007c10 <pxCurrentTCBConst2>)
 8007bf2:	6819      	ldr	r1, [r3, #0]
 8007bf4:	6808      	ldr	r0, [r1, #0]
 8007bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bfa:	f380 8809 	msr	PSP, r0
 8007bfe:	f3bf 8f6f 	isb	sy
 8007c02:	f04f 0000 	mov.w	r0, #0
 8007c06:	f380 8811 	msr	BASEPRI, r0
 8007c0a:	4770      	bx	lr
 8007c0c:	f3af 8000 	nop.w

08007c10 <pxCurrentTCBConst2>:
 8007c10:	20000390 	.word	0x20000390
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c14:	bf00      	nop
 8007c16:	bf00      	nop

08007c18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c18:	4808      	ldr	r0, [pc, #32]	@ (8007c3c <prvPortStartFirstTask+0x24>)
 8007c1a:	6800      	ldr	r0, [r0, #0]
 8007c1c:	6800      	ldr	r0, [r0, #0]
 8007c1e:	f380 8808 	msr	MSP, r0
 8007c22:	f04f 0000 	mov.w	r0, #0
 8007c26:	f380 8814 	msr	CONTROL, r0
 8007c2a:	b662      	cpsie	i
 8007c2c:	b661      	cpsie	f
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	df00      	svc	0
 8007c38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c3a:	bf00      	nop
 8007c3c:	e000ed08 	.word	0xe000ed08

08007c40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b086      	sub	sp, #24
 8007c44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c46:	4b47      	ldr	r3, [pc, #284]	@ (8007d64 <xPortStartScheduler+0x124>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a47      	ldr	r2, [pc, #284]	@ (8007d68 <xPortStartScheduler+0x128>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d10b      	bne.n	8007c68 <xPortStartScheduler+0x28>
	__asm volatile
 8007c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	60fb      	str	r3, [r7, #12]
}
 8007c62:	bf00      	nop
 8007c64:	bf00      	nop
 8007c66:	e7fd      	b.n	8007c64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c68:	4b3e      	ldr	r3, [pc, #248]	@ (8007d64 <xPortStartScheduler+0x124>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a3f      	ldr	r2, [pc, #252]	@ (8007d6c <xPortStartScheduler+0x12c>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d10b      	bne.n	8007c8a <xPortStartScheduler+0x4a>
	__asm volatile
 8007c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	613b      	str	r3, [r7, #16]
}
 8007c84:	bf00      	nop
 8007c86:	bf00      	nop
 8007c88:	e7fd      	b.n	8007c86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c8a:	4b39      	ldr	r3, [pc, #228]	@ (8007d70 <xPortStartScheduler+0x130>)
 8007c8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	22ff      	movs	r2, #255	@ 0xff
 8007c9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ca4:	78fb      	ldrb	r3, [r7, #3]
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007cac:	b2da      	uxtb	r2, r3
 8007cae:	4b31      	ldr	r3, [pc, #196]	@ (8007d74 <xPortStartScheduler+0x134>)
 8007cb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007cb2:	4b31      	ldr	r3, [pc, #196]	@ (8007d78 <xPortStartScheduler+0x138>)
 8007cb4:	2207      	movs	r2, #7
 8007cb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cb8:	e009      	b.n	8007cce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007cba:	4b2f      	ldr	r3, [pc, #188]	@ (8007d78 <xPortStartScheduler+0x138>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	4a2d      	ldr	r2, [pc, #180]	@ (8007d78 <xPortStartScheduler+0x138>)
 8007cc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007cc4:	78fb      	ldrb	r3, [r7, #3]
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	005b      	lsls	r3, r3, #1
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cce:	78fb      	ldrb	r3, [r7, #3]
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cd6:	2b80      	cmp	r3, #128	@ 0x80
 8007cd8:	d0ef      	beq.n	8007cba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007cda:	4b27      	ldr	r3, [pc, #156]	@ (8007d78 <xPortStartScheduler+0x138>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f1c3 0307 	rsb	r3, r3, #7
 8007ce2:	2b04      	cmp	r3, #4
 8007ce4:	d00b      	beq.n	8007cfe <xPortStartScheduler+0xbe>
	__asm volatile
 8007ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	60bb      	str	r3, [r7, #8]
}
 8007cf8:	bf00      	nop
 8007cfa:	bf00      	nop
 8007cfc:	e7fd      	b.n	8007cfa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8007d78 <xPortStartScheduler+0x138>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	021b      	lsls	r3, r3, #8
 8007d04:	4a1c      	ldr	r2, [pc, #112]	@ (8007d78 <xPortStartScheduler+0x138>)
 8007d06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d08:	4b1b      	ldr	r3, [pc, #108]	@ (8007d78 <xPortStartScheduler+0x138>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007d10:	4a19      	ldr	r2, [pc, #100]	@ (8007d78 <xPortStartScheduler+0x138>)
 8007d12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	b2da      	uxtb	r2, r3
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d1c:	4b17      	ldr	r3, [pc, #92]	@ (8007d7c <xPortStartScheduler+0x13c>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a16      	ldr	r2, [pc, #88]	@ (8007d7c <xPortStartScheduler+0x13c>)
 8007d22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007d26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d28:	4b14      	ldr	r3, [pc, #80]	@ (8007d7c <xPortStartScheduler+0x13c>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a13      	ldr	r2, [pc, #76]	@ (8007d7c <xPortStartScheduler+0x13c>)
 8007d2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007d32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d34:	f000 f8da 	bl	8007eec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d38:	4b11      	ldr	r3, [pc, #68]	@ (8007d80 <xPortStartScheduler+0x140>)
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d3e:	f000 f8f9 	bl	8007f34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d42:	4b10      	ldr	r3, [pc, #64]	@ (8007d84 <xPortStartScheduler+0x144>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a0f      	ldr	r2, [pc, #60]	@ (8007d84 <xPortStartScheduler+0x144>)
 8007d48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007d4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d4e:	f7ff ff63 	bl	8007c18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d52:	f7ff fa81 	bl	8007258 <vTaskSwitchContext>
	prvTaskExitError();
 8007d56:	f7ff ff1b 	bl	8007b90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3718      	adds	r7, #24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	e000ed00 	.word	0xe000ed00
 8007d68:	410fc271 	.word	0x410fc271
 8007d6c:	410fc270 	.word	0x410fc270
 8007d70:	e000e400 	.word	0xe000e400
 8007d74:	200004bc 	.word	0x200004bc
 8007d78:	200004c0 	.word	0x200004c0
 8007d7c:	e000ed20 	.word	0xe000ed20
 8007d80:	20000018 	.word	0x20000018
 8007d84:	e000ef34 	.word	0xe000ef34

08007d88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d92:	f383 8811 	msr	BASEPRI, r3
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	607b      	str	r3, [r7, #4]
}
 8007da0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007da2:	4b10      	ldr	r3, [pc, #64]	@ (8007de4 <vPortEnterCritical+0x5c>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	3301      	adds	r3, #1
 8007da8:	4a0e      	ldr	r2, [pc, #56]	@ (8007de4 <vPortEnterCritical+0x5c>)
 8007daa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007dac:	4b0d      	ldr	r3, [pc, #52]	@ (8007de4 <vPortEnterCritical+0x5c>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d110      	bne.n	8007dd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007db4:	4b0c      	ldr	r3, [pc, #48]	@ (8007de8 <vPortEnterCritical+0x60>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00b      	beq.n	8007dd6 <vPortEnterCritical+0x4e>
	__asm volatile
 8007dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	603b      	str	r3, [r7, #0]
}
 8007dd0:	bf00      	nop
 8007dd2:	bf00      	nop
 8007dd4:	e7fd      	b.n	8007dd2 <vPortEnterCritical+0x4a>
	}
}
 8007dd6:	bf00      	nop
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	20000018 	.word	0x20000018
 8007de8:	e000ed04 	.word	0xe000ed04

08007dec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007df2:	4b12      	ldr	r3, [pc, #72]	@ (8007e3c <vPortExitCritical+0x50>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d10b      	bne.n	8007e12 <vPortExitCritical+0x26>
	__asm volatile
 8007dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dfe:	f383 8811 	msr	BASEPRI, r3
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	607b      	str	r3, [r7, #4]
}
 8007e0c:	bf00      	nop
 8007e0e:	bf00      	nop
 8007e10:	e7fd      	b.n	8007e0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007e12:	4b0a      	ldr	r3, [pc, #40]	@ (8007e3c <vPortExitCritical+0x50>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	3b01      	subs	r3, #1
 8007e18:	4a08      	ldr	r2, [pc, #32]	@ (8007e3c <vPortExitCritical+0x50>)
 8007e1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e1c:	4b07      	ldr	r3, [pc, #28]	@ (8007e3c <vPortExitCritical+0x50>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d105      	bne.n	8007e30 <vPortExitCritical+0x44>
 8007e24:	2300      	movs	r3, #0
 8007e26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	f383 8811 	msr	BASEPRI, r3
}
 8007e2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e30:	bf00      	nop
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr
 8007e3c:	20000018 	.word	0x20000018

08007e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e40:	f3ef 8009 	mrs	r0, PSP
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	4b15      	ldr	r3, [pc, #84]	@ (8007ea0 <pxCurrentTCBConst>)
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	f01e 0f10 	tst.w	lr, #16
 8007e50:	bf08      	it	eq
 8007e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e5a:	6010      	str	r0, [r2, #0]
 8007e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007e64:	f380 8811 	msr	BASEPRI, r0
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	f3bf 8f6f 	isb	sy
 8007e70:	f7ff f9f2 	bl	8007258 <vTaskSwitchContext>
 8007e74:	f04f 0000 	mov.w	r0, #0
 8007e78:	f380 8811 	msr	BASEPRI, r0
 8007e7c:	bc09      	pop	{r0, r3}
 8007e7e:	6819      	ldr	r1, [r3, #0]
 8007e80:	6808      	ldr	r0, [r1, #0]
 8007e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e86:	f01e 0f10 	tst.w	lr, #16
 8007e8a:	bf08      	it	eq
 8007e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e90:	f380 8809 	msr	PSP, r0
 8007e94:	f3bf 8f6f 	isb	sy
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	f3af 8000 	nop.w

08007ea0 <pxCurrentTCBConst>:
 8007ea0:	20000390 	.word	0x20000390
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ea4:	bf00      	nop
 8007ea6:	bf00      	nop

08007ea8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
	__asm volatile
 8007eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	607b      	str	r3, [r7, #4]
}
 8007ec0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ec2:	f7ff f90f 	bl	80070e4 <xTaskIncrementTick>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d003      	beq.n	8007ed4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007ecc:	4b06      	ldr	r3, [pc, #24]	@ (8007ee8 <xPortSysTickHandler+0x40>)
 8007ece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	f383 8811 	msr	BASEPRI, r3
}
 8007ede:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ee0:	bf00      	nop
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	e000ed04 	.word	0xe000ed04

08007eec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007eec:	b480      	push	{r7}
 8007eee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8007f20 <vPortSetupTimerInterrupt+0x34>)
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8007f24 <vPortSetupTimerInterrupt+0x38>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007efc:	4b0a      	ldr	r3, [pc, #40]	@ (8007f28 <vPortSetupTimerInterrupt+0x3c>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a0a      	ldr	r2, [pc, #40]	@ (8007f2c <vPortSetupTimerInterrupt+0x40>)
 8007f02:	fba2 2303 	umull	r2, r3, r2, r3
 8007f06:	099b      	lsrs	r3, r3, #6
 8007f08:	4a09      	ldr	r2, [pc, #36]	@ (8007f30 <vPortSetupTimerInterrupt+0x44>)
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f0e:	4b04      	ldr	r3, [pc, #16]	@ (8007f20 <vPortSetupTimerInterrupt+0x34>)
 8007f10:	2207      	movs	r2, #7
 8007f12:	601a      	str	r2, [r3, #0]
}
 8007f14:	bf00      	nop
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	e000e010 	.word	0xe000e010
 8007f24:	e000e018 	.word	0xe000e018
 8007f28:	2000000c 	.word	0x2000000c
 8007f2c:	10624dd3 	.word	0x10624dd3
 8007f30:	e000e014 	.word	0xe000e014

08007f34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007f44 <vPortEnableVFP+0x10>
 8007f38:	6801      	ldr	r1, [r0, #0]
 8007f3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007f3e:	6001      	str	r1, [r0, #0]
 8007f40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f42:	bf00      	nop
 8007f44:	e000ed88 	.word	0xe000ed88

08007f48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f4e:	f3ef 8305 	mrs	r3, IPSR
 8007f52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2b0f      	cmp	r3, #15
 8007f58:	d915      	bls.n	8007f86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f5a:	4a18      	ldr	r2, [pc, #96]	@ (8007fbc <vPortValidateInterruptPriority+0x74>)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	4413      	add	r3, r2
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f64:	4b16      	ldr	r3, [pc, #88]	@ (8007fc0 <vPortValidateInterruptPriority+0x78>)
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	7afa      	ldrb	r2, [r7, #11]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d20b      	bcs.n	8007f86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f72:	f383 8811 	msr	BASEPRI, r3
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	f3bf 8f4f 	dsb	sy
 8007f7e:	607b      	str	r3, [r7, #4]
}
 8007f80:	bf00      	nop
 8007f82:	bf00      	nop
 8007f84:	e7fd      	b.n	8007f82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f86:	4b0f      	ldr	r3, [pc, #60]	@ (8007fc4 <vPortValidateInterruptPriority+0x7c>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8007fc8 <vPortValidateInterruptPriority+0x80>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d90b      	bls.n	8007fae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f9a:	f383 8811 	msr	BASEPRI, r3
 8007f9e:	f3bf 8f6f 	isb	sy
 8007fa2:	f3bf 8f4f 	dsb	sy
 8007fa6:	603b      	str	r3, [r7, #0]
}
 8007fa8:	bf00      	nop
 8007faa:	bf00      	nop
 8007fac:	e7fd      	b.n	8007faa <vPortValidateInterruptPriority+0x62>
	}
 8007fae:	bf00      	nop
 8007fb0:	3714      	adds	r7, #20
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	e000e3f0 	.word	0xe000e3f0
 8007fc0:	200004bc 	.word	0x200004bc
 8007fc4:	e000ed0c 	.word	0xe000ed0c
 8007fc8:	200004c0 	.word	0x200004c0

08007fcc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b08a      	sub	sp, #40	@ 0x28
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007fd8:	f7fe ffd8 	bl	8006f8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007fdc:	4b5c      	ldr	r3, [pc, #368]	@ (8008150 <pvPortMalloc+0x184>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d101      	bne.n	8007fe8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007fe4:	f000 f924 	bl	8008230 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007fe8:	4b5a      	ldr	r3, [pc, #360]	@ (8008154 <pvPortMalloc+0x188>)
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4013      	ands	r3, r2
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f040 8095 	bne.w	8008120 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d01e      	beq.n	800803a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007ffc:	2208      	movs	r2, #8
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4413      	add	r3, r2
 8008002:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f003 0307 	and.w	r3, r3, #7
 800800a:	2b00      	cmp	r3, #0
 800800c:	d015      	beq.n	800803a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f023 0307 	bic.w	r3, r3, #7
 8008014:	3308      	adds	r3, #8
 8008016:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f003 0307 	and.w	r3, r3, #7
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00b      	beq.n	800803a <pvPortMalloc+0x6e>
	__asm volatile
 8008022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008026:	f383 8811 	msr	BASEPRI, r3
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	617b      	str	r3, [r7, #20]
}
 8008034:	bf00      	nop
 8008036:	bf00      	nop
 8008038:	e7fd      	b.n	8008036 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d06f      	beq.n	8008120 <pvPortMalloc+0x154>
 8008040:	4b45      	ldr	r3, [pc, #276]	@ (8008158 <pvPortMalloc+0x18c>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	429a      	cmp	r2, r3
 8008048:	d86a      	bhi.n	8008120 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800804a:	4b44      	ldr	r3, [pc, #272]	@ (800815c <pvPortMalloc+0x190>)
 800804c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800804e:	4b43      	ldr	r3, [pc, #268]	@ (800815c <pvPortMalloc+0x190>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008054:	e004      	b.n	8008060 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008058:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800805a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	429a      	cmp	r2, r3
 8008068:	d903      	bls.n	8008072 <pvPortMalloc+0xa6>
 800806a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1f1      	bne.n	8008056 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008072:	4b37      	ldr	r3, [pc, #220]	@ (8008150 <pvPortMalloc+0x184>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008078:	429a      	cmp	r2, r3
 800807a:	d051      	beq.n	8008120 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800807c:	6a3b      	ldr	r3, [r7, #32]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2208      	movs	r2, #8
 8008082:	4413      	add	r3, r2
 8008084:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	6a3b      	ldr	r3, [r7, #32]
 800808c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800808e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008090:	685a      	ldr	r2, [r3, #4]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	1ad2      	subs	r2, r2, r3
 8008096:	2308      	movs	r3, #8
 8008098:	005b      	lsls	r3, r3, #1
 800809a:	429a      	cmp	r2, r3
 800809c:	d920      	bls.n	80080e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800809e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4413      	add	r3, r2
 80080a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	f003 0307 	and.w	r3, r3, #7
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00b      	beq.n	80080c8 <pvPortMalloc+0xfc>
	__asm volatile
 80080b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	613b      	str	r3, [r7, #16]
}
 80080c2:	bf00      	nop
 80080c4:	bf00      	nop
 80080c6:	e7fd      	b.n	80080c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80080c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ca:	685a      	ldr	r2, [r3, #4]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	1ad2      	subs	r2, r2, r3
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80080d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080da:	69b8      	ldr	r0, [r7, #24]
 80080dc:	f000 f90a 	bl	80082f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080e0:	4b1d      	ldr	r3, [pc, #116]	@ (8008158 <pvPortMalloc+0x18c>)
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	4a1b      	ldr	r2, [pc, #108]	@ (8008158 <pvPortMalloc+0x18c>)
 80080ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80080ee:	4b1a      	ldr	r3, [pc, #104]	@ (8008158 <pvPortMalloc+0x18c>)
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	4b1b      	ldr	r3, [pc, #108]	@ (8008160 <pvPortMalloc+0x194>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d203      	bcs.n	8008102 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80080fa:	4b17      	ldr	r3, [pc, #92]	@ (8008158 <pvPortMalloc+0x18c>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a18      	ldr	r2, [pc, #96]	@ (8008160 <pvPortMalloc+0x194>)
 8008100:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008104:	685a      	ldr	r2, [r3, #4]
 8008106:	4b13      	ldr	r3, [pc, #76]	@ (8008154 <pvPortMalloc+0x188>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	431a      	orrs	r2, r3
 800810c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008112:	2200      	movs	r2, #0
 8008114:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008116:	4b13      	ldr	r3, [pc, #76]	@ (8008164 <pvPortMalloc+0x198>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	3301      	adds	r3, #1
 800811c:	4a11      	ldr	r2, [pc, #68]	@ (8008164 <pvPortMalloc+0x198>)
 800811e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008120:	f7fe ff42 	bl	8006fa8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	f003 0307 	and.w	r3, r3, #7
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00b      	beq.n	8008146 <pvPortMalloc+0x17a>
	__asm volatile
 800812e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	60fb      	str	r3, [r7, #12]
}
 8008140:	bf00      	nop
 8008142:	bf00      	nop
 8008144:	e7fd      	b.n	8008142 <pvPortMalloc+0x176>
	return pvReturn;
 8008146:	69fb      	ldr	r3, [r7, #28]
}
 8008148:	4618      	mov	r0, r3
 800814a:	3728      	adds	r7, #40	@ 0x28
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	200040cc 	.word	0x200040cc
 8008154:	200040e0 	.word	0x200040e0
 8008158:	200040d0 	.word	0x200040d0
 800815c:	200040c4 	.word	0x200040c4
 8008160:	200040d4 	.word	0x200040d4
 8008164:	200040d8 	.word	0x200040d8

08008168 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b086      	sub	sp, #24
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d04f      	beq.n	800821a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800817a:	2308      	movs	r3, #8
 800817c:	425b      	negs	r3, r3
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	4413      	add	r3, r2
 8008182:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	685a      	ldr	r2, [r3, #4]
 800818c:	4b25      	ldr	r3, [pc, #148]	@ (8008224 <vPortFree+0xbc>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4013      	ands	r3, r2
 8008192:	2b00      	cmp	r3, #0
 8008194:	d10b      	bne.n	80081ae <vPortFree+0x46>
	__asm volatile
 8008196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800819a:	f383 8811 	msr	BASEPRI, r3
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	60fb      	str	r3, [r7, #12]
}
 80081a8:	bf00      	nop
 80081aa:	bf00      	nop
 80081ac:	e7fd      	b.n	80081aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00b      	beq.n	80081ce <vPortFree+0x66>
	__asm volatile
 80081b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ba:	f383 8811 	msr	BASEPRI, r3
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f3bf 8f4f 	dsb	sy
 80081c6:	60bb      	str	r3, [r7, #8]
}
 80081c8:	bf00      	nop
 80081ca:	bf00      	nop
 80081cc:	e7fd      	b.n	80081ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	4b14      	ldr	r3, [pc, #80]	@ (8008224 <vPortFree+0xbc>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4013      	ands	r3, r2
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d01e      	beq.n	800821a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d11a      	bne.n	800821a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	685a      	ldr	r2, [r3, #4]
 80081e8:	4b0e      	ldr	r3, [pc, #56]	@ (8008224 <vPortFree+0xbc>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	43db      	mvns	r3, r3
 80081ee:	401a      	ands	r2, r3
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80081f4:	f7fe feca 	bl	8006f8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	685a      	ldr	r2, [r3, #4]
 80081fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008228 <vPortFree+0xc0>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4413      	add	r3, r2
 8008202:	4a09      	ldr	r2, [pc, #36]	@ (8008228 <vPortFree+0xc0>)
 8008204:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008206:	6938      	ldr	r0, [r7, #16]
 8008208:	f000 f874 	bl	80082f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800820c:	4b07      	ldr	r3, [pc, #28]	@ (800822c <vPortFree+0xc4>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	3301      	adds	r3, #1
 8008212:	4a06      	ldr	r2, [pc, #24]	@ (800822c <vPortFree+0xc4>)
 8008214:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008216:	f7fe fec7 	bl	8006fa8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800821a:	bf00      	nop
 800821c:	3718      	adds	r7, #24
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	200040e0 	.word	0x200040e0
 8008228:	200040d0 	.word	0x200040d0
 800822c:	200040dc 	.word	0x200040dc

08008230 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008230:	b480      	push	{r7}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008236:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800823a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800823c:	4b27      	ldr	r3, [pc, #156]	@ (80082dc <prvHeapInit+0xac>)
 800823e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f003 0307 	and.w	r3, r3, #7
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00c      	beq.n	8008264 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	3307      	adds	r3, #7
 800824e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f023 0307 	bic.w	r3, r3, #7
 8008256:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	1ad3      	subs	r3, r2, r3
 800825e:	4a1f      	ldr	r2, [pc, #124]	@ (80082dc <prvHeapInit+0xac>)
 8008260:	4413      	add	r3, r2
 8008262:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008268:	4a1d      	ldr	r2, [pc, #116]	@ (80082e0 <prvHeapInit+0xb0>)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800826e:	4b1c      	ldr	r3, [pc, #112]	@ (80082e0 <prvHeapInit+0xb0>)
 8008270:	2200      	movs	r2, #0
 8008272:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	4413      	add	r3, r2
 800827a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800827c:	2208      	movs	r2, #8
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	1a9b      	subs	r3, r3, r2
 8008282:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f023 0307 	bic.w	r3, r3, #7
 800828a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	4a15      	ldr	r2, [pc, #84]	@ (80082e4 <prvHeapInit+0xb4>)
 8008290:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008292:	4b14      	ldr	r3, [pc, #80]	@ (80082e4 <prvHeapInit+0xb4>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2200      	movs	r2, #0
 8008298:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800829a:	4b12      	ldr	r3, [pc, #72]	@ (80082e4 <prvHeapInit+0xb4>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2200      	movs	r2, #0
 80082a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	1ad2      	subs	r2, r2, r3
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80082b0:	4b0c      	ldr	r3, [pc, #48]	@ (80082e4 <prvHeapInit+0xb4>)
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	4a0a      	ldr	r2, [pc, #40]	@ (80082e8 <prvHeapInit+0xb8>)
 80082be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	4a09      	ldr	r2, [pc, #36]	@ (80082ec <prvHeapInit+0xbc>)
 80082c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80082c8:	4b09      	ldr	r3, [pc, #36]	@ (80082f0 <prvHeapInit+0xc0>)
 80082ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80082ce:	601a      	str	r2, [r3, #0]
}
 80082d0:	bf00      	nop
 80082d2:	3714      	adds	r7, #20
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr
 80082dc:	200004c4 	.word	0x200004c4
 80082e0:	200040c4 	.word	0x200040c4
 80082e4:	200040cc 	.word	0x200040cc
 80082e8:	200040d4 	.word	0x200040d4
 80082ec:	200040d0 	.word	0x200040d0
 80082f0:	200040e0 	.word	0x200040e0

080082f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082fc:	4b28      	ldr	r3, [pc, #160]	@ (80083a0 <prvInsertBlockIntoFreeList+0xac>)
 80082fe:	60fb      	str	r3, [r7, #12]
 8008300:	e002      	b.n	8008308 <prvInsertBlockIntoFreeList+0x14>
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	60fb      	str	r3, [r7, #12]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	429a      	cmp	r2, r3
 8008310:	d8f7      	bhi.n	8008302 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	68ba      	ldr	r2, [r7, #8]
 800831c:	4413      	add	r3, r2
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	429a      	cmp	r2, r3
 8008322:	d108      	bne.n	8008336 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	685a      	ldr	r2, [r3, #4]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	441a      	add	r2, r3
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	68ba      	ldr	r2, [r7, #8]
 8008340:	441a      	add	r2, r3
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	429a      	cmp	r2, r3
 8008348:	d118      	bne.n	800837c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	4b15      	ldr	r3, [pc, #84]	@ (80083a4 <prvInsertBlockIntoFreeList+0xb0>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	429a      	cmp	r2, r3
 8008354:	d00d      	beq.n	8008372 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685a      	ldr	r2, [r3, #4]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	441a      	add	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	601a      	str	r2, [r3, #0]
 8008370:	e008      	b.n	8008384 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008372:	4b0c      	ldr	r3, [pc, #48]	@ (80083a4 <prvInsertBlockIntoFreeList+0xb0>)
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	601a      	str	r2, [r3, #0]
 800837a:	e003      	b.n	8008384 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	429a      	cmp	r2, r3
 800838a:	d002      	beq.n	8008392 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008392:	bf00      	nop
 8008394:	3714      	adds	r7, #20
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	200040c4 	.word	0x200040c4
 80083a4:	200040cc 	.word	0x200040cc

080083a8 <memset>:
 80083a8:	4402      	add	r2, r0
 80083aa:	4603      	mov	r3, r0
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d100      	bne.n	80083b2 <memset+0xa>
 80083b0:	4770      	bx	lr
 80083b2:	f803 1b01 	strb.w	r1, [r3], #1
 80083b6:	e7f9      	b.n	80083ac <memset+0x4>

080083b8 <__libc_init_array>:
 80083b8:	b570      	push	{r4, r5, r6, lr}
 80083ba:	4d0d      	ldr	r5, [pc, #52]	@ (80083f0 <__libc_init_array+0x38>)
 80083bc:	4c0d      	ldr	r4, [pc, #52]	@ (80083f4 <__libc_init_array+0x3c>)
 80083be:	1b64      	subs	r4, r4, r5
 80083c0:	10a4      	asrs	r4, r4, #2
 80083c2:	2600      	movs	r6, #0
 80083c4:	42a6      	cmp	r6, r4
 80083c6:	d109      	bne.n	80083dc <__libc_init_array+0x24>
 80083c8:	4d0b      	ldr	r5, [pc, #44]	@ (80083f8 <__libc_init_array+0x40>)
 80083ca:	4c0c      	ldr	r4, [pc, #48]	@ (80083fc <__libc_init_array+0x44>)
 80083cc:	f000 f87c 	bl	80084c8 <_init>
 80083d0:	1b64      	subs	r4, r4, r5
 80083d2:	10a4      	asrs	r4, r4, #2
 80083d4:	2600      	movs	r6, #0
 80083d6:	42a6      	cmp	r6, r4
 80083d8:	d105      	bne.n	80083e6 <__libc_init_array+0x2e>
 80083da:	bd70      	pop	{r4, r5, r6, pc}
 80083dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80083e0:	4798      	blx	r3
 80083e2:	3601      	adds	r6, #1
 80083e4:	e7ee      	b.n	80083c4 <__libc_init_array+0xc>
 80083e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80083ea:	4798      	blx	r3
 80083ec:	3601      	adds	r6, #1
 80083ee:	e7f2      	b.n	80083d6 <__libc_init_array+0x1e>
 80083f0:	080085b8 	.word	0x080085b8
 80083f4:	080085b8 	.word	0x080085b8
 80083f8:	080085b8 	.word	0x080085b8
 80083fc:	080085bc 	.word	0x080085bc

08008400 <memcpy>:
 8008400:	440a      	add	r2, r1
 8008402:	4291      	cmp	r1, r2
 8008404:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008408:	d100      	bne.n	800840c <memcpy+0xc>
 800840a:	4770      	bx	lr
 800840c:	b510      	push	{r4, lr}
 800840e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008412:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008416:	4291      	cmp	r1, r2
 8008418:	d1f9      	bne.n	800840e <memcpy+0xe>
 800841a:	bd10      	pop	{r4, pc}

0800841c <fmaxf>:
 800841c:	b508      	push	{r3, lr}
 800841e:	ed2d 8b02 	vpush	{d8}
 8008422:	eeb0 8a40 	vmov.f32	s16, s0
 8008426:	eef0 8a60 	vmov.f32	s17, s1
 800842a:	f000 f831 	bl	8008490 <__fpclassifyf>
 800842e:	b930      	cbnz	r0, 800843e <fmaxf+0x22>
 8008430:	eeb0 8a68 	vmov.f32	s16, s17
 8008434:	eeb0 0a48 	vmov.f32	s0, s16
 8008438:	ecbd 8b02 	vpop	{d8}
 800843c:	bd08      	pop	{r3, pc}
 800843e:	eeb0 0a68 	vmov.f32	s0, s17
 8008442:	f000 f825 	bl	8008490 <__fpclassifyf>
 8008446:	2800      	cmp	r0, #0
 8008448:	d0f4      	beq.n	8008434 <fmaxf+0x18>
 800844a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800844e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008452:	dded      	ble.n	8008430 <fmaxf+0x14>
 8008454:	e7ee      	b.n	8008434 <fmaxf+0x18>

08008456 <fminf>:
 8008456:	b508      	push	{r3, lr}
 8008458:	ed2d 8b02 	vpush	{d8}
 800845c:	eeb0 8a40 	vmov.f32	s16, s0
 8008460:	eef0 8a60 	vmov.f32	s17, s1
 8008464:	f000 f814 	bl	8008490 <__fpclassifyf>
 8008468:	b930      	cbnz	r0, 8008478 <fminf+0x22>
 800846a:	eeb0 8a68 	vmov.f32	s16, s17
 800846e:	eeb0 0a48 	vmov.f32	s0, s16
 8008472:	ecbd 8b02 	vpop	{d8}
 8008476:	bd08      	pop	{r3, pc}
 8008478:	eeb0 0a68 	vmov.f32	s0, s17
 800847c:	f000 f808 	bl	8008490 <__fpclassifyf>
 8008480:	2800      	cmp	r0, #0
 8008482:	d0f4      	beq.n	800846e <fminf+0x18>
 8008484:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800848c:	d5ed      	bpl.n	800846a <fminf+0x14>
 800848e:	e7ee      	b.n	800846e <fminf+0x18>

08008490 <__fpclassifyf>:
 8008490:	ee10 3a10 	vmov	r3, s0
 8008494:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8008498:	d00d      	beq.n	80084b6 <__fpclassifyf+0x26>
 800849a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800849e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 80084a2:	d30a      	bcc.n	80084ba <__fpclassifyf+0x2a>
 80084a4:	4b07      	ldr	r3, [pc, #28]	@ (80084c4 <__fpclassifyf+0x34>)
 80084a6:	1e42      	subs	r2, r0, #1
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d908      	bls.n	80084be <__fpclassifyf+0x2e>
 80084ac:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 80084b0:	4258      	negs	r0, r3
 80084b2:	4158      	adcs	r0, r3
 80084b4:	4770      	bx	lr
 80084b6:	2002      	movs	r0, #2
 80084b8:	4770      	bx	lr
 80084ba:	2004      	movs	r0, #4
 80084bc:	4770      	bx	lr
 80084be:	2003      	movs	r0, #3
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	007ffffe 	.word	0x007ffffe

080084c8 <_init>:
 80084c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ca:	bf00      	nop
 80084cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ce:	bc08      	pop	{r3}
 80084d0:	469e      	mov	lr, r3
 80084d2:	4770      	bx	lr

080084d4 <_fini>:
 80084d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d6:	bf00      	nop
 80084d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084da:	bc08      	pop	{r3}
 80084dc:	469e      	mov	lr, r3
 80084de:	4770      	bx	lr
